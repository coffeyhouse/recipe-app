

==================== C:\Code\recipe-app\backend.txt ====================



==================== C:\Code\recipe-app\backend\mydatabase2.db ====================



==================== C:\Code\recipe-app\backend\run.py ====================

from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)


==================== C:\Code\recipe-app\backend\app\base.py ====================

from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class TimestampMixin(object):
    CreatedAt = db.Column(db.DateTime, default=datetime.utcnow)
    UpdatedAt = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


==================== C:\Code\recipe-app\backend\app\extensions.py ====================

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


==================== C:\Code\recipe-app\backend\app\generic_crud.py ====================

from flask import Blueprint
from .utils import get_all, get_by_id, create_record, update_record, delete_record
from . import db

def create_crud_blueprint(model, url_prefix):
    bp = Blueprint(model.__tablename__, __name__, url_prefix=url_prefix)

    @bp.route('/', methods=['GET'])
    def get_records():
        return get_all(model)

    @bp.route('/<int:id>', methods=['GET'])
    def get_record(id):
        return get_by_id(model, id)

    @bp.route('/', methods=['POST'])
    def create():
        return create_record(model)

    @bp.route('/<int:id>', methods=['PUT'])
    def update(id):
        return update_record(model, id)

    @bp.route('/<int:id>', methods=['DELETE'])
    def delete(id):
        return delete_record(model, id)

    return bp


==================== C:\Code\recipe-app\backend\app\models.py ====================

from werkzeug.security import generate_password_hash, check_password_hash
from .extensions import db
from .base import TimestampMixin

class IngredientCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientCategories'
    CategoryID = db.Column(db.Integer, primary_key=True)
    CategoryName = db.Column(db.String, unique=True, nullable=False)

    def to_dict(self):
        return {
            'CategoryID': self.CategoryID,
            'CategoryName': self.CategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Ingredient(db.Model, TimestampMixin):
    __tablename__ = 'Ingredients'
    IngredientID = db.Column(db.Integer, primary_key=True)
    SubCategoryID = db.Column(db.Integer, db.ForeignKey('IngredientSubCategories.SubCategoryID'), nullable=False)
    IngredientName = db.Column(db.String, nullable=False)
    PurchaseUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))
    PurchaseWeightVolume = db.Column(db.Float)
    PurchaseWeightUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))

    def to_dict(self):
        return {
            'IngredientID': self.IngredientID,
            'SubCategoryID': self.SubCategoryID,
            'IngredientName': self.IngredientName,
            'PurchaseUnitID': self.PurchaseUnitID,
            'PurchaseWeightVolume': self.PurchaseWeightVolume,
            'PurchaseWeightUnitID': self.PurchaseWeightUnitID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class IngredientSubCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientSubCategories'
    SubCategoryID = db.Column(db.Integer, primary_key=True)
    CategoryID = db.Column(db.Integer, db.ForeignKey('IngredientCategories.CategoryID'), nullable=False)
    SubCategoryName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SubCategoryID': self.SubCategoryID,
            'CategoryID': self.CategoryID,
            'SubCategoryName': self.SubCategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class MealPlanRecipe(db.Model):
    __tablename__ = 'MealPlanRecipes'
    MealPlanRecipeID = db.Column(db.Integer, primary_key=True)
    MealPlanID = db.Column(db.Integer, db.ForeignKey('MealPlans.MealPlanID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    MealType = db.Column(db.String)
    Date = db.Column(db.Date, nullable=False)

    def to_dict(self):
        return {
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'MealPlanID': self.MealPlanID,
            'RecipeID': self.RecipeID,
            'MealType': self.MealType,
            'Date': self.Date
        }

class MealPlan(db.Model, TimestampMixin):
    __tablename__ = 'MealPlans'
    MealPlanID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    PlanName = db.Column(db.String)
    StartDate = db.Column(db.Date)
    EndDate = db.Column(db.Date)

    def to_dict(self):
        return {
            'MealPlanID': self.MealPlanID,
            'UserID': self.UserID,
            'PlanName': self.PlanName,
            'StartDate': self.StartDate,
            'EndDate': self.EndDate,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeAuthor(db.Model):
    __tablename__ = 'RecipeAuthors'
    AuthorID = db.Column(db.Integer, primary_key=True)
    AuthorName = db.Column(db.String, nullable=False)
    AuthorImageURL = db.Column(db.String)

    def to_dict(self):
        return {
            'AuthorID': self.AuthorID,
            'AuthorName': self.AuthorName,
            'AuthorImageURL': self.AuthorImageURL
        }

class RecipeBook(db.Model):
    __tablename__ = 'RecipeBooks'
    BookID = db.Column(db.Integer, primary_key=True)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='CASCADE'), nullable=False)
    BookName = db.Column(db.String, nullable=False)
    CoverArtURL = db.Column(db.String)

    def to_dict(self):
        return {
            'BookID': self.BookID,
            'AuthorID': self.AuthorID,
            'BookName': self.BookName,
            'CoverArtURL': self.CoverArtURL
        }

class RecipeIngredient(db.Model):
    __tablename__ = 'RecipeIngredients'
    RecipeIngredientID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    SectionID = db.Column(db.Integer, db.ForeignKey('RecipeIngredientSections.SectionID', ondelete='CASCADE'))
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))

    def to_dict(self):
        return {
            'RecipeIngredientID': self.RecipeIngredientID,
            'RecipeID': self.RecipeID,
            'IngredientID': self.IngredientID,
            'SectionID': self.SectionID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID
        }

class RecipeIngredientSection(db.Model):
    __tablename__ = 'RecipeIngredientSections'
    SectionID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    SectionName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SectionID': self.SectionID,
            'RecipeID': self.RecipeID,
            'SectionName': self.SectionName
        }

class RecipeReview(db.Model):
    __tablename__ = 'RecipeReviews'
    ReviewID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    Rating = db.Column(db.Float, nullable=False)
    ReviewText = db.Column(db.String)

    def to_dict(self):
        return {
            'ReviewID': self.ReviewID,
            'UserID': self.UserID,
            'RecipeID': self.RecipeID,
            'Rating': self.Rating,
            'ReviewText': self.ReviewText
        }

class Recipe(db.Model, TimestampMixin):
    __tablename__ = 'Recipes'
    RecipeID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='SET NULL'))
    RecipeName = db.Column(db.String, nullable=False)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='SET NULL'))
    BookID = db.Column(db.Integer, db.ForeignKey('RecipeBooks.BookID', ondelete='SET NULL'))
    PageNumber = db.Column(db.Integer)
    OnlineURL = db.Column(db.String)
    CookTime = db.Column(db.Integer)
    Difficulty = db.Column(db.String)
    Type = db.Column(db.String)
    ImageURL = db.Column(db.String)
    Servings = db.Column(db.Integer)
    Cuisine = db.Column(db.String)

    def to_dict(self):
        return {
            'RecipeID': self.RecipeID,
            'UserID': self.UserID,
            'RecipeName': self.RecipeName,
            'AuthorID': self.AuthorID,
            'BookID': self.BookID,
            'PageNumber': self.PageNumber,
            'OnlineURL': self.OnlineURL,
            'CookTime': self.CookTime,
            'Difficulty': self.Difficulty,
            'Type': self.Type,
            'ImageURL': self.ImageURL,
            'Servings': self.Servings,
            'Cuisine': self.Cuisine,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeStep(db.Model):
    __tablename__ = 'RecipeSteps'
    StepID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    StepNumber = db.Column(db.Integer, nullable=False)
    Description = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'StepID': self.StepID,
            'RecipeID': self.RecipeID,
            'StepNumber': self.StepNumber,
            'Description': self.Description
        }

class RecipeTag(db.Model):
    __tablename__ = 'RecipeTags'
    RecipeTagID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    TagID = db.Column(db.Integer, db.ForeignKey('Tags.TagID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'RecipeTagID': self.RecipeTagID,
            'RecipeID': self.RecipeID,
            'TagID': self.TagID
        }

class ShoppingListIngredient(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingListIngredients'
    ShoppingListIngredientID = db.Column(db.Integer, primary_key=True)
    ShoppingListID = db.Column(db.Integer, db.ForeignKey('ShoppingLists.ShoppingListID', ondelete='CASCADE'), nullable=False)
    MealPlanRecipeID = db.Column(db.Integer, db.ForeignKey('MealPlanRecipes.MealPlanRecipeID', ondelete='CASCADE'))
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))
    IsManual = db.Column(db.Boolean)
    AlreadyHave = db.Column(db.Boolean)
    Purchased = db.Column(db.Boolean)

    def to_dict(self):
        return {
            'ShoppingListIngredientID': self.ShoppingListIngredientID,
            'ShoppingListID': self.ShoppingListID,
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'IngredientID': self.IngredientID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID,
            'IsManual': self.IsManual,
            'AlreadyHave': self.AlreadyHave,
            'Purchased': self.Purchased,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class ShoppingList(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingLists'
    ShoppingListID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'ShoppingListID': self.ShoppingListID,
            'UserID': self.UserID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Tag(db.Model):
    __tablename__ = 'Tags'
    TagID = db.Column(db.Integer, primary_key=True)
    TagName = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'TagID': self.TagID,
            'TagName': self.TagName
        }

class UnitConversion(db.Model):
    __tablename__ = 'UnitConversions'
    FromUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ToUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ConversionFactor = db.Column(db.Float, nullable=False)

    def to_dict(self):
        return {
            'FromUnitID': self.FromUnitID,
            'ToUnitID': self.ToUnitID,
            'ConversionFactor': self.ConversionFactor
        }

class Unit(db.Model):
    __tablename__ = 'Units'
    UnitID = db.Column(db.Integer, primary_key=True)
    UnitName = db.Column(db.String, nullable=False, unique=True)
    Abbreviation = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'UnitID': self.UnitID,
            'UnitName': self.UnitName,
            'Abbreviation': self.Abbreviation
        }

class User(db.Model, TimestampMixin):
    __tablename__ = 'Users'
    UserID = db.Column(db.Integer, primary_key=True)
    Username = db.Column(db.String, nullable=False, unique=True)
    PasswordHash = db.Column(db.String, nullable=False)
    Email = db.Column(db.String, nullable=False, unique=True)

    def set_password(self, password):
        self.PasswordHash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.PasswordHash, password)

    def to_dict(self):
        return {
            'UserID': self.UserID,
            'Username': self.Username,
            'Email': self.Email,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }


==================== C:\Code\recipe-app\backend\app\utils.py ====================

from flask import request, jsonify
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from .extensions import db
from .models import User
from datetime import datetime

def get_all(model):
    try:
        records = model.query.all()
        return jsonify([record.to_dict() for record in records]), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def get_by_id(model, id):
    try:
        record = model.query.get_or_404(id)
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def create_record(model):
    try:
        data = request.get_json()
        if issubclass(model, TimestampMixin):
            if 'CreatedAt' not in data:
                data['CreatedAt'] = datetime.utcnow()
            if 'UpdatedAt' not in data:
                data['UpdatedAt'] = datetime.utcnow()

        if model == User:
            password = data.pop('Password')
            user = model(**data)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            return jsonify(user.to_dict()), 201
        else:
            record = model(**data)
            db.session.add(record)
            db.session.commit()
            return jsonify(record.to_dict()), 201
    except IntegrityError as e:
        db.session.rollback()
        return jsonify({'error': 'A record with that unique value already exists.'}), 400
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def update_record(model, id):
    try:
        data = request.get_json()
        record = model.query.get_or_404(id)
        for key, value in data.items():
            setattr(record, key, value)
        if issubclass(model, TimestampMixin):
            record.UpdatedAt = datetime.utcnow()
        db.session.commit()
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def delete_record(model, id):
    try:
        record = model.query.get_or_404(id)
        db.session.delete(record)
        db.session.commit()
        return '', 204
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500


==================== C:\Code\recipe-app\backend\app\__init__.py ====================

from flask import Flask
from .extensions import db
from .models import IngredientCategory, Ingredient, IngredientSubCategory, MealPlanRecipe, MealPlan, RecipeAuthor, RecipeBook, RecipeIngredient, RecipeIngredientSection, RecipeReview, Recipe, RecipeStep, RecipeTag, ShoppingListIngredient, ShoppingList, Tag, UnitConversion, Unit, User
from .generic_crud import create_crud_blueprint
from sqlalchemy import inspect

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../../mydatabase2.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    db.init_app(app)
    
    with app.app_context():
        # Print all tables in the database
        inspector = inspect(db.engine)
        print(inspector.get_table_names())

    # Register blueprints
    app.register_blueprint(create_crud_blueprint(IngredientCategory, '/ingredient_categories'))
    app.register_blueprint(create_crud_blueprint(Ingredient, '/ingredients'))
    app.register_blueprint(create_crud_blueprint(IngredientSubCategory, '/ingredient_subcategories'))
    app.register_blueprint(create_crud_blueprint(MealPlanRecipe, '/meal_plan_recipes'))
    app.register_blueprint(create_crud_blueprint(MealPlan, '/meal_plans'))
    app.register_blueprint(create_crud_blueprint(RecipeAuthor, '/recipe_authors'))
    app.register_blueprint(create_crud_blueprint(RecipeBook, '/recipe_books'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredient, '/recipe_ingredients'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredientSection, '/recipe_ingredient_sections'))
    app.register_blueprint(create_crud_blueprint(RecipeReview, '/recipe_reviews'))
    app.register_blueprint(create_crud_blueprint(Recipe, '/recipes'))
    app.register_blueprint(create_crud_blueprint(RecipeStep, '/recipe_steps'))
    app.register_blueprint(create_crud_blueprint(RecipeTag, '/recipe_tags'))
    app.register_blueprint(create_crud_blueprint(ShoppingListIngredient, '/shopping_list_ingredients'))
    app.register_blueprint(create_crud_blueprint(ShoppingList, '/shopping_lists'))
    app.register_blueprint(create_crud_blueprint(Tag, '/tags'))
    app.register_blueprint(create_crud_blueprint(UnitConversion, '/unit_conversions'))
    app.register_blueprint(create_crud_blueprint(Unit, '/units'))
    app.register_blueprint(create_crud_blueprint(User, '/users'))

    return app


==================== C:\Code\recipe-app\backend\instance\mydatabase2.db ====================



==================== C:\Code\recipe-app\client.txt ====================



==================== C:\Code\recipe-app\client\.eslintrc.cjs ====================

module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}


==================== C:\Code\recipe-app\client\index.html ====================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


==================== C:\Code\recipe-app\client\postcss.config.js ====================

export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };
  

==================== C:\Code\recipe-app\client\README.md ====================

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh


==================== C:\Code\recipe-app\client\tailwind.config.js ====================

/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [
      require('daisyui'),
    ],
    daisyui: {
      themes: ["light", "dark", "cupcake", "bumblebee", "emerald", "corporate", "synthwave", "retro", "cyberpunk", "valentine", "halloween", "garden", "forest", "aqua", "lofi", "pastel", "fantasy", "wireframe", "black", "luxury", "dracula", "cmyk", "autumn", "business", "acid", "lemonade", "night", "coffee", "winter"],
    },
  }
  

==================== C:\Code\recipe-app\client\vite.config.js ====================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ''),
      },
    },
  },
});


==================== C:\Code\recipe-app\client\public\vite.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

==================== C:\Code\recipe-app\client\src\App.css ====================



==================== C:\Code\recipe-app\client\src\App.jsx ====================

import React from 'react';
import AppRoutes from './routes';
import NavBar from './components/NavBar';
import { useAuth } from './context/AuthContext';
import SideBar from './components/SideBar';

function App() {
  const { isAuthenticated } = useAuth();

  return (
    <div className="flex flex-col min-h-screen">
      <NavBar />
      <div className="flex grow">
        {isAuthenticated && <SideBar />}
        <AppRoutes />
      </div>
    </div>
  );
}

export default App;


==================== C:\Code\recipe-app\client\src\index.css ====================

@tailwind base;
@tailwind components;
@tailwind utilities;


==================== C:\Code\recipe-app\client\src\main.jsx ====================

import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';
import { AuthProvider } from './context/AuthContext';
import { DataProvider } from './context/DataContext';

const rootElement = document.getElementById('root');
const root = createRoot(rootElement);

root.render(
  <BrowserRouter>
    <AuthProvider>
      <DataProvider>
        <App />
      </DataProvider>
    </AuthProvider>
  </BrowserRouter>
);


==================== C:\Code\recipe-app\client\src\routes.jsx ====================

// src/routes.jsx

import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import Register from './pages/Register';
import ManageCategories from './pages/ManageCategories';
import ManageSubCategories from './pages/ManageSubCategories';
import ManageIngredients from './pages/ManageIngredients';
import ManageRecipes from './pages/ManageRecipes';
import ManageAuthors from './pages/ManageAuthors';
import ManageRecipeBooks from './pages/ManageRecipeBooks';
import ManageMealPlans from './pages/ManageMealPlans';
import PrivateRoute from './components/PrivateRoute';
import MealPlanDetails from './pages/MealPlanDetails';

import Home from './pages/Home';

function AppRoutes() {
  return (
    <Routes>
      <Route path="login" element={<Login />} />
      <Route path="register" element={<Register />} />
      <Route path="/" element={<PrivateRoute><Home /></PrivateRoute>} />
      <Route path="/meal-plan/:mealPlanId" element={<PrivateRoute><MealPlanDetails /></PrivateRoute>} />
      <Route path="admin">
        <Route index element={<PrivateRoute><Dashboard /></PrivateRoute>} />
        <Route path="manage-categories" element={<PrivateRoute><ManageCategories /></PrivateRoute>} />
        <Route path="manage-sub-categories" element={<PrivateRoute><ManageSubCategories /></PrivateRoute>} />
        <Route path="manage-ingredients" element={<PrivateRoute><ManageIngredients /></PrivateRoute>} />
        <Route path="manage-recipes" element={<PrivateRoute><ManageRecipes /></PrivateRoute>} />
        <Route path="manage-authors" element={<PrivateRoute><ManageAuthors /></PrivateRoute>} />
        <Route path="manage-recipe-books" element={<PrivateRoute><ManageRecipeBooks /></PrivateRoute>} />
        <Route path="manage-meal-plans" element={<PrivateRoute><ManageMealPlans /></PrivateRoute>} />
      </Route>

    </Routes>
  );
}

export default AppRoutes;


==================== C:\Code\recipe-app\client\src\supabaseClient.js ====================

// src/supabaseClient.js

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://fovbbeeexjqmcivjaujs.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZvdmJiZWVleGpxbWNpdmphdWpzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTk1Nzg2NjksImV4cCI6MjAzNTE1NDY2OX0.F3M2b5cR9gKJo5muAZ45bgs8LKkf8znkMlixf7wN_88';

export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);


==================== C:\Code\recipe-app\client\src\assets\react.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

==================== C:\Code\recipe-app\client\src\components\AddAuthorModal.jsx ====================

// src/components/AddAuthorModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';

function AddAuthorModal() {
  const [authorName, setAuthorName] = useState('');
  const [authorImageURL, setAuthorImageURL] = useState('');
  const { createAuthor } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createAuthor(authorName, authorImageURL);
      document.getElementById('add_author_modal').close();
    } catch (error) {
      alert('Failed to add author');
    }
  };

  return (
    <Modal id="add_author_modal" title="Add Author">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Author Name"
          value={authorName}
          onChange={(e) => setAuthorName(e.target.value)}
          required
        />
        <TextInput
          label="Author Image URL"
          value={authorImageURL}
          onChange={(e) => setAuthorImageURL(e.target.value)}
        />
        <Button>Add Author</Button>
      </form>
    </Modal>
  );
}

export default AddAuthorModal;


==================== C:\Code\recipe-app\client\src\components\AddCategoryModal.jsx ====================

// src/components/AddCategoryModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Button from './ui/Button';

function AddCategoryModal() {
  const [categoryName, setCategoryName] = useState('');
  const { createCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createCategory(categoryName);
      document.getElementById('add_category_modal').close();
    } catch (error) {
      alert('Failed to add category');
    }
  };

  return (
    <Modal id="add_category_modal" title="Add Category">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Category Name"
          value={categoryName}
          onChange={(e) => setCategoryName(e.target.value)}
          required
        />
        <Button>Add Category</Button>
      </form>
    </Modal>
  );
}

export default AddCategoryModal;


==================== C:\Code\recipe-app\client\src\components\AddIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Select from './ui/Select';
import Button from './ui/Button';

function AddIngredientModal({ onIngredientAdded = () => {} }) {
  const [ingredientName, setIngredientName] = useState('');
  const [purchaseWeightVolume, setPurchaseWeightVolume] = useState('');
  const [purchaseUnitId, setPurchaseUnitId] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const [subCategoryId, setSubCategoryId] = useState('');
  const [purchaseWeightUnitId, setPurchaseWeightUnitId] = useState('');

  const { categories, subCategories, units, createIngredient } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const ingredient = {
      IngredientName: ingredientName,
      PurchaseWeightVolume: purchaseWeightVolume,
      PurchaseUnitID: purchaseUnitId,
      SubCategoryID: subCategoryId,
      PurchaseWeightUnitID: purchaseWeightUnitId,
    };

    try {
      const newIngredient = await createIngredient(ingredient);
      onIngredientAdded(newIngredient);
      document.getElementById('add_ingredient_modal').close();
    } catch (error) {
      alert('Failed to add ingredient');
    }
  };

  const filteredSubCategories = subCategories.filter(
    (subCategory) => subCategory.CategoryID === parseInt(categoryId)
  );

  const unitOptions = units.map((unit) => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  const subCategoryOptions = filteredSubCategories.map((subCategory) => ({
    value: subCategory.SubCategoryID,
    label: subCategory.SubCategoryName,
  }));

  return (
    <Modal id="add_ingredient_modal" title="Add Ingredient" className="modal modal-bottom sm:modal-middle">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Ingredient Name"
          value={ingredientName}
          onChange={(e) => setIngredientName(e.target.value)}
          required
        />
        <TextInput
          label="Purchase Weight Volume"
          value={purchaseWeightVolume}
          onChange={(e) => setPurchaseWeightVolume(e.target.value)}
          required
        />
        <Select
          label="Purchase Unit"
          value={purchaseUnitId}
          onChange={(e) => setPurchaseUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Select
          label="Sub-Category"
          value={subCategoryId}
          onChange={(e) => setSubCategoryId(e.target.value)}
          required
          options={subCategoryOptions}
          defaultOption="Select a sub-category"
          disabled={!categoryId} // Disable until a category is selected
        />
        <Select
          label="Purchase Weight Unit"
          value={purchaseWeightUnitId}
          onChange={(e) => setPurchaseWeightUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Button>Add Ingredient</Button>
      </form>
    </Modal>
  );
}

export default AddIngredientModal;


==================== C:\Code\recipe-app\client\src\components\AddMealPlanModal.jsx ====================

// src/components/AddMealPlanModal.jsx

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';

function AddMealPlanModal() {
  const [planName, setPlanName] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const { createMealPlan } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const mealPlan = {
      PlanName: planName,
      StartDate: startDate,
      EndDate: endDate,
      UserID: 1, // Adjust as needed
    };

    try {
      await createMealPlan(mealPlan);
      document.getElementById('add_meal_plan_modal').close();
    } catch (error) {
      alert('Failed to add meal plan');
    }
  };

  return (
    <Modal id="add_meal_plan_modal" title="Add Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Plan Name"
          value={planName}
          onChange={(e) => setPlanName(e.target.value)}
          required
        />
        <TextInput
          label="Start Date"
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          required
        />
        <TextInput
          label="End Date"
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          required
        />
        <Button>Add Meal Plan</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanModal;


==================== C:\Code\recipe-app\client\src\components\AddMealPlanRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import Select from './ui/Select';
import { format, isValid } from 'date-fns';
import TextInput from './ui/TextInput';

function AddMealPlanRecipeModal({ mealPlanId, defaultDate, defaultMealType, defaultRecipeId, mealPlanRecipeId }) {

  const [recipeId, setRecipeId] = useState('');
  const [date, setDate] = useState(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
  const [mealType, setMealType] = useState(defaultMealType || '');
  const [currentMealPlanRecipeId, setCurrentMealPlanRecipeId] = useState(mealPlanRecipeId);

  const { recipes, createMealPlanRecipe, updateMealPlanRecipe } = useData();

  useEffect(() => {
    setDate(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
    setMealType(defaultMealType || '');
    setRecipeId(defaultRecipeId || '');
    setCurrentMealPlanRecipeId(mealPlanRecipeId || '');
  }, [defaultDate, defaultMealType, defaultRecipeId, mealPlanRecipeId]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!mealPlanId || !recipeId || !mealType || !date) {
      alert('All fields are required.');
      return;
    }

    const mealPlanRecipe = {
      MealPlanID: mealPlanId,
      RecipeID: recipeId,
      MealType: mealType,
      Date: date,
    };

    console.log("Submitting mealPlanRecipeId:", currentMealPlanRecipeId);

    try {
      if (currentMealPlanRecipeId) {
        // Update the existing meal plan recipe
        await updateMealPlanRecipe(currentMealPlanRecipeId, mealPlanRecipe);
      } else {
        // Create a new meal plan recipe
        await createMealPlanRecipe(mealPlanRecipe);
      }
      document.getElementById('add_meal_plan_recipe_modal').close();
      setRecipeId('');
      setMealType('');
      setDate('');
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add/update meal plan recipe');
    }
  };

  const recipeOptions = recipes.map(recipe => ({
    value: recipe.RecipeID,
    label: recipe.RecipeName,
  }));

  return (
    <Modal id="add_meal_plan_recipe_modal" title="Add/Update Meal in Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <Select
          label="Recipe"
          value={recipeId}
          onChange={(e) => setRecipeId(e.target.value)}
          required
          options={recipeOptions}
          defaultOption="Select a recipe"
        />
        <TextInput
          label="Date"
          type="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          required
        />
        <Select
          label="Meal Type"
          value={mealType}
          onChange={(e) => setMealType(e.target.value)}
          required
          options={[
            { value: 'Breakfast', label: 'Breakfast' },
            { value: 'Lunch', label: 'Lunch' },
            { value: 'Dinner', label: 'Dinner' }
          ]}
          defaultOption="Select a meal type"
        />
        <Button type="submit">{currentMealPlanRecipeId ? 'Update Meal' : 'Add Meal'}</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanRecipeModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeBookModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeBookModal() {
  const [bookName, setBookName] = useState('');
  const [authorID, setAuthorID] = useState('');
  const [coverArtURL, setCoverArtURL] = useState('');

  const { authors, createRecipeBook } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const recipeBook = {
      AuthorID: authorID,
      BookName: bookName,
      CoverArtURL: coverArtURL
    };

    try {
      await createRecipeBook(recipeBook);
      document.getElementById('add_recipe_book_modal').close();
    } catch (error) {
      alert('Failed to add book');
    }
  };

  const authorOptions = authors.map(author => ({
    value: author.AuthorID,
    label: author.AuthorName,
  }));

  return (
    <Modal id="add_recipe_book_modal" title="Add Recipe Book">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Book Name"
          value={bookName}
          onChange={(e) => setBookName(e.target.value)}
          required
        />
        <Select
          label="Author"
          value={authorID}
          onChange={(e) => setAuthorID(e.target.value)}
          required
          options={authorOptions}
          defaultOption="Select an author"
        />
        <TextInput
          label="Cover Art URL"
          value={coverArtURL}
          onChange={(e) => setCoverArtURL(e.target.value)}
        />
        <Button>Add Book</Button>
      </form>
    </Modal>
  );
}

export default AddRecipeBookModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import Fuse from 'fuse.js';
import { useData } from '../context/DataContext';
import AddIngredientModal from './AddIngredientModal';
import Table from './ui/Table';
import Button from './ui/Button';
import Modal from './ui/Modal';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeIngredientModal({ recipeId }) {
  const [selectedIngredientId, setSelectedIngredientId] = useState('');
  const [quantity, setQuantity] = useState('');
  const [selectedUnitId, setSelectedUnitId] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredIngredients, setFilteredIngredients] = useState([]);
  const [defaultUnitId, setDefaultUnitId] = useState('');

  const { ingredients, units, categories, subCategories, createRecipeIngredient } = useData();

  useEffect(() => {
    if (ingredients.length && categories.length && subCategories.length) {
      const updatedIngredients = ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      });
      setFilteredIngredients(updatedIngredients);
    }
  }, [ingredients, categories, subCategories]);

  const handleSearch = (e) => {
    const term = e.target.value;
    setSearchTerm(term);

    if (term === '') {
      setFilteredIngredients(ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      }));
    } else {
      const fuse = new Fuse(filteredIngredients, {
        keys: ['IngredientName', 'CategoryName', 'SubCategoryName'],
        threshold: 0.3, // Adjust the threshold as needed
      });

      const result = fuse.search(term);
      setFilteredIngredients(result.map((r) => r.item));
    }
  };

  const handleAddClick = (ingredientId) => {
    const ingredient = ingredients.find((ing) => ing.IngredientID === ingredientId);
    if (ingredient) {
      setSelectedIngredientId(ingredientId);
      setDefaultUnitId(ingredient.PurchaseUnitID || ''); // Handle missing PurchaseUnitID
      setSelectedUnitId(ingredient.PurchaseUnitID || ''); // Set the default unit id
      document.getElementById('quantity_unit_modal').showModal();
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = {
      RecipeID: recipeId,
      IngredientID: selectedIngredientId,
      Quantity: parseFloat(quantity),
      UnitID: selectedUnitId || defaultUnitId,
    };

    try {
      await createRecipeIngredient(data);
      window.location.reload(); // Refresh the page to show the new ingredient
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add ingredient');
    }
  };

  const handleAddNewIngredient = () => {
    document.getElementById('add_ingredient_modal').showModal();
  };

  const handleNewIngredientAdded = (newIngredient) => {
    if (newIngredient && newIngredient.PurchaseUnitID) {
      setFilteredIngredients((prevIngredients) => [
        ...prevIngredients,
        {
          ...newIngredient,
          CategoryName: '',
          SubCategoryName: '',
        },
      ]);

      // Automatically select the newly added ingredient and open the quantity/unit modal
      setSelectedIngredientId(newIngredient.IngredientID);
      setDefaultUnitId(newIngredient.PurchaseUnitID);
      setSelectedUnitId(newIngredient.PurchaseUnitID);
      setQuantity(''); // Reset the quantity
      document.getElementById('quantity_unit_modal').showModal();
    } else {
      alert('New ingredient does not have a PurchaseUnitID');
    }
  };

  const headers = ['Ingredient', 'Category', 'Sub-Category', 'Action'];
  const data = filteredIngredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientName,
      ingredient.CategoryName,
      ingredient.SubCategoryName,
      <Button
        size="sm"
        variant="primary"
        outline={true}
        onClick={() => handleAddClick(ingredient.IngredientID)}
      >
        Add
      </Button>
    ],
  }));

  const unitOptions = units.map(unit => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  return (
    <div>
      <Modal id="add_recipe_ingredient_modal" title="Add Ingredient to Recipe" wide={true}>
        <div className='flex flex-col gap-4 mb-8'>
          <TextInput
            label="Search Ingredient"
            value={searchTerm}
            onChange={handleSearch}
            placeholder="Type to search ingredients..."
          />

          <Button
            outline={true}
            size='sm'
            onClick={handleAddNewIngredient}
          >Add New Ingredient</Button>
        </div>
        <Table headers={headers} data={data} />
      </Modal>

      <Modal id="quantity_unit_modal" title="Enter Quantity and Unit">
        <form onSubmit={handleSubmit} className="flex gap-4 flex-col mt-4">
          <TextInput
            label="Quantity"
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
            required
          />

          <Select
            label="Unit"
            value={selectedUnitId || defaultUnitId}
            onChange={(e) => setSelectedUnitId(e.target.value)}
            required
            options={unitOptions}
            defaultOption="Select a unit"
          />
          <Button>Add Ingredient</Button>
        </form>
      </Modal>

      <AddIngredientModal onIngredientAdded={handleNewIngredientAdded} />
    </div>
  );
}

export default AddRecipeIngredientModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeModal() {
    const [recipeName, setRecipeName] = useState('');
    const [authorID, setAuthorID] = useState('');
    const [bookID, setBookID] = useState('');
    const [pageNumber, setPageNumber] = useState('');
    const [onlineURL, setOnlineURL] = useState('');
    const [cookTime, setCookTime] = useState('');
    const [difficulty, setDifficulty] = useState('');
    const [type, setType] = useState('');
    const [imageURL, setImageURL] = useState('');
    const [servings, setServings] = useState('');
    const [cuisine, setCuisine] = useState('');
    const [filteredBooks, setFilteredBooks] = useState([]);

    const { authors, recipeBooks, createRecipe } = useData();

    useEffect(() => {
        if (authorID) {
            setFilteredBooks(recipeBooks.filter(book => book.AuthorID === parseInt(authorID)));
        } else {
            setFilteredBooks([]);
        }
    }, [authorID, recipeBooks]);

    const handleAuthorChange = (e) => {
        setAuthorID(e.target.value);
        setBookID(''); // Reset book selection when author changes
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        const recipe = {
            RecipeName: recipeName,
            AuthorID: parseInt(authorID) || null,
            BookID: parseInt(bookID) || null,
            PageNumber: parseInt(pageNumber) || null,
            OnlineURL: onlineURL,
            CookTime: parseInt(cookTime) || null,
            Difficulty: difficulty,
            Type: type,
            ImageURL: imageURL,
            Servings: parseInt(servings) || null,
            Cuisine: cuisine,
        };

        try {
            await createRecipe(recipe);
            document.getElementById('add_recipe_modal').close();
        } catch (error) {
            alert('Failed to add recipe');
        }
    };

    const authorOptions = authors.map(author => ({
        value: author.AuthorID,
        label: author.AuthorName
    }));

    const bookOptions = filteredBooks.map(book => ({
        value: book.BookID,
        label: book.BookName
    }));

    return (
        <Modal id="add_recipe_modal" title="Add Recipe">
            <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
                <TextInput
                    label="Recipe Name"
                    value={recipeName}
                    onChange={(e) => setRecipeName(e.target.value)}
                    required
                />
                <Select
                    label="Author"
                    value={authorID}
                    onChange={handleAuthorChange}
                    options={authorOptions}
                    defaultOption="Select an author"
                />
                <Select
                    label="Book"
                    value={bookID}
                    onChange={(e) => setBookID(e.target.value)}
                    options={bookOptions}
                    defaultOption="Select a book"
                    disabled={!authorID}
                />
                <TextInput
                    label="Page Number"
                    type="number"
                    value={pageNumber}
                    onChange={(e) => setPageNumber(e.target.value)}
                    disabled={!bookID}
                />
                <TextInput
                    label="Online URL"
                    type="url"
                    value={onlineURL}
                    onChange={(e) => setOnlineURL(e.target.value)}
                />
                <TextInput
                    label="Cook Time (minutes)"
                    type="number"
                    value={cookTime}
                    onChange={(e) => setCookTime(e.target.value)}
                    required
                />
                <TextInput
                    label="Difficulty"
                    value={difficulty}
                    onChange={(e) => setDifficulty(e.target.value)}
                />
                <TextInput
                    label="Type"
                    value={type}
                    onChange={(e) => setType(e.target.value)}
                />
                <TextInput
                    label="Image URL"
                    type="url"
                    value={imageURL}
                    onChange={(e) => setImageURL(e.target.value)}
                />
                <TextInput
                    label="Servings"
                    type="number"
                    value={servings}
                    onChange={(e) => setServings(e.target.value)}
                    required
                />
                <TextInput
                    label="Cuisine"
                    value={cuisine}
                    onChange={(e) => setCuisine(e.target.value)}
                />
                <Button>Add Recipe</Button>
            </form>
        </Modal>
    );
}

export default AddRecipeModal;


==================== C:\Code\recipe-app\client\src\components\AddSubCategoryModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddSubCategoryModal() {
  const [subCategoryName, setSubCategoryName] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const { categories, createSubCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const subCategory = {
      SubCategoryName: subCategoryName,
      CategoryID: categoryId,
    };

    try {
      await createSubCategory(subCategory);
      document.getElementById('add_sub_category_modal').close();
    } catch (error) {
      console.error('Error adding sub-category:', error);
      alert('Failed to add sub-category');
    }
  };

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  return (
    <Modal id="add_sub_category_modal" title="Add Sub-Category">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Sub-Category Name"
          value={subCategoryName}
          onChange={(e) => setSubCategoryName(e.target.value)}
          required
        />        
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Button>Add Sub-Category</Button>
      </form>
    </Modal>
  );
}

export default AddSubCategoryModal;


==================== C:\Code\recipe-app\client\src\components\AuthorTable.jsx ====================

// src/components/AuthorTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import Table from './ui/Table';
import DeleteButton from './ui/DeleteButton';

function AuthorTable() {
  const { authors, deleteAuthor } = useData();

  const handleDelete = async (authorId) => {
    if (window.confirm('Are you sure you want to delete this author?')) {
      await deleteAuthor(authorId);
    }
  };

  const headers = ['#', 'Author Name', 'Actions'];

  const data = authors.map((author, index) => ({
    id: author.AuthorID,
    cells: [
      index + 1,
      author.AuthorName,
      <DeleteButton onClick={() => handleDelete(author.AuthorID)} />      
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default AuthorTable;


==================== C:\Code\recipe-app\client\src\components\Calendar.jsx ====================

// src/components/Calendar.jsx
import React from 'react';
import Button from './ui/Button';
import { format, eachDayOfInterval, parseISO } from 'date-fns';

const Calendar = ({ mealPlan, mealPlanRecipes, recipes, onAddMeal, onModifyMeal }) => {
  const days = eachDayOfInterval({
    start: parseISO(mealPlan.StartDate),
    end: parseISO(mealPlan.EndDate),
  });

  const getMealForDay = (date, mealType) => {
    return mealPlanRecipes.find(
      (mpr) => mpr.Date === format(date, 'yyyy-MM-dd') && mpr.MealType === mealType
    );
  };

  const getRecipeName = (recipeId) => {
    const recipe = recipes.find(r => r.RecipeID === recipeId);
    return recipe ? recipe.RecipeName : 'Unknown Recipe';
  };

  return (
    <div className="grid grid-cols-1 gap-4">
      {days.map((day) => (
        <div key={day} className="border p-2">
          <h3 className="font-bold">{format(day, 'eee, MMM d')}</h3>
          {['Breakfast', 'Lunch', 'Dinner'].map((mealType) => {
            const meal = getMealForDay(day, mealType);
            return (
              <div key={mealType} className="my-2">
                <h4 className="font-semibold">{mealType}</h4>
                {meal ? (
                  <div>
                    <div>{getRecipeName(meal.RecipeID)}</div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="secondary"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID)}
                      >
                        Modify
                      </Button>
                      <Button
                        size="sm"
                        variant="error"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID, true)}
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                ) : (
                  <Button
                    size="sm"
                    variant="secondary"
                    outline
                    onClick={() => onAddMeal(day, mealType)}
                  >
                    Add {mealType}
                  </Button>
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
};

export default Calendar;


==================== C:\Code\recipe-app\client\src\components\CategoryTable.jsx ====================

// src/components/CategoryTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function CategoryTable() {
  const { categories, subCategories, deleteCategory } = useData();

  const handleDelete = async (categoryId) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      await deleteCategory(categoryId);
    }
  };

  const headers = ['ID', 'Category Name', 'Sub-Categories', 'Actions'];

  const data = categories.map((category, index) => {
    const categorySubCategories = subCategories.filter(sub => sub.CategoryID === category.CategoryID).map(sub => sub.SubCategoryName).join(', ');

    return {
      id: category.CategoryID,
      cells: [
        category.CategoryID,
        category.CategoryName,
        categorySubCategories || 'None',
        <DeleteButton onClick={() => handleDelete(category.CategoryID)} />
      ],
    };
  });

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default CategoryTable;


==================== C:\Code\recipe-app\client\src\components\IngredientTable.jsx ====================

// src/components/IngredientTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function IngredientTable() {
  const { ingredients, categories, subCategories, units, deleteIngredient } = useData();

  const handleDelete = async (ingredientId) => {
    if (window.confirm('Are you sure you want to delete this ingredient?')) {
      try {
        await deleteIngredient(ingredientId);
      } catch (error) {
        alert('Failed to delete ingredient');
      }
    }
  };

  const getSubCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    return subCategory ? subCategory.SubCategoryName : 'Unknown';
  };

  const getCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    if (subCategory) {
      const category = categories.find(category => category.CategoryID === subCategory.CategoryID);
      return category ? category.CategoryName : 'Unknown';
    }
    return 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const headers = ['ID', 'Ingredient Name', 'Purchase Weight Volume', 'Purchase Unit', 'Category', 'Subcategory', 'Purchase Weight Unit', 'Actions'];

  const data = ingredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientID,
      ingredient.IngredientName,
      ingredient.PurchaseWeightVolume,
      getUnitName(ingredient.PurchaseUnitID),
      getCategoryName(ingredient.SubCategoryID),
      getSubCategoryName(ingredient.SubCategoryID),
      getUnitName(ingredient.PurchaseWeightUnitID),
      <DeleteButton onClick={() => handleDelete(ingredient.IngredientID)} />
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default IngredientTable;


==================== C:\Code\recipe-app\client\src\components\MealPlanRecipeTable.jsx ====================

// src/components/MealPlanRecipeTable.jsx

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanRecipeTable({ mealPlanId }) {
    const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

    const handleDelete = async (mealPlanRecipeId) => {
        if (window.confirm('Are you sure you want to delete this meal?')) {
            try {
                await deleteMealPlanRecipe(mealPlanRecipeId);
            } catch (error) {
                alert('Failed to delete meal');
            }
        }
    };

    const getRecipeName = (recipeId) => {
        const recipe = recipes.find(recipe => recipe.RecipeID === recipeId);
        return recipe ? recipe.RecipeName : 'Unknown';
    };

    const headers = ['ID', 'Recipe', 'Meal Type', 'Date', 'Actions'];

    const data = mealPlanRecipes
        .filter(mpr => mpr.MealPlanID === mealPlanId)
        .map((mealPlanRecipe) => ({
            id: mealPlanRecipe.MealPlanRecipeID,
            cells: [
                mealPlanRecipe.MealPlanRecipeID,
                getRecipeName(mealPlanRecipe.RecipeID),
                mealPlanRecipe.MealType,
                mealPlanRecipe.Date,
                <DeleteButton onClick={() => handleDelete(mealPlanRecipe.MealPlanRecipeID)} />,
            ],
        }));

    function handleAddClick() {
        document.getElementById('add_meal_plan_recipe_modal').showModal();
    }

    return (
        <div className="overflow-x-auto">
            <Button size='sm' outline={true} variant='secondary' onClick={handleAddClick}>Add meal</Button>
            <Table headers={headers} data={data} />
        </div>
    );
}

export default MealPlanRecipeTable;


==================== C:\Code\recipe-app\client\src\components\MealPlanTable.jsx ====================

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanTable({ onManageMeals }) {
  const { mealPlans, deleteMealPlan } = useData();

  const handleDelete = async (mealPlanId) => {
    if (window.confirm('Are you sure you want to delete this meal plan?')) {
      try {
        await deleteMealPlan(mealPlanId);
      } catch (error) {
        alert('Failed to delete meal plan');
      }
    }
  };

  const headers = ['ID', 'Plan Name', 'Start Date', 'End Date', 'Actions'];

  const data = mealPlans.map((mealPlan) => ({
    id: mealPlan.MealPlanID,
    cells: [
      mealPlan.MealPlanID,
      mealPlan.PlanName,
      mealPlan.StartDate,
      mealPlan.EndDate,
      <div className="flex gap-2">
        <Button
          size="sm"
          variant="primary"
          outline={true}
          onClick={() => onManageMeals(mealPlan)}
        >
          Manage Meals
        </Button>
        <DeleteButton onClick={() => handleDelete(mealPlan.MealPlanID)} />
      </div>
    ],
  }));

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default MealPlanTable;


==================== C:\Code\recipe-app\client\src\components\NavBar.jsx ====================

// src/components/NavBar.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ThemeSwitcher from './ThemeSwitcher';
import { useAuth } from '../context/AuthContext';

const NavBar = () => {
  const { isAuthenticated, logout } = useAuth();

  return (
    <nav className="navbar justify-between bg-base-300">
      <a className="btn btn-ghost text-lg">
        <img alt="Logo" src="../vite.svg" className="w-4" />
        Recipe App
      </a>
      <div className="dropdown dropdown-end sm:hidden">
        <button className="btn btn-ghost">
          <i className="fa-solid fa-bars text-lg"></i>
        </button>

        <ul tabIndex="0" className="dropdown-content menu z-[1] bg-base-200 p-6 rounded-box shadow w-56 gap-2">
          <li><a>About</a></li>
          <li><a>Pricing</a></li>
          <li><a>Blog</a></li>
          <li><a>Contact</a></li>
          <a className="btn btn-sm btn-primary">Log in</a>
        </ul>
      </div>
      <div className="hidden sm:flex gap-2">
        <ThemeSwitcher />       
        {isAuthenticated ? (
          <button
            onClick={logout}
            className="btn btn-primary btn-sm"
          >
            Logout
          </button>
        ) : (
          <>
            <Link to="/register" className="btn btn-ghost btn-sm">Register</Link>
            <Link to="/login" className="btn btn-primary btn-sm">Login</Link>
          </>
        )}
      </div>
    </nav>
  );
};

export default NavBar;


==================== C:\Code\recipe-app\client\src\components\PrivateRoute.jsx ====================

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import SideBar from './SideBar';

const PrivateRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  return (
    <div className="flex grow">     
      <div className="flex flex-col px-8 py-6 grow">
        {children}
      </div>
    </div>
  );
};

export default PrivateRoute;


==================== C:\Code\recipe-app\client\src\components\RecipeBookTable.jsx ====================

// src/components/RecipeBookTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';

function RecipeBookTable() {
  const { recipeBooks, authors, deleteRecipeBook } = useData();

  const handleDelete = async (bookId) => {
    if (window.confirm('Are you sure you want to delete this book?')) {
      try {
        await deleteRecipeBook(bookId);
      } catch (error) {
        alert('Failed to delete book');
      }
    }
  };

  const getAuthorName = (authorId) => {
    const author = authors.find(author => author.AuthorID === authorId);
    return author ? author.AuthorName : 'Unknown';
  };

  const headers = ['#', 'Book Name', 'Author Name', 'Actions'];

  const data = useMemo(() => 
    recipeBooks.map((book, index) => ({
      id: book.BookID,
      cells: [
        index + 1,
        book.BookName,
        getAuthorName(book.AuthorID),
        <DeleteButton onClick={() => handleDelete(book.BookID)} />,
      ],
    })),
    [recipeBooks, authors]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeBookTable;


==================== C:\Code\recipe-app\client\src\components\RecipeTable.jsx ====================

// src/components/RecipeTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function RecipeTable({ onAddIngredients }) {
  const { recipes, ingredients, units, recipeIngredients, deleteRecipe } = useData();

  const handleDelete = async (recipeId) => {
    if (window.confirm('Are you sure you want to delete this recipe?')) {
      try {
        await deleteRecipe(recipeId);
      } catch (error) {
        alert('Failed to delete recipe');
      }
    }
  };

  const getIngredientName = (ingredientId) => {
    const ingredient = ingredients.find(ingredient => ingredient.IngredientID === ingredientId);
    return ingredient ? ingredient.IngredientName : 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const renderIngredients = (recipeId) => {
    const filteredIngredients = recipeIngredients.filter(ri => ri.RecipeID === recipeId);
    return filteredIngredients.map(ingredient => (
      <li key={ingredient.RecipeIngredientID}>
        {ingredient.Quantity} {getUnitName(ingredient.UnitID)} of {getIngredientName(ingredient.IngredientID)}
      </li>
    ));
  };

  const headers = ['#', 'Recipe Name', 'Author ID', 'Ingredients', 'Actions'];

  const data = useMemo(() =>
    recipes.map((recipe, index) => ({
      id: recipe.RecipeID,
      cells: [
        index + 1,
        recipe.RecipeName,
        recipe.AuthorID,
        <ul className='list-disc ml-4'>
          {renderIngredients(recipe.RecipeID)}
        </ul>,
        <div className='flex gap-2'>
          <Button
            size="sm"
            variant="primary"
            outline={true}
            onClick={() => onAddIngredients(recipe.RecipeID)}
          >
            Add Ingredients
          </Button>
          <DeleteButton onClick={() => handleDelete(recipe.RecipeID)} />
        </div>
      ],
    })),
    [recipes, recipeIngredients, ingredients, units]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeTable;


==================== C:\Code\recipe-app\client\src\components\ShoppingList.jsx ====================

// src/components/ShoppingList.jsx

import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';

function ShoppingList({ mealPlanId }) {
    const { getShoppingList } = useData();
    const shoppingList = getShoppingList(mealPlanId);

    const headers = ['Ingredient Name', 'Quantity', 'Unit'];

    const data = shoppingList.map((ingredient) => ({
        id: ingredient.IngredientID,
        cells: [
            ingredient.IngredientName,
            ingredient.Quantity,
            ingredient.unit ? ingredient.unit.UnitName : 'Unknown'
        ],
    }));

    return (
        <div className="overflow-x-auto">
            <Table headers={headers} data={data} />
        </div>
    );
}

export default ShoppingList;


==================== C:\Code\recipe-app\client\src\components\ShoppingListModal.jsx ====================

// src/components/ShoppingListModal.jsx

import React from 'react';
import Modal from './ui/Modal';

function ShoppingListModal({ shoppingList }) {
    return (
        <Modal id="shopping_list_modal" title="Generated Shopping List">
            {shoppingList ? (
                <ul className="list-disc ml-4">
                    {shoppingList.map((item, index) => (
                        <li key={index}>{item.Quantity} {item.UnitName} of {item.IngredientName}</li>
                    ))}
                </ul>
            ) : (
                <p>No items in the shopping list.</p>
            )}
        </Modal>
    );
}

export default ShoppingListModal;


==================== C:\Code\recipe-app\client\src\components\SideBar.jsx ====================

// src/components/SideBar.jsx

import React from "react";
import { NavLink } from "react-router-dom";
import { FaTachometerAlt, FaList, FaSitemap, FaLeaf, FaBook, FaUser, FaUtensils, FaCalendarAlt } from "react-icons/fa";

const menuItems = [
  { title: "Ingredients", isTitle: true },
  { title: "Categories", link: "/admin/manage-categories", Icon: FaList },
  { title: "Sub-categories", link: "/admin/manage-sub-categories", Icon: FaSitemap },
  { title: "Ingredients", link: "/admin/manage-ingredients", Icon: FaLeaf },
  { title: "Recipes", isTitle: true },
  { title: "Recipes", link: "/admin/manage-recipes", Icon: FaUtensils },
  { title: "Authors", link: "/admin/manage-authors", Icon: FaUser },
  { title: "Recipe books", link: "/admin/manage-recipe-books", Icon: FaBook },
  { title: "Meal Plans", link: "/admin/manage-meal-plans", Icon: FaCalendarAlt },
];

const MenuItem = ({ item }) => {
  if (item.isTitle) {
    return <li className="menu-title">{item.title}</li>;
  }

  const { Icon } = item;

  return (
    <li>
      <NavLink to={item.link} className={({ isActive }) => (isActive ? "active" : "")}>
        <Icon className="inline mr-2" />
        {item.title}
      </NavLink>
    </li>
  );
};

export default function SideBar() {
  return (
    <aside className="sticky top-0 overflow-y-auto w-60 bg-base-200 p-4 min-w-60">
      <ul className="menu px-0 gap-1">
        {menuItems.map((item, index) => (
          <MenuItem key={index} item={item} />
        ))}
      </ul>
    </aside>
  );
}


==================== C:\Code\recipe-app\client\src\components\SubCategoryTable.jsx ====================

// src/components/SubCategoryTable.jsx
import React, { useState, useMemo } from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function SubCategoryTable() {
  const [selectedCategories, setSelectedCategories] = useState([]);
  const { categories, subCategories, deleteSubCategory } = useData();

  const handleDelete = async (subCategoryId) => {
    if (window.confirm('Are you sure you want to delete this sub-category?')) {
      try {
        await deleteSubCategory(subCategoryId);
      } catch (error) {
        alert('Failed to delete sub-category');
      }
    }
  };

  const getCategoryName = (categoryId) => {
    const category = categories.find(category => category.CategoryID === categoryId);
    return category ? category.CategoryName : 'Unknown';
  };

  const handleCategoryChange = (e) => {
    const selectedValue = parseInt(e.target.value);
    setSelectedCategories(prevSelected =>
      prevSelected.includes(selectedValue)
        ? prevSelected.filter(id => id !== selectedValue)
        : [...prevSelected, selectedValue]
    );
  };

  const filteredSubCategories = useMemo(() => 
    selectedCategories.length > 0
      ? subCategories.filter(subCategory => selectedCategories.includes(subCategory.CategoryID))
      : subCategories,
    [subCategories, selectedCategories]
  );

  const headers = ['#', 'Sub-Category Name', 'Category Name', 'Actions'];

  const data = useMemo(() =>
    filteredSubCategories.map((subCategory, index) => ({
      id: subCategory.SubCategoryID,
      cells: [
        index + 1,
        subCategory.SubCategoryName,
        getCategoryName(subCategory.CategoryID),
        <DeleteButton key={subCategory.SubCategoryID} onClick={() => handleDelete(subCategory.SubCategoryID)} />
      ],
    })),
    [filteredSubCategories, categories]
  );

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center mb-4">
        <label className="mr-2">Filter by Category:</label>
        <select
          className="select select-bordered"
          value=""
          onChange={handleCategoryChange}
        >
          <option value="" disabled>Select Categories</option>
          {categories.map(category => (
            <option
              key={category.CategoryID}
              value={category.CategoryID}
              disabled={selectedCategories.includes(category.CategoryID)}
            >
              {category.CategoryName}
            </option>
          ))}
        </select>
      </div>
      <div className="mb-4">
        {selectedCategories.map(categoryId => (
          <div key={categoryId} className="badge badge-primary mr-2">
            {getCategoryName(categoryId)}
            <button
              type="button"
              className="ml-1"
              onClick={() => setSelectedCategories(selectedCategories.filter(id => id !== categoryId))}
            >
              ✕
            </button>
          </div>
        ))}
      </div>
      <Table headers={headers} data={data} />
    </div>
  );
}

export default SubCategoryTable;


==================== C:\Code\recipe-app\client\src\components\ThemeSwitcher.jsx ====================

import React, { useEffect, useState } from 'react';

const ThemeSwitcher = () => {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
      setTheme(savedTheme);
    }
  }, []);

  const handleThemeChange = (event) => {
    const selectedTheme = event.target.value;
    document.documentElement.setAttribute('data-theme', selectedTheme);
    localStorage.setItem('theme', selectedTheme);
    setTheme(selectedTheme);
  };

  return (   
    <div className="dropdown dropdown-end">
      <select className="btn btn-ghost btn-sm" value={theme} onChange={handleThemeChange}>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
        <option value="cupcake">Cupcake</option>
        <option value="bumblebee">Bumblebee</option>
        <option value="emerald">Emerald</option>
        <option value="corporate">Corporate</option>
        <option value="synthwave">Synthwave</option>
        <option value="retro">Retro</option>
        <option value="cyberpunk">Cyberpunk</option>
        <option value="valentine">Valentine</option>
        <option value="halloween">Halloween</option>
        <option value="garden">Garden</option>
        <option value="forest">Forest</option>
        <option value="aqua">Aqua</option>
        <option value="lofi">Lofi</option>
        <option value="pastel">Pastel</option>
        <option value="fantasy">Fantasy</option>
        <option value="wireframe">Wireframe</option>
        <option value="black">Black</option>
        <option value="luxury">Luxury</option>
        <option value="dracula">Dracula</option>
        <option value="cmyk">CMYK</option>
        <option value="autumn">Autumn</option>
        <option value="business">Business</option>
        <option value="acid">Acid</option>
        <option value="lemonade">Lemonade</option>
        <option value="night">Night</option>
        <option value="coffee">Coffee</option>
        <option value="winter">Winter</option>
      </select>
    </div>
  );
};

export default ThemeSwitcher;


==================== C:\Code\recipe-app\client\src\components\ui\Button.jsx ====================

// src/components/ui/Button.jsx
import React from 'react';

const Button = ({ type, variant = 'primary', size = 'md', outline = false, block = false, circle = false, square = false, className = '', onClick, children }) => {
  const baseClass = 'btn';
  const variantClass = `btn-${variant}`;
  const sizeClass = `btn-${size}`;
  const outlineClass = outline ? 'btn-outline' : '';
  const blockClass = block ? 'btn-block' : '';
  const circleClass = circle ? 'btn-circle' : '';
  const squareClass = square ? 'btn-square' : '';

  const classes = `${baseClass} ${variantClass} ${sizeClass} ${outlineClass} ${blockClass} ${circleClass} ${squareClass} ${className}`;

  return (
    <button type={type} className={classes} onClick={onClick}>
      {children}
    </button>
  );
};

export default Button;


==================== C:\Code\recipe-app\client\src\components\ui\Card.jsx ====================

// src/components/ui/Card.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import Button from './Button';

const Card = ({ title, count, link, children }) => {
    return (
        <div className="card bg-base-100 w-96 shadow-xl">
            <div className="card-body">
                <h2 className="card-title">{title}</h2>
                {count && <p className="text-2xl font-bold">{count}</p>}
                {children}
                <div className="card-actions justify-end">
                    <Link to={link}>
                        <Button
                            variant='secondary'
                            outline={true}
                        >
                            Manage
                        </Button>
                    </Link>
                </div>
            </div>
        </div>
    );
};

export default Card;


==================== C:\Code\recipe-app\client\src\components\ui\DeleteButton.jsx ====================

// src/components/ui/DeleteButton.jsx
import React from 'react';
import Button from './Button';

const DeleteButton = ({ onClick }) => (
  <Button
    size="sm"
    variant="error"
    outline={true}
    onClick={onClick}
  >
    Delete
  </Button>
);

export default DeleteButton;


==================== C:\Code\recipe-app\client\src\components\ui\Modal.jsx ====================

import React from 'react';

const Modal = ({ id, title, children, wide }) => {
    const modalBoxClass = wide ? 'modal-box w-11/12 max-w-5xl' : 'modal-box';
    const modalClass = wide ? 'modal' : 'modal modal-bottom sm:modal-middle';

    return (
        <dialog id={id} className={modalClass}>
            <div className={modalBoxClass}>
                <form method="dialog">
                    <button className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <h3 className="font-bold text-lg">{title}</h3>
                {children}
            </div>
        </dialog>
    );
};

export default Modal;


==================== C:\Code\recipe-app\client\src\components\ui\Select.jsx ====================

// src/components/ui/Select.jsx
import React from 'react';

const Select = ({ label, value, onChange, required, options, defaultOption, disabled }) => {
  return (
    <label className="form-control">
      <div className="label">
        <span className="label-text">{label}</span>
      </div>
      <select
        className="select select-bordered"
        value={value}
        onChange={onChange}
        required={required}
        disabled={disabled}
      >
        <option value="" disabled>{defaultOption}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value} disabled={option.disabled}>
            {option.label}
          </option>
        ))}
      </select>
    </label>
  );
};

export default Select;


==================== C:\Code\recipe-app\client\src\components\ui\Table.jsx ====================

// src/components/ui/Table.jsx
import React, { useState } from 'react';
import { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';

const Table = ({ headers, data }) => {
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'ascending' });

  const sortedData = React.useMemo(() => {
    let sortableData = [...data];
    if (sortConfig.key) {
      sortableData.sort((a, b) => {
        const aKey = a.cells[headers.indexOf(sortConfig.key)];
        const bKey = b.cells[headers.indexOf(sortConfig.key)];

        if (aKey < bKey) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aKey > bKey) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableData;
  }, [data, sortConfig, headers]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (header) => {
    if (sortConfig.key === header) {
      return sortConfig.direction === 'ascending' ? <FaSortUp /> : <FaSortDown />;
    }
    return <FaSort />;
  };

  return (
    <div className="overflow-x-auto">
      <table className="table table-zebra">
        <thead>
          <tr>
            {headers.map((header, index) => (
              <th key={index} onClick={() => requestSort(header)} className="cursor-pointer">
                <div className="flex items-center">
                  {header}
                  <span className="ml-2">{getSortIcon(header)}</span>
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row, rowIndex) => (
            <tr key={row.id || rowIndex}>
              {row.cells.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Table;


==================== C:\Code\recipe-app\client\src\components\ui\TextInput.jsx ====================

import React from 'react';

const TextInput = ({ label, type = 'text', value, onChange, required = false, placeholder = '', className = 'input input-bordered', min, max }) => {
  return (
    <label className="form-control">
      {label && (
        <div className="label">
          <span className="label-text">{label}</span>
        </div>
      )}
      <input
        type={type}
        className={className}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
        min={min}
        max={max}
      />
    </label>
  );
};

export default TextInput;


==================== C:\Code\recipe-app\client\src\context\AuthContext.jsx ====================

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const storedAuth = localStorage.getItem('isAuthenticated');
    if (storedAuth === 'true') {
      setIsAuthenticated(true);
    }
    setLoading(false); // Indicate that the auth status has been checked
  }, []);

  const login = async (username, password) => {
    const response = await fetch('http://localhost:8000/api/users/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Password: password }),
    });

    if (response.ok) {
      setIsAuthenticated(true);
      localStorage.setItem('isAuthenticated', 'true');
      navigate('/');
    } else {
      alert('Login failed');
    }
  };

  const logout = () => {
    setIsAuthenticated(false);
    localStorage.removeItem('isAuthenticated');
    navigate('/login');
  };

  if (loading) {
    return <div>Loading...</div>; // Display a loading message or spinner while checking auth status
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


==================== C:\Code\recipe-app\client\src\context\DataContext.jsx ====================

import React, { createContext, useContext, useEffect, useState } from 'react';
import * as apiService from '../services/apiService';

const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [authors, setAuthors] = useState([]);
  const [recipeBooks, setRecipeBooks] = useState([]);
  const [recipes, setRecipes] = useState([]);
  const [units, setUnits] = useState([]);
  const [recipeIngredients, setRecipeIngredients] = useState([]);
  const [mealPlans, setMealPlans] = useState([]);
  const [mealPlanRecipes, setMealPlanRecipes] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [
          categoriesData,
          subCategoriesData,
          ingredientsData,
          authorsData,
          recipeBooksData,
          recipesData,
          unitsData,
          recipeIngredientsData,
          mealPlansData,
          mealPlanRecipesData,
        ] = await Promise.all([
          apiService.getCategories(),
          apiService.getSubCategories(),
          apiService.getIngredients(),
          apiService.getAuthors(),
          apiService.getRecipeBooks(),
          apiService.getRecipes(),
          apiService.getUnits(),
          apiService.getRecipeIngredients(),
          apiService.getMealPlans(),
          apiService.getMealPlanRecipes(),
        ]);

        setCategories(categoriesData);
        setSubCategories(subCategoriesData);
        setIngredients(ingredientsData);
        setAuthors(authorsData);
        setRecipeBooks(recipeBooksData);
        setRecipes(recipesData);
        setUnits(unitsData);
        setRecipeIngredients(recipeIngredientsData);
        setMealPlans(mealPlansData);
        setMealPlanRecipes(mealPlanRecipesData);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  // Categories CRUD
  const createCategory = async (categoryName) => {
    try {
      const newCategory = await apiService.addCategory(categoryName);
      setCategories([...categories, newCategory]);
    } catch (error) {
      console.error('Error adding category:', error);
    }
  };

  const updateCategory = async (categoryId, categoryName) => {
    try {
      const updatedCategory = await apiService.updateCategory(categoryId, categoryName);
      setCategories(categories.map(cat => (cat.CategoryID === categoryId ? updatedCategory : cat)));
    } catch (error) {
      console.error('Error updating category:', error);
    }
  };

  const deleteCategory = async (categoryId) => {
    try {
      await apiService.deleteCategory(categoryId);
      setCategories(categories.filter(cat => cat.CategoryID !== categoryId));
    } catch (error) {
      console.error('Error deleting category:', error);
    }
  };

  // SubCategories CRUD
  const createSubCategory = async (subCategory) => {
    try {
      const newSubCategory = await apiService.addSubCategory(subCategory);
      setSubCategories([...subCategories, newSubCategory]);
    } catch (error) {
      console.error('Error adding subcategory:', error);
    }
  };

  const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    try {
      const updatedSubCategory = await apiService.updateSubCategory(subCategoryId, subCategoryName, categoryId);
      setSubCategories(subCategories.map(sub => (sub.SubCategoryID === subCategoryId ? updatedSubCategory : sub)));
    } catch (error) {
      console.error('Error updating subcategory:', error);
    }
  };

  const deleteSubCategory = async (subCategoryId) => {
    try {
      await apiService.deleteSubCategory(subCategoryId);
      setSubCategories(subCategories.filter(sub => sub.SubCategoryID !== subCategoryId));
    } catch (error) {
      console.error('Error deleting subcategory:', error);
    }
  };

  // Ingredients CRUD
  const createIngredient = async (ingredient) => {
    try {
      const newIngredient = await apiService.addIngredient(ingredient);
      setIngredients([...ingredients, newIngredient]);
    } catch (error) {
      console.error('Error adding ingredient:', error);
    }
  };

  const updateIngredient = async (ingredientId, ingredient) => {
    try {
      const updatedIngredient = await apiService.updateIngredient(ingredientId, ingredient);
      setIngredients(ingredients.map(ing => (ing.IngredientID === ingredientId ? updatedIngredient : ing)));
    } catch (error) {
      console.error('Error updating ingredient:', error);
    }
  };

  const deleteIngredient = async (ingredientId) => {
    try {
      await apiService.deleteIngredient(ingredientId);
      setIngredients(ingredients.filter(ing => ing.IngredientID !== ingredientId));
    } catch (error) {
      console.error('Error deleting ingredient:', error);
    }
  };

  // Authors CRUD
  const createAuthor = async (authorName, authorImageURL) => {
    try {
      const newAuthor = await apiService.addAuthor(authorName, authorImageURL);
      setAuthors([...authors, newAuthor]);
    } catch (error) {
      console.error('Error adding author:', error);
    }
  };

  const updateAuthor = async (authorId, author) => {
    try {
      const updatedAuthor = await apiService.updateAuthor(authorId, author);
      setAuthors(authors.map(auth => (auth.AuthorID === authorId ? updatedAuthor : auth)));
    } catch (error) {
      console.error('Error updating author:', error);
    }
  };

  const deleteAuthor = async (authorId) => {
    try {
      await apiService.deleteAuthor(authorId);
      setAuthors(authors.filter(auth => auth.AuthorID !== authorId));
    } catch (error) {
      console.error('Error deleting author:', error);
    }
  };

  // Recipe Books CRUD
  const createRecipeBook = async (recipeBook) => {
    try {
      const newRecipeBook = await apiService.addRecipeBook(recipeBook);
      setRecipeBooks([...recipeBooks, newRecipeBook]);
    } catch (error) {
      console.error('Error adding recipe book:', error);
    }
  };

  const updateRecipeBook = async (recipeBookId, recipeBook) => {
    try {
      const updatedRecipeBook = await apiService.updateRecipeBook(recipeBookId, recipeBook);
      setRecipeBooks(recipeBooks.map(book => (book.BookID === recipeBookId ? updatedRecipeBook : book)));
    } catch (error) {
      console.error('Error updating recipe book:', error);
    }
  };

  const deleteRecipeBook = async (recipeBookId) => {
    try {
      await apiService.deleteRecipeBook(recipeBookId);
      setRecipeBooks(recipeBooks.filter(book => book.BookID !== recipeBookId));
    } catch (error) {
      console.error('Error deleting recipe book:', error);
    }
  };

  // Recipes CRUD
  const createRecipe = async (recipe) => {
    try {
      const newRecipe = await apiService.addRecipe(recipe);
      setRecipes([...recipes, newRecipe]);
    } catch (error) {
      console.error('Error adding recipe:', error);
      throw error; // Ensure to rethrow the error to be caught in the component
    }
  };

  const updateRecipe = async (recipeId, recipe) => {
    try {
      const updatedRecipe = await apiService.updateRecipe(recipeId, recipe);
      setRecipes(recipes.map(rec => (rec.RecipeID === recipeId ? updatedRecipe : rec)));
    } catch (error) {
      console.error('Error updating recipe:', error);
    }
  };

  const deleteRecipe = async (recipeId) => {
    try {
      await apiService.deleteRecipe(recipeId);
      setRecipes(recipes.filter(rec => rec.RecipeID !== recipeId));
    } catch (error) {
      console.error('Error deleting recipe:', error);
    }
  };

  const createRecipeIngredient = async (recipeIngredient) => {
    try {
      const newRecipeIngredient = await apiService.addRecipeIngredient(recipeIngredient);
      setRecipeIngredients([...recipeIngredients, newRecipeIngredient]);
    } catch (error) {
      console.error('Error adding recipe ingredient:', error);
    }
  };

  // Meal Plans CRUD
  const createMealPlan = async (mealPlan) => {
    try {
      const newMealPlan = await apiService.addMealPlan(mealPlan);
      setMealPlans([...mealPlans, newMealPlan]);
    } catch (error) {
      console.error('Error adding meal plan:', error);
    }
  };

  const updateMealPlan = async (mealPlanId, mealPlan) => {
    try {
      const updatedMealPlan = await apiService.updateMealPlan(mealPlanId, mealPlan);
      setMealPlans(mealPlans.map(mp => (mp.MealPlanID === mealPlanId ? updatedMealPlan : mp)));
    } catch (error) {
      console.error('Error updating meal plan:', error);
    }
  };

  const deleteMealPlan = async (mealPlanId) => {
    try {
      await apiService.deleteMealPlan(mealPlanId);
      setMealPlans(mealPlans.filter(mp => mp.MealPlanID !== mealPlanId));
    } catch (error) {
      console.error('Error deleting meal plan:', error);
    }
  };

  // Meal Plan Recipes CRUD
  const createMealPlanRecipe = async (mealPlanRecipe) => {
    try {
      const newMealPlanRecipe = await apiService.addMealPlanRecipe(mealPlanRecipe);
      setMealPlanRecipes([...mealPlanRecipes, newMealPlanRecipe]);
    } catch (error) {
      console.error('Error adding meal plan recipe:', error);
    }
  };

  const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    try {
      const updatedMealPlanRecipe = await apiService.updateMealPlanRecipe(mealPlanRecipeId, mealPlanRecipe);
      setMealPlanRecipes(prev => prev.map(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId ? updatedMealPlanRecipe : mpr));
    } catch (error) {
      console.error('Error updating meal plan recipe:', error);
    }
  };

  const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    try {
      await apiService.deleteMealPlanRecipe(mealPlanRecipeId);
      setMealPlanRecipes(mealPlanRecipes.filter(mpr => mpr.MealPlanRecipeID !== mealPlanRecipeId));
    } catch (error) {
      console.error('Error deleting meal plan recipe:', error);
    }
  };

  const getShoppingList = (mealPlanId) => {
    const filteredMealPlanRecipes = mealPlanRecipes.filter(mpr => mpr.MealPlanID === mealPlanId);

    const ingredientMap = new Map();

    filteredMealPlanRecipes.forEach(mpr => {
      const recipeId = mpr.RecipeID;
      const recipeIngredientsForRecipe = recipeIngredients.filter(ri => ri.RecipeID === recipeId);

      recipeIngredientsForRecipe.forEach(ri => {
        const ingredient = ingredients.find(ing => ing.IngredientID === ri.IngredientID);
        const unit = units.find(unit => unit.UnitID === ri.UnitID);
        if (ingredient) {
          const existing = ingredientMap.get(ingredient.IngredientID);
          if (existing) {
            existing.Quantity += ri.Quantity;
          } else {
            ingredientMap.set(ingredient.IngredientID, {
              ...ingredient,
              Quantity: ri.Quantity,
              unit: unit || { UnitName: 'Unknown' }
            });
          }
        }
      });
    });

    return Array.from(ingredientMap.values());
  };

  return (
    <DataContext.Provider
      value={{
        categories, createCategory, updateCategory, deleteCategory,
        subCategories, createSubCategory, updateSubCategory, deleteSubCategory,
        ingredients, createIngredient, updateIngredient, deleteIngredient,
        authors, createAuthor, updateAuthor, deleteAuthor,
        recipeBooks, createRecipeBook, updateRecipeBook, deleteRecipeBook,
        recipes, createRecipe, updateRecipe, deleteRecipe,
        units, recipeIngredients, createRecipeIngredient,
        mealPlans, createMealPlan, updateMealPlan, deleteMealPlan,
        mealPlanRecipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe,
        getShoppingList,
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => useContext(DataContext);


==================== C:\Code\recipe-app\client\src\pages\Dashboard.jsx ====================

// src/pages/Home.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';

function Dashboard() {
  const { categories, subCategories, ingredients, authors, recipeBooks, recipes } = useData();

  const items = [
    { name: 'Categories', count: categories.length, link: '/manage-categories' },
    { name: 'Subcategories', count: subCategories.length, link: '/manage-sub-categories' },
    { name: 'Ingredients', count: ingredients.length, link: '/manage-ingredients' },
    { name: 'Authors', count: authors.length, link: '/manage-authors' },
    { name: 'Recipe Books', count: recipeBooks.length, link: '/manage-recipe-books' },
    { name: 'Recipes', count: recipes.length, link: '/manage-recipes' },
  ];

  return (
    <div className="flex flex-wrap gap-4 p-6">
      {items.map((item, index) => (
        <Card key={index} title={item.name} count={item.count} link={item.link} />
      ))}
    </div>
  );
}

export default Dashboard;


==================== C:\Code\recipe-app\client\src\pages\Home.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import AddMealPlanModal from '../components/AddMealPlanModal';
import { format, isWithinInterval, parseISO, startOfWeek, endOfWeek, isFuture, isPast } from 'date-fns';
import { Link } from 'react-router-dom';

const Home = () => {
  const { mealPlans } = useData();
  const [isModalOpen, setIsModalOpen] = useState(false);

  const categorizeMealPlans = (mealPlans) => {
    const now = new Date();
    const currentWeekStart = startOfWeek(now, { weekStartsOn: 1 });
    const currentWeekEnd = endOfWeek(now, { weekStartsOn: 1 });

    const currentWeekPlans = mealPlans.filter(plan =>
      isWithinInterval(parseISO(plan.StartDate), { start: currentWeekStart, end: currentWeekEnd }) ||
      isWithinInterval(parseISO(plan.EndDate), { start: currentWeekStart, end: currentWeekEnd })
    );

    const upcomingPlans = mealPlans.filter(plan =>
      isFuture(parseISO(plan.StartDate)) && !currentWeekPlans.includes(plan)
    );

    const previousPlans = mealPlans.filter(plan =>
      isPast(parseISO(plan.EndDate)) && !currentWeekPlans.includes(plan)
    );

    return { currentWeekPlans, upcomingPlans, previousPlans };
  };

  const { currentWeekPlans, upcomingPlans, previousPlans } = categorizeMealPlans(mealPlans);

  const renderMealPlanCard = (plan) => (
    <Link to={`/meal-plan/${plan.MealPlanID}`} key={plan.MealPlanID}>
      <Card title={plan.PlanName} count={1}>
        <p>Start: {format(parseISO(plan.StartDate), 'yyyy-MM-dd')}</p>
        <p>End: {format(parseISO(plan.EndDate), 'yyyy-MM-dd')}</p>
      </Card>
    </Link>
  );

  const openModal = () => {
    setIsModalOpen(true);
    document.getElementById('add_meal_plan_modal').showModal();
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Current Week</h1>
      {currentWeekPlans.length > 0 ? (
        <div className="flex flex-wrap gap-4 mb-8">
          {currentWeekPlans.map(renderMealPlanCard)}
        </div>
      ) : (
        <div className="mb-8">
          <p>No current meal plans for this week.</p>
          <Button onClick={openModal}>Add Meal Plan</Button>
        </div>
      )}

      <h2 className="text-xl font-bold mb-4">Upcoming Meal Plans</h2>
      <div className="flex flex-wrap gap-4 mb-8">
        {upcomingPlans.map(renderMealPlanCard)}
      </div>

      <h2 className="text-xl font-bold mb-4">Previous Meal Plans</h2>
      <div className="flex flex-wrap gap-4 mb-8">
        {previousPlans.map(renderMealPlanCard)}
      </div>

      {isModalOpen && <AddMealPlanModal />}
    </div>
  );
};

export default Home;


==================== C:\Code\recipe-app\client\src\pages\Login.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import TextInput from '../components/ui/TextInput';
import Button from '../components/ui/Button';

function Login() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const { login } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        await login(username, password);
    };

    return (
        <div className="flex items-start p-8 justify-center w-full">
            <div className="flex flex-col w-96 rounded-box bg-base-200 p-6 gap-4">
                <h1 className="text-3xl font-bold self-center">Log in</h1>
                {/* <span className="self-center flex gap-2">
                    Don't have an account?
                    <a className="link link-secondary" onClick={() => navigate('/register')}>Register</a>
                </span>
                <a className="btn btn-neutral">
                    <i className="fa-brands fa-google text-primary"></i>
                    Log in with Google
                </a>
                <div className="divider">OR</div> */}
                <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
                    <TextInput
                        label="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                    />
                    <label className="form-control w-full">
                        <div className="label">
                            <span className="label-text">Password</span>
                            <a className="label-text link link-accent">Forgot password?</a>
                        </div>
                        <TextInput
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </label>
                    <div className="form-control">
                        <label className="cursor-pointer label self-start gap-2">
                            <input type="checkbox" className="checkbox" />
                            <span className="label-text">Remember me</span>
                        </label>
                    </div>
                    <Button type="submit">Log in</Button>
                </form>
            </div>
        </div>
    );
}

export default Login;


==================== C:\Code\recipe-app\client\src\pages\ManageAuthors.jsx ====================

// src/pages/ManageAuthors.jsx
import React from 'react';
import AuthorTable from '../components/AuthorTable';
import AddAuthorModal from '../components/AddAuthorModal';

function ManageAuthors() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Authors</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_author_modal').showModal()}>Add Author</button>
      </div>
      <AuthorTable />
      <AddAuthorModal />
    </div>
  );
}

export default ManageAuthors;


==================== C:\Code\recipe-app\client\src\pages\ManageCategories.jsx ====================

// src/pages/ManageCategories.jsx
import React from 'react';
import CategoryTable from '../components/CategoryTable';
import AddCategoryModal from '../components/AddCategoryModal';

function ManageCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_category_modal').showModal()}>Add Category</button>
      </div>
      <CategoryTable />
      <AddCategoryModal />
    </div>
  );
}

export default ManageCategories;


==================== C:\Code\recipe-app\client\src\pages\ManageIngredients.jsx ====================

// src/pages/ManageIngredients.jsx
import React from 'react';
import IngredientTable from '../components/IngredientTable';
import AddIngredientModal from '../components/AddIngredientModal';

function ManageIngredients() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Ingredients</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_ingredient_modal').showModal()}>Add Ingredient</button>
      </div>
      <IngredientTable />
      <AddIngredientModal />
    </div>
  );
}

export default ManageIngredients;


==================== C:\Code\recipe-app\client\src\pages\ManageMealPlans.jsx ====================

// src/pages/ManageMealPlans.jsx

import React, { useState } from 'react';
import MealPlanTable from '../components/MealPlanTable';
import AddMealPlanModal from '../components/AddMealPlanModal';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';
import Calendar from '../components/Calendar';
import ShoppingList from '../components/ShoppingList';
import { useData } from '../context/DataContext';

function ManageMealPlans() {
  const [selectedMealPlan, setSelectedMealPlan] = useState(null);
  const [addingMeal, setAddingMeal] = useState(null);
  const [modifyingMeal, setModifyingMeal] = useState(null);
  const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

  const handleAddMeals = (mealPlan) => {
    setSelectedMealPlan(mealPlan);
  };

  const handleAddMeal = (date, mealType) => {
    setAddingMeal({ date, mealType });
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = async (mealPlanRecipeId, remove = false) => {
    if (remove) {
      if (window.confirm('Are you sure you want to remove this meal?')) {
        try {
          await deleteMealPlanRecipe(mealPlanRecipeId);
        } catch (error) {
          console.log(error);
          alert('Failed to remove meal');
        }
      }
    } else {
      const mealPlanRecipe = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
      if (mealPlanRecipe) {
        setModifyingMeal(mealPlanRecipe);
        setAddingMeal({
          date: mealPlanRecipe.Date,
          mealType: mealPlanRecipe.MealType,
          recipeId: mealPlanRecipe.RecipeID,
          mealPlanRecipeId: mealPlanRecipeId
        });
        document.getElementById('add_meal_plan_recipe_modal').showModal();
      } else {
        console.error('Meal plan recipe not found:', mealPlanRecipeId);
      }
    }
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Meal Plans</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_meal_plan_modal').showModal()}>Add Meal Plan</button>
      </div>
      <MealPlanTable onManageMeals={handleAddMeals} />
      {selectedMealPlan && (
        <>
          <h2 className="text-2xl font-bold mt-6">Meals for Selected Plan</h2>
          <Calendar
            mealPlan={selectedMealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === selectedMealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
          />
          <h2 className="text-2xl font-bold mt-6">Shopping List</h2>
          <ShoppingList mealPlanId={selectedMealPlan.MealPlanID} />
        </>
      )}
      <AddMealPlanModal />
      {selectedMealPlan && (
        <AddMealPlanRecipeModal
          mealPlanId={selectedMealPlan.MealPlanID}
          startDate={selectedMealPlan.StartDate}
          endDate={selectedMealPlan.EndDate}
          defaultDate={addingMeal?.date}
          defaultMealType={addingMeal?.mealType}
          defaultRecipeId={addingMeal?.recipeId}
          mealPlanRecipeId={addingMeal?.mealPlanRecipeId}
        />
      )}
    </div>
  );
}

export default ManageMealPlans;


==================== C:\Code\recipe-app\client\src\pages\ManageRecipeBooks.jsx ====================

// src/pages/ManageRecipeBooks.jsx
import React from 'react';
import RecipeBookTable from '../components/RecipeBookTable';
import AddRecipeBookModal from '../components/AddRecipeBookModal';

function ManageRecipeBooks() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipe Books</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_recipe_book_modal').showModal()}>Add Recipe Book</button>
      </div>
      <RecipeBookTable />
      <AddRecipeBookModal />
    </div>
  );
}

export default ManageRecipeBooks;


==================== C:\Code\recipe-app\client\src\pages\ManageRecipes.jsx ====================

// src/pages/ManageRecipes.jsx
import React, { useState } from 'react';
import RecipeTable from '../components/RecipeTable';
import AddRecipeModal from '../components/AddRecipeModal';
import AddRecipeIngredientModal from '../components/AddRecipeIngredientModal';
import Button from '../components/ui/Button';

function ManageRecipes() {
  const [selectedRecipeId, setSelectedRecipeId] = useState(null);

  const handleAddIngredients = (recipeId) => {
    setSelectedRecipeId(recipeId);
    document.getElementById('add_recipe_ingredient_modal').showModal();
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipes</h1>
      <div>
        <Button
          size='sm'
          variant='secondary'
          outline={true}
          onClick={() => document.getElementById('add_recipe_modal').showModal()}
        >
          Add Recipe
        </Button>       
      </div>
      <RecipeTable onAddIngredients={handleAddIngredients} />
      <AddRecipeModal />
      <AddRecipeIngredientModal recipeId={selectedRecipeId} />
    </div>
  );
}

export default ManageRecipes;


==================== C:\Code\recipe-app\client\src\pages\ManageSubCategories.jsx ====================

// src/pages/ManageSubCategories.jsx
import React from 'react';
import SubCategoryTable from '../components/SubCategoryTable';
import AddSubCategoryModal from '../components/AddSubCategoryModal';

function ManageSubCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Sub-Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_sub_category_modal').showModal()}>Add Sub-Category</button>
      </div>
      <SubCategoryTable />
      <AddSubCategoryModal />
    </div>
  );
}

export default ManageSubCategories;


==================== C:\Code\recipe-app\client\src\pages\MealPlanDetails.jsx ====================

import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { useData } from '../context/DataContext';
import Calendar from '../components/Calendar';
import Button from '../components/ui/Button';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';

const MealPlanDetails = () => {
  const { mealPlanId } = useParams();
  const { mealPlans, mealPlanRecipes, recipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe } = useData();
  const mealPlan = mealPlans.find(mp => mp.MealPlanID === parseInt(mealPlanId));
  const [selectedMeal, setSelectedMeal] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleAddMeal = (date, mealType) => {
    setSelectedMeal({ date, mealType, mealPlanRecipeId: null });
    setIsModalOpen(true);
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = (mealPlanRecipeId) => {
    const meal = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
    if (meal) {
      setSelectedMeal({
        date: meal.Date,
        mealType: meal.MealType,
        recipeId: meal.RecipeID,
        mealPlanRecipeId: meal.MealPlanRecipeID,
      });
      setIsModalOpen(true);
      document.getElementById('add_meal_plan_recipe_modal').showModal();
    }
  };

  const handleSaveMeal = async (mealPlanRecipe) => {
    if (selectedMeal.mealPlanRecipeId) {
      await updateMealPlanRecipe(selectedMeal.mealPlanRecipeId, mealPlanRecipe);
    } else {
      await createMealPlanRecipe(mealPlanRecipe);
    }
    setIsModalOpen(false);
  };

  const handleRemoveMeal = async (mealPlanRecipeId) => {
    if (window.confirm('Are you sure you want to remove this meal?')) {
      await deleteMealPlanRecipe(mealPlanRecipeId);
    }
  };

  return (
    <div className="p-6">
      {mealPlan ? (
        <>
          <h1 className="text-2xl font-bold mb-4">{mealPlan.PlanName}</h1>
          <Calendar
            mealPlan={mealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === mealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
            onRemoveMeal={handleRemoveMeal}
          />

          <AddMealPlanRecipeModal
            mealPlanId={mealPlan.MealPlanID}
            defaultDate={selectedMeal?.date}
            defaultMealType={selectedMeal?.mealType}
            defaultRecipeId={selectedMeal?.recipeId}
            mealPlanRecipeId={selectedMeal?.mealPlanRecipeId}
            onSave={handleSaveMeal}
          />
        </>
      ) : (
        <p>Meal plan not found.</p>
      )}
    </div>
  );
};

export default MealPlanDetails;


==================== C:\Code\recipe-app\client\src\pages\Register.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';

function Register() {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await fetch('http://localhost:8000/api/users/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Email: email, Password: password }),
    });

    if (response.ok) {
      await login(username, password);
    } else {
      alert('Registration failed');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="p-8 bg-white rounded shadow-md w-96">
        <h2 className="mb-4 text-2xl font-bold text-center">Register</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block mb-1">Username</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <button type="submit" className="w-full py-2 text-white bg-green-500 rounded hover:bg-green-600">
            Register
          </button>
        </form>
      </div>
    </div>
  );
}

export default Register;


==================== C:\Code\recipe-app\client\src\services\apiService.js ====================

import { supabase } from '../supabaseClient';

// Categories
export const getCategories = async () => {
    const { data, error } = await supabase.from('IngredientCategories').select('*');
    if (error) throw error;
    return data;
};

export const addCategory = async (categoryName) => {
    const { data, error } = await supabase
        .from('IngredientCategories')
        .insert([{ CategoryName: categoryName }])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateCategory = async (categoryId, categoryName) => {
    const { data, error } = await supabase
        .from('IngredientCategories')
        .update({ CategoryName: categoryName })
        .eq('CategoryID', categoryId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteCategory = async (categoryId) => {
    const { data, error } = await supabase.from('IngredientCategories').delete().eq('CategoryID', categoryId).select();
    if (error) throw error;
    return data;
};

// SubCategories
export const getSubCategories = async () => {
    const { data, error } = await supabase.from('IngredientSubCategories').select('*');
    if (error) throw error;
    return data;
};

export const addSubCategory = async (subCategory) => {
    const { data, error } = await supabase
        .from('IngredientSubCategories')
        .insert([subCategory])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    const { data, error } = await supabase
        .from('IngredientSubCategories')
        .update({ SubCategoryName: subCategoryName, CategoryID: categoryId })
        .eq('SubCategoryID', subCategoryId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteSubCategory = async (subCategoryId) => {
    const { data, error } = await supabase.from('IngredientSubCategories').delete().eq('SubCategoryID', subCategoryId).select();
    if (error) throw error;
    return data;
};

// Ingredients
export const getIngredients = async () => {
    const { data, error } = await supabase.from('Ingredients').select('*');
    if (error) throw error;
    return data;
};

export const addIngredient = async (ingredient) => {
    const { data, error } = await supabase
        .from('Ingredients')
        .insert([ingredient])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateIngredient = async (ingredientId, ingredient) => {
    const { data, error } = await supabase
        .from('Ingredients')
        .update(ingredient)
        .eq('IngredientID', ingredientId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteIngredient = async (ingredientId) => {
    const { data, error } = await supabase.from('Ingredients').delete().eq('IngredientID', ingredientId).select();
    if (error) throw error;
    return data;
};

// Authors
export const getAuthors = async () => {
    const { data, error } = await supabase.from('RecipeAuthors').select('*');
    if (error) throw error;
    return data;
};

export const addAuthor = async (authorName, authorImageURL) => {
    const { data, error } = await supabase
        .from('RecipeAuthors')
        .insert([{ AuthorName: authorName, AuthorImageURL: authorImageURL }])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateAuthor = async (authorId, author) => {
    const { data, error } = await supabase
        .from('RecipeAuthors')
        .update(author)
        .eq('AuthorID', authorId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteAuthor = async (authorId) => {
    const { data, error } = await supabase.from('RecipeAuthors').delete().eq('AuthorID', authorId).select();
    if (error) throw error;
    return data;
};

// Recipe Books
export const getRecipeBooks = async () => {
    const { data, error } = await supabase.from('RecipeBooks').select('*');
    if (error) throw error;
    return data;
};

export const addRecipeBook = async (recipeBook) => {
    const { data, error } = await supabase
        .from('RecipeBooks')
        .insert([recipeBook])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateRecipeBook = async (recipeBookId, recipeBook) => {
    const { data, error } = await supabase
        .from('RecipeBooks')
        .update(recipeBook)
        .eq('BookID', recipeBookId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteRecipeBook = async (recipeBookId) => {
    const { data, error } = await supabase.from('RecipeBooks').delete().eq('BookID', recipeBookId).select();
    if (error) throw error;
    return data;
};

// Recipes
export const getRecipes = async () => {
    const { data, error } = await supabase.from('Recipes').select('*');
    if (error) throw error;
    return data;
};

export const addRecipe = async (recipe) => {
    console.log('Inserting recipe:', recipe);
    const { data, error } = await supabase
        .from('Recipes')
        .insert([recipe])
        .select(); // Ensure to select the inserted rows
    console.log('Supabase insert response:', { data, error });
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateRecipe = async (recipeId, recipe) => {
    const { data, error } = await supabase
        .from('Recipes')
        .update(recipe)
        .eq('RecipeID', recipeId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteRecipe = async (recipeId) => {
    const { data, error } = await supabase.from('Recipes').delete().eq('RecipeID', recipeId).select();
    if (error) throw error;
    return data;
};

// Units
export const getUnits = async () => {
    const { data, error } = await supabase.from('Units').select('*');
    if (error) throw error;
    return data;
};

// Recipe Ingredients
export const getRecipeIngredients = async () => {
    const { data, error } = await supabase.from('RecipeIngredients').select('*');
    if (error) throw error;
    return data;
};

export const addRecipeIngredient = async (recipeIngredient) => {
    const { data, error } = await supabase
        .from('RecipeIngredients')
        .insert([recipeIngredient])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

// Meal Plans
export const getMealPlans = async () => {
    const { data, error } = await supabase.from('MealPlans').select('*');
    if (error) throw error;
    return data;
};

export const addMealPlan = async (mealPlan) => {
    console.log('Inserting meal plan:', mealPlan);
    const { data, error } = await supabase
        .from('MealPlans')
        .insert([mealPlan])
        .select(); // Ensure to select the inserted rows
    console.log('Supabase insert response:', { data, error });
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateMealPlan = async (mealPlanId, mealPlan) => {
    const { data, error } = await supabase
        .from('MealPlans')
        .update(mealPlan)
        .eq('MealPlanID', mealPlanId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteMealPlan = async (mealPlanId) => {
    const { data, error } = await supabase.from('MealPlans')
        .delete()
        .eq('MealPlanID', mealPlanId)
        .select();
    if (error) throw error;
    return data;
};

// Meal Plan Recipes
export const getMealPlanRecipes = async () => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .select('*');
    if (error) throw error;
    return data;
};

export const addMealPlanRecipe = async (mealPlanRecipe) => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .insert([mealPlanRecipe])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .update(mealPlanRecipe)
        .eq('MealPlanRecipeID', mealPlanRecipeId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    const { data, error } = await supabase.from('MealPlanRecipes').delete().eq('MealPlanRecipeID', mealPlanRecipeId).select();
    if (error) throw error;
    return data;
};


==================== C:\Code\recipe-app\client\src\utils\cache.js ====================

// src/utils/cache.js

class Cache {
    constructor() {
      this.cache = {};
    }
  
    set(key, data) {
      this.cache[key] = {
        data,
        timestamp: new Date().getTime(),
      };
    }
  
    get(key, expiryTime = 180000) { // default expiry time is 180 seconds
      const cachedItem = this.cache[key];
      if (cachedItem && (new Date().getTime() - cachedItem.timestamp < expiryTime)) {
        return cachedItem.data;
      }
      return null;
    }
  
    invalidate(key) {
      delete this.cache[key];
    }
  }
  
  const cache = new Cache();
  export default cache;
  

==================== C:\Code\recipe-app\collated_output.txt ====================



==================== client/src\pages\ManageMealPlans.jsx ====================

// src/pages/ManageMealPlans.jsx

import React, { useState, useEffect } from 'react';
import MealPlanTable from '../components/MealPlanTable';
import AddMealPlanModal from '../components/AddMealPlanModal';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';
import Calendar from '../components/Calendar';
import { useData } from '../context/DataContext';

function ManageMealPlans() {
  const [selectedMealPlan, setSelectedMealPlan] = useState(null);
  const [addingMeal, setAddingMeal] = useState(null);
  const [modifyingMeal, setModifyingMeal] = useState(null);
  const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

  const handleAddMeals = (mealPlan) => {
    setSelectedMealPlan(mealPlan);
  };

  const handleAddMeal = (date, mealType) => {
    setAddingMeal({ date, mealType });
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = async (mealPlanRecipeId, remove = false) => {
    if (remove) {
      if (window.confirm('Are you sure you want to remove this meal?')) {
        try {
          await deleteMealPlanRecipe(mealPlanRecipeId);
        } catch (error) {
          console.log(error);
          alert('Failed to remove meal');
        }
      }
    } else {
      const mealPlanRecipe = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
      if (mealPlanRecipe) {
        setModifyingMeal(mealPlanRecipe);
        document.getElementById('add_meal_plan_recipe_modal').showModal();
      } else {
        console.error('Meal plan recipe not found:', mealPlanRecipeId);
      }
    }
  };

  useEffect(() => {
    if (modifyingMeal) {
      setAddingMeal({
        date: modifyingMeal.Date,
        mealType: modifyingMeal.MealType,
        recipeId: modifyingMeal.RecipeID,
      });
    }
  }, [modifyingMeal]);

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Meal Plans</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_meal_plan_modal').showModal()}>Add Meal Plan</button>
      </div>
      <MealPlanTable onManageMeals={handleAddMeals} />
      {selectedMealPlan && (
        <>
          <h2 className="text-2xl font-bold mt-6">Meals for Selected Plan</h2>
          <Calendar
            mealPlan={selectedMealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === selectedMealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
          />
        </>
      )}
      <AddMealPlanModal />
      {selectedMealPlan && (
        <AddMealPlanRecipeModal
          mealPlanId={selectedMealPlan.MealPlanID}
          startDate={selectedMealPlan.StartDate}
          endDate={selectedMealPlan.EndDate}
          defaultDate={addingMeal?.date}
          defaultMealType={addingMeal?.mealType}
          defaultRecipeId={addingMeal?.recipeId}
        />
      )}
    </div>
  );
}

export default ManageMealPlans;


==================== client\src\components\MealPlanTable.jsx ====================

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanTable({ onManageMeals }) {
  const { mealPlans, deleteMealPlan } = useData();

  const handleDelete = async (mealPlanId) => {
    if (window.confirm('Are you sure you want to delete this meal plan?')) {
      try {
        await deleteMealPlan(mealPlanId);
      } catch (error) {
        alert('Failed to delete meal plan');
      }
    }
  };

  const headers = ['ID', 'Plan Name', 'Start Date', 'End Date', 'Actions'];

  const data = mealPlans.map((mealPlan) => ({
    id: mealPlan.MealPlanID,
    cells: [
      mealPlan.MealPlanID,
      mealPlan.PlanName,
      mealPlan.StartDate,
      mealPlan.EndDate,
      <div className="flex gap-2">
        <Button
          size="sm"
          variant="primary"
          outline={true}
          onClick={() => onManageMeals(mealPlan)}
        >
          Manage Meals
        </Button>
        <DeleteButton onClick={() => handleDelete(mealPlan.MealPlanID)} />
      </div>
    ],
  }));

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default MealPlanTable;


==================== client\src\context\DataContext.jsx ====================

// src/context/DataContext.jsx

import React, { createContext, useContext, useEffect, useState } from 'react';
import * as apiService from '../services/apiService';

const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [authors, setAuthors] = useState([]);
  const [recipeBooks, setRecipeBooks] = useState([]);
  const [recipes, setRecipes] = useState([]);
  const [units, setUnits] = useState([]);
  const [recipeIngredients, setRecipeIngredients] = useState([]);
  const [mealPlans, setMealPlans] = useState([]);
  const [mealPlanRecipes, setMealPlanRecipes] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [
          categoriesData,
          subCategoriesData,
          ingredientsData,
          authorsData,
          recipeBooksData,
          recipesData,
          unitsData,
          recipeIngredientsData,
          mealPlansData,
          mealPlanRecipesData,
        ] = await Promise.all([
          apiService.getCategories(),
          apiService.getSubCategories(),
          apiService.getIngredients(),
          apiService.getAuthors(),
          apiService.getRecipeBooks(),
          apiService.getRecipes(),
          apiService.getUnits(),
          apiService.getRecipeIngredients(),
          apiService.getMealPlans(),
          apiService.getMealPlanRecipes(),
        ]);

        setCategories(categoriesData);
        setSubCategories(subCategoriesData);
        setIngredients(ingredientsData);
        setAuthors(authorsData);
        setRecipeBooks(recipeBooksData);
        setRecipes(recipesData);
        setUnits(unitsData);
        setRecipeIngredients(recipeIngredientsData);
        setMealPlans(mealPlansData);
        setMealPlanRecipes(mealPlanRecipesData);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  // Categories CRUD
  const createCategory = async (categoryName) => {
    const newCategory = await apiService.addCategory(categoryName);
    setCategories([...categories, newCategory]);
  };

  const updateCategory = async (categoryId, categoryName) => {
    await apiService.updateCategory(categoryId, categoryName);
    setCategories(categories.map(cat => (cat.CategoryID === categoryId ? { ...cat, CategoryName: categoryName } : cat)));
  };

  const deleteCategory = async (categoryId) => {
    await apiService.deleteCategory(categoryId);
    setCategories(categories.filter(cat => cat.CategoryID !== categoryId));
  };

  // SubCategories CRUD
  const createSubCategory = async (subCategory) => {
    const newSubCategory = await apiService.addSubCategory(subCategory);
    setSubCategories([...subCategories, newSubCategory]);
  };

  const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    await apiService.updateSubCategory(subCategoryId, subCategoryName, categoryId);
    setSubCategories(subCategories.map(sub => (sub.SubCategoryID === subCategoryId ? { ...sub, SubCategoryName: subCategoryName, CategoryID: categoryId } : sub)));
  };

  const deleteSubCategory = async (subCategoryId) => {
    await apiService.deleteSubCategory(subCategoryId);
    setSubCategories(subCategories.filter(sub => sub.SubCategoryID !== subCategoryId));
  };

  // Ingredients CRUD
  const createIngredient = async (ingredient) => {
    const newIngredient = await apiService.addIngredient(ingredient);
    setIngredients([...ingredients, newIngredient]);
  };

  const updateIngredient = async (ingredientId, ingredient) => {
    await apiService.updateIngredient(ingredientId, ingredient);
    setIngredients(ingredients.map(ing => (ing.IngredientID === ingredientId ? { ...ing, ...ingredient } : ing)));
  };

  const deleteIngredient = async (ingredientId) => {
    await apiService.deleteIngredient(ingredientId);
    setIngredients(ingredients.filter(ing => ing.IngredientID !== ingredientId));
  };

  // Authors CRUD
  const createAuthor = async (authorName, authorImageURL) => {
    const newAuthor = await apiService.addAuthor(authorName, authorImageURL);
    setAuthors([...authors, newAuthor]);
  };

  const updateAuthor = async (authorId, author) => {
    await apiService.updateAuthor(authorId, author);
    setAuthors(authors.map(auth => (auth.AuthorID === authorId ? { ...auth, ...author } : auth)));
  };

  const deleteAuthor = async (authorId) => {
    await apiService.deleteAuthor(authorId);
    setAuthors(authors.filter(auth => auth.AuthorID !== authorId));
  };

  // Recipe Books CRUD
  const createRecipeBook = async (recipeBook) => {
    const newRecipeBook = await apiService.addRecipeBook(recipeBook);
    setRecipeBooks([...recipeBooks, newRecipeBook]);
  };

  const updateRecipeBook = async (recipeBookId, recipeBook) => {
    await apiService.updateRecipeBook(recipeBookId, recipeBook);
    setRecipeBooks(recipeBooks.map(book => (book.BookID === recipeBookId ? { ...book, ...recipeBook } : book)));
  };

  const deleteRecipeBook = async (recipeBookId) => {
    await apiService.deleteRecipeBook(recipeBookId);
    setRecipeBooks(recipeBooks.filter(book => book.BookID !== recipeBookId));
  };

  // Recipes CRUD
  const createRecipe = async (recipe) => {
    const newRecipe = await apiService.addRecipe(recipe);
    setRecipes([...recipes, newRecipe]);
  };

  const updateRecipe = async (recipeId, recipe) => {
    await apiService.updateRecipe(recipeId, recipe);
    setRecipes(recipes.map(rec => (rec.RecipeID === recipeId ? { ...rec, ...recipe } : rec)));
  };

  const deleteRecipe = async (recipeId) => {
    await apiService.deleteRecipe(recipeId);
    setRecipes(recipes.filter(rec => rec.RecipeID !== recipeId));
  };

  const createRecipeIngredient = async (recipeIngredient) => {
    const newRecipeIngredient = await apiService.addRecipeIngredient(recipeIngredient);
    setRecipeIngredients([...recipeIngredients, newRecipeIngredient]);
  };

  // Meal Plans CRUD
  const createMealPlan = async (mealPlan) => {
    const newMealPlan = await apiService.addMealPlan(mealPlan);
    setMealPlans([...mealPlans, newMealPlan]);
  };

  const updateMealPlan = async (mealPlanId, mealPlan) => {
    await apiService.updateMealPlan(mealPlanId, mealPlan);
    setMealPlans(mealPlans.map(mp => (mp.MealPlanID === mealPlanId ? { ...mp, ...mealPlan } : mp)));
  };

  const deleteMealPlan = async (mealPlanId) => {
    await apiService.deleteMealPlan(mealPlanId);
    setMealPlans(mealPlans.filter(mp => mp.MealPlanID !== mealPlanId));
  };

   // Meal Plan Recipes CRUD
   const createMealPlanRecipe = async (mealPlanRecipe) => {
    const newMealPlanRecipe = await apiService.addMealPlanRecipe(mealPlanRecipe);
    setMealPlanRecipes([...mealPlanRecipes, newMealPlanRecipe]);
  };

  const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    await apiService.updateMealPlanRecipe(mealPlanRecipeId, mealPlanRecipe);
    setMealPlanRecipes(mealPlanRecipes.map(mpr => (mpr.MealPlanRecipeID === mealPlanRecipeId ? { ...mpr, ...mealPlanRecipe } : mpr)));
  };

  const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    await apiService.deleteMealPlanRecipe(mealPlanRecipeId);
    setMealPlanRecipes(mealPlanRecipes.filter(mpr => mpr.MealPlanRecipeID !== mealPlanRecipeId));
  };

  return (
    <DataContext.Provider
      value={{
        categories, createCategory, updateCategory, deleteCategory,
        subCategories, createSubCategory, updateSubCategory, deleteSubCategory,
        ingredients, createIngredient, updateIngredient, deleteIngredient,
        authors, createAuthor, updateAuthor, deleteAuthor,
        recipeBooks, createRecipeBook, updateRecipeBook, deleteRecipeBook,
        recipes, createRecipe, updateRecipe, deleteRecipe,
        units, recipeIngredients, createRecipeIngredient,
        mealPlans, createMealPlan, updateMealPlan, deleteMealPlan,
        mealPlanRecipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe,      
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => useContext(DataContext);


==================== client\src\components\ui\DeleteButton.jsx ====================

// src/components/ui/DeleteButton.jsx
import React from 'react';
import Button from './Button';

const DeleteButton = ({ onClick }) => (
  <Button
    size="sm"
    variant="error"
    outline={true}
    onClick={onClick}
  >
    Delete
  </Button>
);

export default DeleteButton;


==================== client\src\components\ui\Button.jsx ====================

// src/components/ui/Button.jsx
import React from 'react';

const Button = ({ type, variant = 'primary', size = 'md', outline = false, block = false, circle = false, square = false, className = '', onClick, children }) => {
  const baseClass = 'btn';
  const variantClass = `btn-${variant}`;
  const sizeClass = `btn-${size}`;
  const outlineClass = outline ? 'btn-outline' : '';
  const blockClass = block ? 'btn-block' : '';
  const circleClass = circle ? 'btn-circle' : '';
  const squareClass = square ? 'btn-square' : '';

  const classes = `${baseClass} ${variantClass} ${sizeClass} ${outlineClass} ${blockClass} ${circleClass} ${squareClass} ${className}`;

  return (
    <button type={type} className={classes} onClick={onClick}>
      {children}
    </button>
  );
};

export default Button;


==================== client\src\components\ui\Table.jsx ====================

// src/components/ui/Table.jsx
import React, { useState } from 'react';
import { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';

const Table = ({ headers, data }) => {
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'ascending' });

  const sortedData = React.useMemo(() => {
    let sortableData = [...data];
    if (sortConfig.key) {
      sortableData.sort((a, b) => {
        const aKey = a.cells[headers.indexOf(sortConfig.key)];
        const bKey = b.cells[headers.indexOf(sortConfig.key)];

        if (aKey < bKey) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aKey > bKey) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableData;
  }, [data, sortConfig, headers]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (header) => {
    if (sortConfig.key === header) {
      return sortConfig.direction === 'ascending' ? <FaSortUp /> : <FaSortDown />;
    }
    return <FaSort />;
  };

  return (
    <div className="overflow-x-auto">
      <table className="table table-zebra">
        <thead>
          <tr>
            {headers.map((header, index) => (
              <th key={index} onClick={() => requestSort(header)} className="cursor-pointer">
                <div className="flex items-center">
                  {header}
                  <span className="ml-2">{getSortIcon(header)}</span>
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row, rowIndex) => (
            <tr key={row.id || rowIndex}>
              {row.cells.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Table;


==================== client\src\components\AddMealPlanModal.jsx ====================

// src/components/AddMealPlanModal.jsx

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';

function AddMealPlanModal() {
  const [planName, setPlanName] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const { createMealPlan } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const mealPlan = {
      PlanName: planName,
      StartDate: startDate,
      EndDate: endDate,
      UserID: 1, // Adjust as needed
    };

    try {
      await createMealPlan(mealPlan);
      document.getElementById('add_meal_plan_modal').close();
    } catch (error) {
      alert('Failed to add meal plan');
    }
  };

  return (
    <Modal id="add_meal_plan_modal" title="Add Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Plan Name"
          value={planName}
          onChange={(e) => setPlanName(e.target.value)}
          required
        />
        <TextInput
          label="Start Date"
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          required
        />
        <TextInput
          label="End Date"
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          required
        />
        <Button>Add Meal Plan</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanModal;


==================== client\src\components\ui\Modal.jsx ====================

import React from 'react';

const Modal = ({ id, title, children, wide }) => {
    const modalBoxClass = wide ? 'modal-box w-11/12 max-w-5xl' : 'modal-box';
    const modalClass = wide ? 'modal' : 'modal modal-bottom sm:modal-middle';

    return (
        <dialog id={id} className={modalClass}>
            <div className={modalBoxClass}>
                <form method="dialog">
                    <button className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <h3 className="font-bold text-lg">{title}</h3>
                {children}
            </div>
        </dialog>
    );
};

export default Modal;


==================== client\src\components\ui\TextInput.jsx ====================

import React from 'react';

const TextInput = ({ label, type = 'text', value, onChange, required = false, placeholder = '', className = 'input input-bordered', min, max }) => {
  return (
    <label className="form-control">
      {label && (
        <div className="label">
          <span className="label-text">{label}</span>
        </div>
      )}
      <input
        type={type}
        className={className}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
        min={min}
        max={max}
      />
    </label>
  );
};

export default TextInput;


==================== client\src\components\AddMealPlanRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import Select from './ui/Select';
import { format, isValid } from 'date-fns';

function AddMealPlanRecipeModal({ mealPlanId, defaultDate, defaultMealType, defaultRecipeId  }) {
  const [recipeId, setRecipeId] = useState('');
  const [date, setDate] = useState(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
  const [mealType, setMealType] = useState(defaultMealType || '');
  const { recipes, createMealPlanRecipe } = useData();

  useEffect(() => {
    setDate(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
    setMealType(defaultMealType || '');
    setRecipeId(defaultRecipeId || '');
  }, [defaultDate, defaultMealType, defaultRecipeId]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!mealPlanId || !recipeId || !mealType || !date) {
      alert('All fields are required.');
      return;
    }

    const mealPlanRecipe = {
      MealPlanID: mealPlanId,
      RecipeID: recipeId,
      MealType: mealType,
      Date: date,
    };

    try {
      await createMealPlanRecipe(mealPlanRecipe);
      document.getElementById('add_meal_plan_recipe_modal').close();
      setRecipeId('');
      setMealType('');
      setDate('');
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add meal plan recipe');
    }
  };

  const recipeOptions = recipes.map(recipe => ({
    value: recipe.RecipeID,
    label: recipe.RecipeName,
  }));

  return (
    <Modal id="add_meal_plan_recipe_modal" title="Add Meal to Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <Select
          label="Recipe"
          value={recipeId}
          onChange={(e) => setRecipeId(e.target.value)}
          required
          options={recipeOptions}
          defaultOption="Select a recipe"
        />
        <Button type="submit">Add Meal</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanRecipeModal;


==================== client\src\components\ui\Select.jsx ====================

// src/components/ui/Select.jsx
import React from 'react';

const Select = ({ label, value, onChange, required, options, defaultOption, disabled }) => {
  return (
    <label className="form-control">
      <div className="label">
        <span className="label-text">{label}</span>
      </div>
      <select
        className="select select-bordered"
        value={value}
        onChange={onChange}
        required={required}
        disabled={disabled}
      >
        <option value="" disabled>{defaultOption}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value} disabled={option.disabled}>
            {option.label}
          </option>
        ))}
      </select>
    </label>
  );
};

export default Select;


==================== client\src\components\Calendar.jsx ====================

// src/components/Calendar.jsx
import React from 'react';
import Button from './ui/Button';
import { format, eachDayOfInterval, parseISO } from 'date-fns';

const Calendar = ({ mealPlan, mealPlanRecipes, recipes, onAddMeal, onModifyMeal }) => {
  const days = eachDayOfInterval({
    start: parseISO(mealPlan.StartDate),
    end: parseISO(mealPlan.EndDate),
  });

  const getMealForDay = (date, mealType) => {
    return mealPlanRecipes.find(
      (mpr) => mpr.Date === format(date, 'yyyy-MM-dd') && mpr.MealType === mealType
    );
  };

  const getRecipeName = (recipeId) => {
    const recipe = recipes.find(r => r.RecipeID === recipeId);
    return recipe ? recipe.RecipeName : 'Unknown Recipe';
  };

  return (
    <div className="grid grid-cols-7 gap-4">
      {days.map((day) => (
        <div key={day} className="border p-2">
          <h3 className="font-bold">{format(day, 'eee, MMM d')}</h3>
          {['Breakfast', 'Lunch', 'Dinner'].map((mealType) => {
            const meal = getMealForDay(day, mealType);
            return (
              <div key={mealType} className="my-2">
                <h4 className="font-semibold">{mealType}</h4>
                {meal ? (
                  <div>
                    <div>{getRecipeName(meal.RecipeID)}</div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="secondary"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID)}
                      >
                        Modify
                      </Button>
                      <Button
                        size="sm"
                        variant="error"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID, true)}
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                ) : (
                  <Button
                    size="sm"
                    variant="secondary"
                    outline
                    onClick={() => onAddMeal(day, mealType)}
                  >
                    Add {mealType}
                  </Button>
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
};

export default Calendar;


==================== C:\Code\recipe-app\combine.py ====================

import os

def combine_files(directory, output_file):
    """
    Combines text files from a specified directory into a single output file,
    excluding certain directories, file extensions, and specific filenames.
    """
    excluded_dirs = {'node_modules', '.git', 'migrations', '__pycache__'}
    excluded_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.sqlite', '.sqlite3', '.log'}
    excluded_files = {'package.json', 'package-lock.json', 'yarn.lock', '.gitignore', '.npmrc'}
    
    with open(output_file, 'a', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(directory):
            dirs[:] = [d for d in dirs if d not in excluded_dirs]
            for file in files:
                if any(file.endswith(ext) for ext in excluded_extensions) or file in excluded_files:
                    continue
                file_path = os.path.join(root, file)
                outfile.write(f"\n\n{'='*20} {file_path} {'='*20}\n\n")
                try:
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        content = infile.read()
                        outfile.write(content)
                except UnicodeDecodeError:
                    with open(file_path, 'r', encoding='latin-1') as infile:
                        content = infile.read()
                        outfile.write(content)

base_dir = os.path.dirname(os.path.abspath(__file__))
client_dir = os.path.join(base_dir, 'client')
backend_dir = os.path.join(base_dir, 'backend')
frontend_dir = os.path.join(base_dir, 'frontend')
server_dir = os.path.join(base_dir, 'server')

client_output = os.path.join(base_dir, 'output_client.txt')
backend_output = os.path.join(base_dir, 'output_backend.txt')
frontend_output = os.path.join(base_dir, 'output_frontend.txt')
server_output = os.path.join(base_dir, 'output_server.txt')
all_output = os.path.join(base_dir, 'output_all.txt')

# Clear or create the output files
open(client_output, 'w', encoding='utf-8').close()
open(backend_output, 'w', encoding='utf-8').close()
open(frontend_output, 'w', encoding='utf-8').close()
open(server_output, 'w', encoding='utf-8').close()
open(all_output, 'w', encoding='utf-8').close()

# Combine client files
combine_files(client_dir, client_output)

# Combine backend files
combine_files(backend_dir, backend_output)

# Combine frontend files
combine_files(frontend_dir, frontend_output)

# Combine server files
combine_files(server_dir, server_output)

# Combine all files
combine_files(base_dir, all_output)

==================== C:\Code\recipe-app\combined_project_files.txt ====================



==================== C:\Code\recipe-app\client/src\App.css ====================



==================== C:\Code\recipe-app\client/src\App.jsx ====================

import React from 'react';
import AppRoutes from './routes';
import NavBar from './components/NavBar';
import { useAuth } from './context/AuthContext';
import SideBar from './components/SideBar';

function App() {
  const { isAuthenticated } = useAuth();

  return (
    <div className="flex flex-col min-h-screen">
      <NavBar />
      <div className="flex grow">
        {isAuthenticated && <SideBar />}
        <AppRoutes />
      </div>
    </div>
  );
}

export default App;


==================== C:\Code\recipe-app\client/src\index.css ====================

@tailwind base;
@tailwind components;
@tailwind utilities;


==================== C:\Code\recipe-app\client/src\main.jsx ====================

import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';
import { AuthProvider } from './context/AuthContext';
import { DataProvider } from './context/DataContext';

const rootElement = document.getElementById('root');
const root = createRoot(rootElement);

root.render(
  <BrowserRouter>
    <AuthProvider>
      <DataProvider>
        <App />
      </DataProvider>
    </AuthProvider>
  </BrowserRouter>
);


==================== C:\Code\recipe-app\client/src\routes.jsx ====================

// src/routes.jsx
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Login from './pages/Login';
import Home from './pages/Home';
import Register from './pages/Register';
import ManageCategories from './pages/ManageCategories';
import ManageSubCategories from './pages/ManageSubCategories';
import ManageIngredients from './pages/ManageIngredients';
import ManageRecipes from './pages/ManageRecipes';
import ManageAuthors from './pages/ManageAuthors';
import ManageRecipeBooks from './pages/ManageRecipeBooks'; // Import the new page
import PrivateRoute from './components/PrivateRoute';

function AppRoutes() {
  return (
    <Routes>
      <Route path="/login" element={<Login />} />
      <Route path="/register" element={<Register />} />
      <Route path="/manage-categories" element={<PrivateRoute><ManageCategories /></PrivateRoute>} />
      <Route path="/manage-sub-categories" element={<PrivateRoute><ManageSubCategories /></PrivateRoute>} />
      <Route path="/manage-ingredients" element={<PrivateRoute><ManageIngredients /></PrivateRoute>} />
      <Route path="/manage-recipes" element={<PrivateRoute><ManageRecipes /></PrivateRoute>} />
      <Route path="/manage-authors" element={<PrivateRoute><ManageAuthors /></PrivateRoute>} />
      <Route path="/manage-recipe-books" element={<PrivateRoute><ManageRecipeBooks /></PrivateRoute>} /> {/* Add route */}
      <Route path="/" element={<PrivateRoute><Home /></PrivateRoute>} />
      {/* Add other routes here */}
    </Routes>
  );
}

export default AppRoutes;


==================== C:\Code\recipe-app\client/src\assets\react.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

==================== C:\Code\recipe-app\client/src\components\AddAuthorModal.jsx ====================

// src/components/AddAuthorModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';

function AddAuthorModal() {
  const [authorName, setAuthorName] = useState('');
  const [authorImageURL, setAuthorImageURL] = useState('');
  const { createAuthor } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createAuthor(authorName, authorImageURL);
      document.getElementById('add_author_modal').close();
    } catch (error) {
      alert('Failed to add author');
    }
  };

  return (
    <Modal id="add_author_modal" title="Add Author">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Author Name"
          value={authorName}
          onChange={(e) => setAuthorName(e.target.value)}
          required
        />
        <TextInput
          label="Author Image URL"
          value={authorImageURL}
          onChange={(e) => setAuthorImageURL(e.target.value)}
        />
        <Button>Add Author</Button>
      </form>
    </Modal>
  );
}

export default AddAuthorModal;


==================== C:\Code\recipe-app\client/src\components\AddCategoryModal.jsx ====================

// src/components/AddCategoryModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Button from './ui/Button';

function AddCategoryModal() {
  const [categoryName, setCategoryName] = useState('');
  const { createCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createCategory(categoryName);
      document.getElementById('add_category_modal').close();
    } catch (error) {
      alert('Failed to add category');
    }
  };

  return (
    <Modal id="add_category_modal" title="Add Category">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Category Name"
          value={categoryName}
          onChange={(e) => setCategoryName(e.target.value)}
          required
        />
        <Button>Add Category</Button>
      </form>
    </Modal>
  );
}

export default AddCategoryModal;


==================== C:\Code\recipe-app\client/src\components\AddIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Select from './ui/Select';
import Button from './ui/Button';

function AddIngredientModal({ onIngredientAdded = () => {} }) {
  const [ingredientName, setIngredientName] = useState('');
  const [purchaseWeightVolume, setPurchaseWeightVolume] = useState('');
  const [purchaseUnitId, setPurchaseUnitId] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const [subCategoryId, setSubCategoryId] = useState('');
  const [purchaseWeightUnitId, setPurchaseWeightUnitId] = useState('');

  const { categories, subCategories, units, createIngredient } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const ingredient = {
      IngredientName: ingredientName,
      PurchaseWeightVolume: purchaseWeightVolume,
      PurchaseUnitID: purchaseUnitId,
      SubCategoryID: subCategoryId,
      PurchaseWeightUnitID: purchaseWeightUnitId,
    };

    try {
      const newIngredient = await createIngredient(ingredient);
      onIngredientAdded(newIngredient);
      document.getElementById('add_ingredient_modal').close();
    } catch (error) {
      alert('Failed to add ingredient');
    }
  };

  const filteredSubCategories = subCategories.filter(
    (subCategory) => subCategory.CategoryID === parseInt(categoryId)
  );

  const unitOptions = units.map((unit) => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  const subCategoryOptions = filteredSubCategories.map((subCategory) => ({
    value: subCategory.SubCategoryID,
    label: subCategory.SubCategoryName,
  }));

  return (
    <Modal id="add_ingredient_modal" title="Add Ingredient" className="modal modal-bottom sm:modal-middle">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Ingredient Name"
          value={ingredientName}
          onChange={(e) => setIngredientName(e.target.value)}
          required
        />
        <TextInput
          label="Purchase Weight Volume"
          value={purchaseWeightVolume}
          onChange={(e) => setPurchaseWeightVolume(e.target.value)}
          required
        />
        <Select
          label="Purchase Unit"
          value={purchaseUnitId}
          onChange={(e) => setPurchaseUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Select
          label="Sub-Category"
          value={subCategoryId}
          onChange={(e) => setSubCategoryId(e.target.value)}
          required
          options={subCategoryOptions}
          defaultOption="Select a sub-category"
          disabled={!categoryId} // Disable until a category is selected
        />
        <Select
          label="Purchase Weight Unit"
          value={purchaseWeightUnitId}
          onChange={(e) => setPurchaseWeightUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Button>Add Ingredient</Button>
      </form>
    </Modal>
  );
}

export default AddIngredientModal;


==================== C:\Code\recipe-app\client/src\components\AddRecipeBookModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeBookModal() {
  const [bookName, setBookName] = useState('');
  const [authorID, setAuthorID] = useState('');
  const [coverArtURL, setCoverArtURL] = useState('');

  const { authors, createRecipeBook } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const recipeBook = {
      AuthorID: authorID,
      BookName: bookName,
      CoverArtURL: coverArtURL
    };

    try {
      await createRecipeBook(recipeBook);
      document.getElementById('add_recipe_book_modal').close();
    } catch (error) {
      alert('Failed to add book');
    }
  };

  const authorOptions = authors.map(author => ({
    value: author.AuthorID,
    label: author.AuthorName,
  }));

  return (
    <Modal id="add_recipe_book_modal" title="Add Recipe Book">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Book Name"
          value={bookName}
          onChange={(e) => setBookName(e.target.value)}
          required
        />
        <Select
          label="Author"
          value={authorID}
          onChange={(e) => setAuthorID(e.target.value)}
          required
          options={authorOptions}
          defaultOption="Select an author"
        />
        <TextInput
          label="Cover Art URL"
          value={coverArtURL}
          onChange={(e) => setCoverArtURL(e.target.value)}
        />
        <Button>Add Book</Button>
      </form>
    </Modal>
  );
}

export default AddRecipeBookModal;


==================== C:\Code\recipe-app\client/src\components\AddRecipeIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import Fuse from 'fuse.js';
import { useData } from '../context/DataContext';
import AddIngredientModal from './AddIngredientModal';
import Table from './ui/Table';
import Button from './ui/Button';
import Modal from './ui/Modal';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeIngredientModal({ recipeId }) {
  const [selectedIngredientId, setSelectedIngredientId] = useState('');
  const [quantity, setQuantity] = useState('');
  const [selectedUnitId, setSelectedUnitId] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredIngredients, setFilteredIngredients] = useState([]);
  const [defaultUnitId, setDefaultUnitId] = useState('');

  const { ingredients, units, categories, subCategories, createRecipeIngredient } = useData();

  useEffect(() => {
    if (ingredients.length && categories.length && subCategories.length) {
      const updatedIngredients = ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      });
      setFilteredIngredients(updatedIngredients);
    }
  }, [ingredients, categories, subCategories]);

  const handleSearch = (e) => {
    const term = e.target.value;
    setSearchTerm(term);

    if (term === '') {
      setFilteredIngredients(ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      }));
    } else {
      const fuse = new Fuse(filteredIngredients, {
        keys: ['IngredientName', 'CategoryName', 'SubCategoryName'],
        threshold: 0.3, // Adjust the threshold as needed
      });

      const result = fuse.search(term);
      setFilteredIngredients(result.map((r) => r.item));
    }
  };

  const handleAddClick = (ingredientId) => {
    const ingredient = ingredients.find((ing) => ing.IngredientID === ingredientId);
    if (ingredient) {
      setSelectedIngredientId(ingredientId);
      setDefaultUnitId(ingredient.PurchaseUnitID || ''); // Handle missing PurchaseUnitID
      setSelectedUnitId(ingredient.PurchaseUnitID || ''); // Set the default unit id
      document.getElementById('quantity_unit_modal').showModal();
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = {
      RecipeID: recipeId,
      IngredientID: selectedIngredientId,
      Quantity: parseFloat(quantity),
      UnitID: selectedUnitId || defaultUnitId,
    };

    try {
      await createRecipeIngredient(data);
      window.location.reload(); // Refresh the page to show the new ingredient
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add ingredient');
    }
  };

  const handleAddNewIngredient = () => {
    document.getElementById('add_ingredient_modal').showModal();
  };

  const handleNewIngredientAdded = (newIngredient) => {
    if (newIngredient && newIngredient.PurchaseUnitID) {
      setFilteredIngredients((prevIngredients) => [
        ...prevIngredients,
        {
          ...newIngredient,
          CategoryName: '',
          SubCategoryName: '',
        },
      ]);

      // Automatically select the newly added ingredient and open the quantity/unit modal
      setSelectedIngredientId(newIngredient.IngredientID);
      setDefaultUnitId(newIngredient.PurchaseUnitID);
      setSelectedUnitId(newIngredient.PurchaseUnitID);
      setQuantity(''); // Reset the quantity
      document.getElementById('quantity_unit_modal').showModal();
    } else {
      alert('New ingredient does not have a PurchaseUnitID');
    }
  };

  const headers = ['Ingredient', 'Category', 'Sub-Category', 'Action'];
  const data = filteredIngredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientName,
      ingredient.CategoryName,
      ingredient.SubCategoryName,
      <Button
        size="sm"
        variant="primary"
        outline={true}
        onClick={() => handleAddClick(ingredient.IngredientID)}
      >
        Add
      </Button>
    ],
  }));

  const unitOptions = units.map(unit => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  return (
    <div>
      <Modal id="add_recipe_ingredient_modal" title="Add Ingredient to Recipe" wide={true}>
        <div className='flex flex-col gap-4 mb-8'>
          <TextInput
            label="Search Ingredient"
            value={searchTerm}
            onChange={handleSearch}
            placeholder="Type to search ingredients..."
          />

          <Button
            outline={true}
            size='sm'
            onClick={handleAddNewIngredient}
          >Add New Ingredient</Button>
        </div>
        <Table headers={headers} data={data} />
      </Modal>

      <Modal id="quantity_unit_modal" title="Enter Quantity and Unit">
        <form onSubmit={handleSubmit} className="flex gap-4 flex-col mt-4">
          <TextInput
            label="Quantity"
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
            required
          />

          <Select
            label="Unit"
            value={selectedUnitId || defaultUnitId}
            onChange={(e) => setSelectedUnitId(e.target.value)}
            required
            options={unitOptions}
            defaultOption="Select a unit"
          />
          <Button>Add Ingredient</Button>
        </form>
      </Modal>

      <AddIngredientModal onIngredientAdded={handleNewIngredientAdded} />
    </div>
  );
}

export default AddRecipeIngredientModal;


==================== C:\Code\recipe-app\client/src\components\AddRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeModal() {
    const [recipeName, setRecipeName] = useState('');
    const [authorID, setAuthorID] = useState('');
    const [bookID, setBookID] = useState('');
    const [pageNumber, setPageNumber] = useState('');
    const [onlineURL, setOnlineURL] = useState('');
    const [cookTime, setCookTime] = useState('');
    const [difficulty, setDifficulty] = useState('');
    const [type, setType] = useState('');
    const [imageURL, setImageURL] = useState('');
    const [servings, setServings] = useState('');
    const [cuisine, setCuisine] = useState('');
    const [filteredBooks, setFilteredBooks] = useState([]);

    const { authors, recipeBooks, createRecipe } = useData();

    useEffect(() => {
        if (authorID) {
            setFilteredBooks(recipeBooks.filter(book => book.AuthorID === parseInt(authorID)));
        } else {
            setFilteredBooks([]);
        }
    }, [authorID, recipeBooks]);

    const handleAuthorChange = (e) => {
        setAuthorID(e.target.value);
        setBookID(''); // Reset book selection when author changes
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        const recipe = {
            RecipeName: recipeName,
            AuthorID: parseInt(authorID) || null,
            BookID: parseInt(bookID) || null,
            PageNumber: parseInt(pageNumber) || null,
            OnlineURL: onlineURL,
            CookTime: parseInt(cookTime) || null,
            Difficulty: difficulty,
            Type: type,
            ImageURL: imageURL,
            Servings: parseInt(servings) || null,
            Cuisine: cuisine,
        };

        try {
            await createRecipe(recipe);
            document.getElementById('add_recipe_modal').close();
        } catch (error) {
            alert('Failed to add recipe');
        }
    };

    const authorOptions = authors.map(author => ({
        value: author.AuthorID,
        label: author.AuthorName
    }));

    const bookOptions = filteredBooks.map(book => ({
        value: book.BookID,
        label: book.BookName
    }));

    return (
        <Modal id="add_recipe_modal" title="Add Recipe">
            <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
                <TextInput
                    label="Recipe Name"
                    value={recipeName}
                    onChange={(e) => setRecipeName(e.target.value)}
                    required
                />
                <Select
                    label="Author"
                    value={authorID}
                    onChange={handleAuthorChange}
                    required
                    options={authorOptions}
                    defaultOption="Select an author"
                />
                <Select
                    label="Book"
                    value={bookID}
                    onChange={(e) => setBookID(e.target.value)}
                    options={bookOptions}
                    defaultOption="Select a book"
                    disabled={!authorID}
                />
                <TextInput
                    label="Page Number"
                    type="number"
                    value={pageNumber}
                    onChange={(e) => setPageNumber(e.target.value)}
                    disabled={!bookID}
                />
                <TextInput
                    label="Online URL"
                    type="url"
                    value={onlineURL}
                    onChange={(e) => setOnlineURL(e.target.value)}
                />
                <TextInput
                    label="Cook Time (minutes)"
                    type="number"
                    value={cookTime}
                    onChange={(e) => setCookTime(e.target.value)}
                    required
                />
                <TextInput
                    label="Difficulty"
                    value={difficulty}
                    onChange={(e) => setDifficulty(e.target.value)}
                />
                <TextInput
                    label="Type"
                    value={type}
                    onChange={(e) => setType(e.target.value)}
                />
                <TextInput
                    label="Image URL"
                    type="url"
                    value={imageURL}
                    onChange={(e) => setImageURL(e.target.value)}
                />
                <TextInput
                    label="Servings"
                    type="number"
                    value={servings}
                    onChange={(e) => setServings(e.target.value)}
                    required
                />
                <TextInput
                    label="Cuisine"
                    value={cuisine}
                    onChange={(e) => setCuisine(e.target.value)}
                />
                <Button>Add Recipe</Button>
            </form>
        </Modal>
    );
}

export default AddRecipeModal;


==================== C:\Code\recipe-app\client/src\components\AddSubCategoryModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddSubCategoryModal() {
  const [subCategoryName, setSubCategoryName] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const { categories, createSubCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const subCategory = {
      SubCategoryName: subCategoryName,
      CategoryID: categoryId,
    };

    try {
      await createSubCategory(subCategory);
      document.getElementById('add_sub_category_modal').close();
    } catch (error) {
      console.error('Error adding sub-category:', error);
      alert('Failed to add sub-category');
    }
  };

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  return (
    <Modal id="add_sub_category_modal" title="Add Sub-Category">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Sub-Category Name"
          value={subCategoryName}
          onChange={(e) => setSubCategoryName(e.target.value)}
          required
        />        
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Button>Add Sub-Category</Button>
      </form>
    </Modal>
  );
}

export default AddSubCategoryModal;


==================== C:\Code\recipe-app\client/src\components\AuthorTable.jsx ====================

// src/components/AuthorTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import Table from './ui/Table';
import DeleteButton from './ui/DeleteButton';

function AuthorTable() {
  const { authors, deleteAuthor } = useData();

  const handleDelete = async (authorId) => {
    if (window.confirm('Are you sure you want to delete this author?')) {
      await deleteAuthor(authorId);
    }
  };

  const headers = ['#', 'Author Name', 'Actions'];

  const data = authors.map((author, index) => ({
    id: author.AuthorID,
    cells: [
      index + 1,
      author.AuthorName,
      <DeleteButton onClick={() => handleDelete(author.AuthorID)} />      
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default AuthorTable;


==================== C:\Code\recipe-app\client/src\components\CategoryTable.jsx ====================

// src/components/CategoryTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function CategoryTable() {
  const { categories, subCategories, deleteCategory } = useData();

  const handleDelete = async (categoryId) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      await deleteCategory(categoryId);
    }
  };

  const headers = ['ID', 'Category Name', 'Sub-Categories', 'Actions'];

  const data = categories.map((category, index) => {
    const categorySubCategories = subCategories.filter(sub => sub.CategoryID === category.CategoryID).map(sub => sub.SubCategoryName).join(', ');

    return {
      id: category.CategoryID,
      cells: [
        category.CategoryID,
        category.CategoryName,
        categorySubCategories || 'None',
        <DeleteButton onClick={() => handleDelete(category.CategoryID)} />
      ],
    };
  });

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default CategoryTable;


==================== C:\Code\recipe-app\client/src\components\IngredientTable.jsx ====================

// src/components/IngredientTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function IngredientTable() {
  const { ingredients, categories, subCategories, units, deleteIngredient } = useData();

  const handleDelete = async (ingredientId) => {
    if (window.confirm('Are you sure you want to delete this ingredient?')) {
      try {
        await deleteIngredient(ingredientId);
      } catch (error) {
        alert('Failed to delete ingredient');
      }
    }
  };

  const getSubCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    return subCategory ? subCategory.SubCategoryName : 'Unknown';
  };

  const getCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    if (subCategory) {
      const category = categories.find(category => category.CategoryID === subCategory.CategoryID);
      return category ? category.CategoryName : 'Unknown';
    }
    return 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const headers = ['ID', 'Ingredient Name', 'Purchase Weight Volume', 'Purchase Unit', 'Category', 'Subcategory', 'Purchase Weight Unit', 'Actions'];

  const data = ingredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientID,
      ingredient.IngredientName,
      ingredient.PurchaseWeightVolume,
      getUnitName(ingredient.PurchaseUnitID),
      getCategoryName(ingredient.SubCategoryID),
      getSubCategoryName(ingredient.SubCategoryID),
      getUnitName(ingredient.PurchaseWeightUnitID),
      <DeleteButton onClick={() => handleDelete(ingredient.IngredientID)} />
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default IngredientTable;


==================== C:\Code\recipe-app\client/src\components\NavBar.jsx ====================

// src/components/NavBar.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ThemeSwitcher from './ThemeSwitcher';
import { useAuth } from '../context/AuthContext';

const NavBar = () => {
  const { isAuthenticated, logout } = useAuth();

  return (
    <nav className="navbar justify-between bg-base-300">
      <a className="btn btn-ghost text-lg">
        <img alt="Logo" src="../vite.svg" className="w-4" />
        Recipe App
      </a>
      <div className="dropdown dropdown-end sm:hidden">
        <button className="btn btn-ghost">
          <i className="fa-solid fa-bars text-lg"></i>
        </button>

        <ul tabIndex="0" className="dropdown-content menu z-[1] bg-base-200 p-6 rounded-box shadow w-56 gap-2">
          <li><a>About</a></li>
          <li><a>Pricing</a></li>
          <li><a>Blog</a></li>
          <li><a>Contact</a></li>
          <a className="btn btn-sm btn-primary">Log in</a>
        </ul>
      </div>
      <div className="hidden sm:flex gap-2">
        <ThemeSwitcher />       
        {isAuthenticated ? (
          <button
            onClick={logout}
            className="btn btn-primary btn-sm"
          >
            Logout
          </button>
        ) : (
          <>
            <Link to="/register" className="btn btn-ghost btn-sm">Register</Link>
            <Link to="/login" className="btn btn-primary btn-sm">Login</Link>
          </>
        )}
      </div>
    </nav>
  );
};

export default NavBar;


==================== C:\Code\recipe-app\client/src\components\PrivateRoute.jsx ====================

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import SideBar from './SideBar';

const PrivateRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  return (
    <div className="flex grow">     
      <div className="flex flex-col px-8 py-6 grow">
        {children}
      </div>
    </div>
  );
};

export default PrivateRoute;


==================== C:\Code\recipe-app\client/src\components\RecipeBookTable.jsx ====================

// src/components/RecipeBookTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';

function RecipeBookTable() {
  const { recipeBooks, authors, deleteRecipeBook } = useData();

  const handleDelete = async (bookId) => {
    if (window.confirm('Are you sure you want to delete this book?')) {
      try {
        await deleteRecipeBook(bookId);
      } catch (error) {
        alert('Failed to delete book');
      }
    }
  };

  const getAuthorName = (authorId) => {
    const author = authors.find(author => author.AuthorID === authorId);
    return author ? author.AuthorName : 'Unknown';
  };

  const headers = ['#', 'Book Name', 'Author Name', 'Actions'];

  const data = useMemo(() => 
    recipeBooks.map((book, index) => ({
      id: book.BookID,
      cells: [
        index + 1,
        book.BookName,
        getAuthorName(book.AuthorID),
        <DeleteButton onClick={() => handleDelete(book.BookID)} />,
      ],
    })),
    [recipeBooks, authors]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeBookTable;


==================== C:\Code\recipe-app\client/src\components\RecipeTable.jsx ====================

// src/components/RecipeTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function RecipeTable({ onAddIngredients }) {
  const { recipes, ingredients, units, recipeIngredients, deleteRecipe } = useData();

  const handleDelete = async (recipeId) => {
    if (window.confirm('Are you sure you want to delete this recipe?')) {
      try {
        await deleteRecipe(recipeId);
      } catch (error) {
        alert('Failed to delete recipe');
      }
    }
  };

  const getIngredientName = (ingredientId) => {
    const ingredient = ingredients.find(ingredient => ingredient.IngredientID === ingredientId);
    return ingredient ? ingredient.IngredientName : 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const renderIngredients = (recipeId) => {
    const filteredIngredients = recipeIngredients.filter(ri => ri.RecipeID === recipeId);
    return filteredIngredients.map(ingredient => (
      <li key={ingredient.RecipeIngredientID}>
        {ingredient.Quantity} {getUnitName(ingredient.UnitID)} of {getIngredientName(ingredient.IngredientID)}
      </li>
    ));
  };

  const headers = ['#', 'Recipe Name', 'Author ID', 'Ingredients', 'Actions'];

  const data = useMemo(() =>
    recipes.map((recipe, index) => ({
      id: recipe.RecipeID,
      cells: [
        index + 1,
        recipe.RecipeName,
        recipe.AuthorID,
        <ul className='list-disc ml-4'>
          {renderIngredients(recipe.RecipeID)}
        </ul>,
        <div className='flex gap-2'>
          <Button
            size="sm"
            variant="primary"
            outline={true}
            onClick={() => onAddIngredients(recipe.RecipeID)}
          >
            Add Ingredients
          </Button>
          <DeleteButton onClick={() => handleDelete(recipe.RecipeID)} />
        </div>
      ],
    })),
    [recipes, recipeIngredients, ingredients, units]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeTable;


==================== C:\Code\recipe-app\client/src\components\SideBar.jsx ====================

// src/components/SideBar.jsx
import React from "react";
import { NavLink } from "react-router-dom";
import { FaTachometerAlt, FaList, FaSitemap, FaLeaf, FaBook, FaUser, FaUtensils } from "react-icons/fa";

const menuItems = [
  { title: "Dashboard", link: "/", Icon: FaTachometerAlt },
  { title: "Ingredients", isTitle: true },
  { title: "Categories", link: "/manage-categories", Icon: FaList },
  { title: "Sub-categories", link: "/manage-sub-categories", Icon: FaSitemap },
  { title: "Ingredients", link: "/manage-ingredients", Icon: FaLeaf },
  { title: "Recipes", isTitle: true },
  { title: "Recipes", link: "/manage-recipes", Icon: FaUtensils },
  { title: "Authors", link: "/manage-authors", Icon: FaUser },
  { title: "Recipe books", link: "/manage-recipe-books", Icon: FaBook },
];

const MenuItem = ({ item }) => {
  if (item.isTitle) {
    return <li className="menu-title">{item.title}</li>;
  }

  const { Icon } = item;

  return (
    <li>
      <NavLink to={item.link} className={({ isActive }) => (isActive ? "active" : "")}>
        <Icon className="inline mr-2" />
        {item.title}
      </NavLink>
    </li>
  );
};

export default function SideBar() {
  return (
    <aside className="sticky top-0 overflow-y-auto w-60 bg-base-200 p-4 min-w-60">
      <ul className="menu px-0 gap-1">
        {menuItems.map((item, index) => (
          <MenuItem key={index} item={item} />
        ))}
      </ul>
    </aside>
  );
}

==================== C:\Code\recipe-app\client/src\components\SubCategoryTable.jsx ====================

// src/components/SubCategoryTable.jsx
import React, { useState, useMemo } from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function SubCategoryTable() {
  const [selectedCategories, setSelectedCategories] = useState([]);
  const { categories, subCategories, deleteSubCategory } = useData();

  const handleDelete = async (subCategoryId) => {
    if (window.confirm('Are you sure you want to delete this sub-category?')) {
      try {
        await deleteSubCategory(subCategoryId);
      } catch (error) {
        alert('Failed to delete sub-category');
      }
    }
  };

  const getCategoryName = (categoryId) => {
    const category = categories.find(category => category.CategoryID === categoryId);
    return category ? category.CategoryName : 'Unknown';
  };

  const handleCategoryChange = (e) => {
    const selectedValue = parseInt(e.target.value);
    setSelectedCategories(prevSelected =>
      prevSelected.includes(selectedValue)
        ? prevSelected.filter(id => id !== selectedValue)
        : [...prevSelected, selectedValue]
    );
  };

  const filteredSubCategories = useMemo(() => 
    selectedCategories.length > 0
      ? subCategories.filter(subCategory => selectedCategories.includes(subCategory.CategoryID))
      : subCategories,
    [subCategories, selectedCategories]
  );

  const headers = ['#', 'Sub-Category Name', 'Category Name', 'Actions'];

  const data = useMemo(() =>
    filteredSubCategories.map((subCategory, index) => ({
      id: subCategory.SubCategoryID,
      cells: [
        index + 1,
        subCategory.SubCategoryName,
        getCategoryName(subCategory.CategoryID),
        <DeleteButton key={subCategory.SubCategoryID} onClick={() => handleDelete(subCategory.SubCategoryID)} />
      ],
    })),
    [filteredSubCategories, categories]
  );

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center mb-4">
        <label className="mr-2">Filter by Category:</label>
        <select
          className="select select-bordered"
          value=""
          onChange={handleCategoryChange}
        >
          <option value="" disabled>Select Categories</option>
          {categories.map(category => (
            <option
              key={category.CategoryID}
              value={category.CategoryID}
              disabled={selectedCategories.includes(category.CategoryID)}
            >
              {category.CategoryName}
            </option>
          ))}
        </select>
      </div>
      <div className="mb-4">
        {selectedCategories.map(categoryId => (
          <div key={categoryId} className="badge badge-primary mr-2">
            {getCategoryName(categoryId)}
            <button
              type="button"
              className="ml-1"
              onClick={() => setSelectedCategories(selectedCategories.filter(id => id !== categoryId))}
            >
              ✕
            </button>
          </div>
        ))}
      </div>
      <Table headers={headers} data={data} />
    </div>
  );
}

export default SubCategoryTable;


==================== C:\Code\recipe-app\client/src\components\ThemeSwitcher.jsx ====================

import React, { useEffect, useState } from 'react';

const ThemeSwitcher = () => {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
      setTheme(savedTheme);
    }
  }, []);

  const handleThemeChange = (event) => {
    const selectedTheme = event.target.value;
    document.documentElement.setAttribute('data-theme', selectedTheme);
    localStorage.setItem('theme', selectedTheme);
    setTheme(selectedTheme);
  };

  return (   
    <div className="dropdown dropdown-end">
      <select className="btn btn-ghost btn-sm" value={theme} onChange={handleThemeChange}>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
        <option value="cupcake">Cupcake</option>
        <option value="bumblebee">Bumblebee</option>
        <option value="emerald">Emerald</option>
        <option value="corporate">Corporate</option>
        <option value="synthwave">Synthwave</option>
        <option value="retro">Retro</option>
        <option value="cyberpunk">Cyberpunk</option>
        <option value="valentine">Valentine</option>
        <option value="halloween">Halloween</option>
        <option value="garden">Garden</option>
        <option value="forest">Forest</option>
        <option value="aqua">Aqua</option>
        <option value="lofi">Lofi</option>
        <option value="pastel">Pastel</option>
        <option value="fantasy">Fantasy</option>
        <option value="wireframe">Wireframe</option>
        <option value="black">Black</option>
        <option value="luxury">Luxury</option>
        <option value="dracula">Dracula</option>
        <option value="cmyk">CMYK</option>
        <option value="autumn">Autumn</option>
        <option value="business">Business</option>
        <option value="acid">Acid</option>
        <option value="lemonade">Lemonade</option>
        <option value="night">Night</option>
        <option value="coffee">Coffee</option>
        <option value="winter">Winter</option>
      </select>
    </div>
  );
};

export default ThemeSwitcher;


==================== C:\Code\recipe-app\client/src\components\ui\Button.jsx ====================

// src/components/ui/Button.jsx
import React from 'react';

const Button = ({ type, variant = 'primary', size = 'md', outline = false, block = false, circle = false, square = false, className = '', onClick, children }) => {
  const baseClass = 'btn';
  const variantClass = `btn-${variant}`;
  const sizeClass = `btn-${size}`;
  const outlineClass = outline ? 'btn-outline' : '';
  const blockClass = block ? 'btn-block' : '';
  const circleClass = circle ? 'btn-circle' : '';
  const squareClass = square ? 'btn-square' : '';

  const classes = `${baseClass} ${variantClass} ${sizeClass} ${outlineClass} ${blockClass} ${circleClass} ${squareClass} ${className}`;

  return (
    <button type={type} className={classes} onClick={onClick}>
      {children}
    </button>
  );
};

export default Button;


==================== C:\Code\recipe-app\client/src\components\ui\Card.jsx ====================

// src/components/ui/Card.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import Button from './Button';

const Card = ({ title, count, link }) => {
    return (
        <div className="card bg-base-100 w-96 shadow-xl">
            <div className="card-body">
                <h2 className="card-title">{title}</h2>
                <p className="text-2xl font-bold">{count}</p>
                <div className="card-actions justify-end">
                    <Link to={link}>
                        <Button
                            variant='secondary'
                            outline={true}
                            >
                            Manage
                        </Button>
                    </Link>
                </div>
            </div>
        </div>
    );
};

export default Card;


==================== C:\Code\recipe-app\client/src\components\ui\DeleteButton.jsx ====================

// src/components/ui/DeleteButton.jsx
import React from 'react';
import Button from './Button';

const DeleteButton = ({ onClick }) => (
  <Button
    size="sm"
    variant="error"
    outline={true}
    onClick={onClick}
  >
    Delete
  </Button>
);

export default DeleteButton;


==================== C:\Code\recipe-app\client/src\components\ui\Modal.jsx ====================

import React from 'react';

const Modal = ({ id, title, children, wide }) => {
    const modalBoxClass = wide ? 'modal-box w-11/12 max-w-5xl' : 'modal-box';
    const modalClass = wide ? 'modal' : 'modal modal-bottom sm:modal-middle';

    return (
        <dialog id={id} className={modalClass}>
            <div className={modalBoxClass}>
                <form method="dialog">
                    <button className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <h3 className="font-bold text-lg">{title}</h3>
                {children}
            </div>
        </dialog>
    );
};

export default Modal;


==================== C:\Code\recipe-app\client/src\components\ui\Select.jsx ====================

// src/components/ui/Select.jsx
import React from 'react';

const Select = ({ label, value, onChange, required, options, defaultOption, disabled }) => {
  return (
    <label className="form-control">
      <div className="label">
        <span className="label-text">{label}</span>
      </div>
      <select
        className="select select-bordered"
        value={value}
        onChange={onChange}
        required={required}
        disabled={disabled}
      >
        <option value="" disabled>{defaultOption}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
    </label>
  );
};

export default Select;


==================== C:\Code\recipe-app\client/src\components\ui\Table.jsx ====================

// src/components/ui/Table.jsx
import React, { useState } from 'react';
import { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';

const Table = ({ headers, data }) => {
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'ascending' });

  const sortedData = React.useMemo(() => {
    let sortableData = [...data];
    if (sortConfig.key) {
      sortableData.sort((a, b) => {
        const aKey = a.cells[headers.indexOf(sortConfig.key)];
        const bKey = b.cells[headers.indexOf(sortConfig.key)];

        if (aKey < bKey) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aKey > bKey) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableData;
  }, [data, sortConfig, headers]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (header) => {
    if (sortConfig.key === header) {
      return sortConfig.direction === 'ascending' ? <FaSortUp /> : <FaSortDown />;
    }
    return <FaSort />;
  };

  return (
    <div className="overflow-x-auto">
      <table className="table table-zebra">
        <thead>
          <tr>
            {headers.map((header, index) => (
              <th key={index} onClick={() => requestSort(header)} className="cursor-pointer">
                <div className="flex items-center">
                  {header}
                  <span className="ml-2">{getSortIcon(header)}</span>
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row, rowIndex) => (
            <tr key={row.id || rowIndex}>
              {row.cells.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Table;


==================== C:\Code\recipe-app\client/src\components\ui\TextInput.jsx ====================

// src/components/ui/TextInput.jsx
import React from 'react';

const TextInput = ({ label, type = 'text', value, onChange, required = false, placeholder = '', className = 'input input-bordered' }) => {
  return (
    <label className="form-control">
      {label && (
        <div className="label">
          <span className="label-text">{label}</span>
        </div>
      )}
      <input
        type={type}
        className={className}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
      />
    </label>
  );
};

export default TextInput;


==================== C:\Code\recipe-app\client/src\context\AuthContext.jsx ====================

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const storedAuth = localStorage.getItem('isAuthenticated');
    if (storedAuth === 'true') {
      setIsAuthenticated(true);
    }
    setLoading(false); // Indicate that the auth status has been checked
  }, []);

  const login = async (username, password) => {
    const response = await fetch('http://localhost:8000/api/users/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Password: password }),
    });

    if (response.ok) {
      setIsAuthenticated(true);
      localStorage.setItem('isAuthenticated', 'true');
      navigate('/');
    } else {
      alert('Login failed');
    }
  };

  const logout = () => {
    setIsAuthenticated(false);
    localStorage.removeItem('isAuthenticated');
    navigate('/login');
  };

  if (loading) {
    return <div>Loading...</div>; // Display a loading message or spinner while checking auth status
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


==================== C:\Code\recipe-app\client/src\context\DataContext.jsx ====================

// src/context/DataContext.jsx

import React, { createContext, useContext, useEffect, useState } from 'react';
import * as apiService from '../services/apiService';

const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [authors, setAuthors] = useState([]);
  const [recipeBooks, setRecipeBooks] = useState([]);
  const [recipes, setRecipes] = useState([]);
  const [units, setUnits] = useState([]);
  const [recipeIngredients, setRecipeIngredients] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [
          categoriesData,
          subCategoriesData,
          ingredientsData,
          authorsData,
          recipeBooksData,
          recipesData,
          unitsData,
          recipeIngredientsData,
        ] = await Promise.all([
          apiService.getCategories(),
          apiService.getSubCategories(),
          apiService.getIngredients(),
          apiService.getAuthors(),
          apiService.getRecipeBooks(),
          apiService.getRecipes(),
          apiService.getUnits(),
          apiService.getRecipeIngredients(),
        ]);

        setCategories(categoriesData);
        setSubCategories(subCategoriesData);
        setIngredients(ingredientsData);
        setAuthors(authorsData);
        setRecipeBooks(recipeBooksData);
        setRecipes(recipesData);
        setUnits(unitsData);
        setRecipeIngredients(recipeIngredientsData);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  // Categories CRUD
  const createCategory = async (categoryName) => {
    const newCategory = await apiService.addCategory(categoryName);
    setCategories([...categories, newCategory]);
  };

  const updateCategory = async (categoryId, categoryName) => {
    await apiService.updateCategory(categoryId, categoryName);
    setCategories(categories.map(cat => (cat.CategoryID === categoryId ? { ...cat, CategoryName: categoryName } : cat)));
  };

  const deleteCategory = async (categoryId) => {
    await apiService.deleteCategory(categoryId);
    setCategories(categories.filter(cat => cat.CategoryID !== categoryId));
  };

  // SubCategories CRUD
  const createSubCategory = async (subCategory) => {
    const newSubCategory = await apiService.addSubCategory(subCategory);
    setSubCategories([...subCategories, newSubCategory]);
  };

  const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    await apiService.updateSubCategory(subCategoryId, subCategoryName, categoryId);
    setSubCategories(subCategories.map(sub => (sub.SubCategoryID === subCategoryId ? { ...sub, SubCategoryName: subCategoryName, CategoryID: categoryId } : sub)));
  };

  const deleteSubCategory = async (subCategoryId) => {
    await apiService.deleteSubCategory(subCategoryId);
    setSubCategories(subCategories.filter(sub => sub.SubCategoryID !== subCategoryId));
  };

  // Ingredients CRUD
  const createIngredient = async (ingredient) => {
    const newIngredient = await apiService.addIngredient(ingredient);
    setIngredients([...ingredients, newIngredient]);
  };

  const updateIngredient = async (ingredientId, ingredient) => {
    await apiService.updateIngredient(ingredientId, ingredient);
    setIngredients(ingredients.map(ing => (ing.IngredientID === ingredientId ? { ...ing, ...ingredient } : ing)));
  };

  const deleteIngredient = async (ingredientId) => {
    await apiService.deleteIngredient(ingredientId);
    setIngredients(ingredients.filter(ing => ing.IngredientID !== ingredientId));
  };

  // Authors CRUD
  const createAuthor = async (authorName, authorImageURL) => {
    const newAuthor = await apiService.addAuthor(authorName, authorImageURL);
    setAuthors([...authors, newAuthor]);
  };

  const updateAuthor = async (authorId, author) => {
    await apiService.updateAuthor(authorId, author);
    setAuthors(authors.map(auth => (auth.AuthorID === authorId ? { ...auth, ...author } : auth)));
  };

  const deleteAuthor = async (authorId) => {
    await apiService.deleteAuthor(authorId);
    setAuthors(authors.filter(auth => auth.AuthorID !== authorId));
  };

  // Recipe Books CRUD
  const createRecipeBook = async (recipeBook) => {
    const newRecipeBook = await apiService.addRecipeBook(recipeBook);
    setRecipeBooks([...recipeBooks, newRecipeBook]);
  };

  const updateRecipeBook = async (recipeBookId, recipeBook) => {
    await apiService.updateRecipeBook(recipeBookId, recipeBook);
    setRecipeBooks(recipeBooks.map(book => (book.BookID === recipeBookId ? { ...book, ...recipeBook } : book)));
  };

  const deleteRecipeBook = async (recipeBookId) => {
    await apiService.deleteRecipeBook(recipeBookId);
    setRecipeBooks(recipeBooks.filter(book => book.BookID !== recipeBookId));
  };

  // Recipes CRUD
  const createRecipe = async (recipe) => {
    const newRecipe = await apiService.addRecipe(recipe);
    setRecipes([...recipes, newRecipe]);
  };

  const updateRecipe = async (recipeId, recipe) => {
    await apiService.updateRecipe(recipeId, recipe);
    setRecipes(recipes.map(rec => (rec.RecipeID === recipeId ? { ...rec, ...recipe } : rec)));
  };

  const deleteRecipe = async (recipeId) => {
    await apiService.deleteRecipe(recipeId);
    setRecipes(recipes.filter(rec => rec.RecipeID !== recipeId));
  };

  const createRecipeIngredient = async (recipeIngredient) => {
    const newRecipeIngredient = await apiService.addRecipeIngredient(recipeIngredient);
    setRecipeIngredients([...recipeIngredients, newRecipeIngredient]);
  };

  return (
    <DataContext.Provider
      value={{
        categories, createCategory, updateCategory, deleteCategory,
        subCategories, createSubCategory, updateSubCategory, deleteSubCategory,
        ingredients, createIngredient, updateIngredient, deleteIngredient,
        authors, createAuthor, updateAuthor, deleteAuthor,
        recipeBooks, createRecipeBook, updateRecipeBook, deleteRecipeBook,
        recipes, createRecipe, updateRecipe, deleteRecipe,
        units, recipeIngredients, createRecipeIngredient
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => useContext(DataContext);


==================== C:\Code\recipe-app\client/src\pages\Home.jsx ====================

// src/pages/Home.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';

function Home() {
  const { categories, subCategories, ingredients, authors, recipeBooks, recipes } = useData();

  const items = [
    { name: 'Categories', count: categories.length, link: '/manage-categories' },
    { name: 'Subcategories', count: subCategories.length, link: '/manage-sub-categories' },
    { name: 'Ingredients', count: ingredients.length, link: '/manage-ingredients' },
    { name: 'Authors', count: authors.length, link: '/manage-authors' },
    { name: 'Recipe Books', count: recipeBooks.length, link: '/manage-recipe-books' },
    { name: 'Recipes', count: recipes.length, link: '/manage-recipes' },
  ];

  return (
    <div className="flex flex-wrap gap-4 p-6">
      {items.map((item, index) => (
        <Card key={index} title={item.name} count={item.count} link={item.link} />
      ))}
    </div>
  );
}

export default Home;


==================== C:\Code\recipe-app\client/src\pages\Login.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import TextInput from '../components/ui/TextInput';
import Button from '../components/ui/Button';

function Login() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const { login } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        await login(username, password);
    };

    return (
        <div className="flex items-start p-8 justify-center w-full">
            <div className="flex flex-col w-96 rounded-box bg-base-200 p-6 gap-4">
                <h1 className="text-3xl font-bold self-center">Log in</h1>
                {/* <span className="self-center flex gap-2">
                    Don't have an account?
                    <a className="link link-secondary" onClick={() => navigate('/register')}>Register</a>
                </span>
                <a className="btn btn-neutral">
                    <i className="fa-brands fa-google text-primary"></i>
                    Log in with Google
                </a>
                <div className="divider">OR</div> */}
                <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
                    <TextInput
                        label="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                    />
                    <label className="form-control w-full">
                        <div className="label">
                            <span className="label-text">Password</span>
                            <a className="label-text link link-accent">Forgot password?</a>
                        </div>
                        <TextInput
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </label>
                    <div className="form-control">
                        <label className="cursor-pointer label self-start gap-2">
                            <input type="checkbox" className="checkbox" />
                            <span className="label-text">Remember me</span>
                        </label>
                    </div>
                    <Button type="submit">Log in</Button>
                </form>
            </div>
        </div>
    );
}

export default Login;


==================== C:\Code\recipe-app\client/src\pages\ManageAuthors.jsx ====================

// src/pages/ManageAuthors.jsx
import React from 'react';
import AuthorTable from '../components/AuthorTable';
import AddAuthorModal from '../components/AddAuthorModal';

function ManageAuthors() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Authors</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_author_modal').showModal()}>Add Author</button>
      </div>
      <AuthorTable />
      <AddAuthorModal />
    </div>
  );
}

export default ManageAuthors;


==================== C:\Code\recipe-app\client/src\pages\ManageCategories.jsx ====================

// src/pages/ManageCategories.jsx
import React from 'react';
import CategoryTable from '../components/CategoryTable';
import AddCategoryModal from '../components/AddCategoryModal';

function ManageCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_category_modal').showModal()}>Add Category</button>
      </div>
      <CategoryTable />
      <AddCategoryModal />
    </div>
  );
}

export default ManageCategories;


==================== C:\Code\recipe-app\client/src\pages\ManageIngredients.jsx ====================

// src/pages/ManageIngredients.jsx
import React from 'react';
import IngredientTable from '../components/IngredientTable';
import AddIngredientModal from '../components/AddIngredientModal';

function ManageIngredients() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Ingredients</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_ingredient_modal').showModal()}>Add Ingredient</button>
      </div>
      <IngredientTable />
      <AddIngredientModal />
    </div>
  );
}

export default ManageIngredients;


==================== C:\Code\recipe-app\client/src\pages\ManageRecipeBooks.jsx ====================

// src/pages/ManageRecipeBooks.jsx
import React from 'react';
import RecipeBookTable from '../components/RecipeBookTable';
import AddRecipeBookModal from '../components/AddRecipeBookModal';

function ManageRecipeBooks() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipe Books</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_recipe_book_modal').showModal()}>Add Recipe Book</button>
      </div>
      <RecipeBookTable />
      <AddRecipeBookModal />
    </div>
  );
}

export default ManageRecipeBooks;


==================== C:\Code\recipe-app\client/src\pages\ManageRecipes.jsx ====================

// src/pages/ManageRecipes.jsx
import React, { useState } from 'react';
import RecipeTable from '../components/RecipeTable';
import AddRecipeModal from '../components/AddRecipeModal';
import AddRecipeIngredientModal from '../components/AddRecipeIngredientModal';
import Button from '../components/ui/Button';

function ManageRecipes() {
  const [selectedRecipeId, setSelectedRecipeId] = useState(null);

  const handleAddIngredients = (recipeId) => {
    setSelectedRecipeId(recipeId);
    document.getElementById('add_recipe_ingredient_modal').showModal();
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipes</h1>
      <div>
        <Button
          size='sm'
          variant='secondary'
          outline={true}
          onClick={() => document.getElementById('add_recipe_modal').showModal()}
        >
          Add Recipe
        </Button>       
      </div>
      <RecipeTable onAddIngredients={handleAddIngredients} />
      <AddRecipeModal />
      <AddRecipeIngredientModal recipeId={selectedRecipeId} />
    </div>
  );
}

export default ManageRecipes;


==================== C:\Code\recipe-app\client/src\pages\ManageSubCategories.jsx ====================

// src/pages/ManageSubCategories.jsx
import React from 'react';
import SubCategoryTable from '../components/SubCategoryTable';
import AddSubCategoryModal from '../components/AddSubCategoryModal';

function ManageSubCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Sub-Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_sub_category_modal').showModal()}>Add Sub-Category</button>
      </div>
      <SubCategoryTable />
      <AddSubCategoryModal />
    </div>
  );
}

export default ManageSubCategories;


==================== C:\Code\recipe-app\client/src\pages\Register.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';

function Register() {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await fetch('http://localhost:8000/api/users/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Email: email, Password: password }),
    });

    if (response.ok) {
      await login(username, password);
    } else {
      alert('Registration failed');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="p-8 bg-white rounded shadow-md w-96">
        <h2 className="mb-4 text-2xl font-bold text-center">Register</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block mb-1">Username</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <button type="submit" className="w-full py-2 text-white bg-green-500 rounded hover:bg-green-600">
            Register
          </button>
        </form>
      </div>
    </div>
  );
}

export default Register;


==================== C:\Code\recipe-app\client/src\services\apiService.js ====================

// src/services/apiService.js
import cache from '../utils/cache';

const API_BASE_URL = 'http://localhost:8000/api';

const fetchData = async (endpoint, options = {}, useCache = true) => {
    const cacheKey = endpoint;

    if (useCache) {
        const cachedData = cache.get(cacheKey);
        if (cachedData) {
            return cachedData;
        }
    }

    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        headers: { 'Content-Type': 'application/json' },
        ...options,
    });
    if (!response.ok) {
        throw new Error('Failed to fetch data');
    }
    const data = await response.json();

    if (useCache) {
        cache.set(cacheKey, data);
    }

    return data;
};

// Categories
export const getCategories = () => fetchData('/ingredient-categories/');
export const addCategory = async (categoryName) => {
    const newCategory = await fetchData('/ingredient-categories/', {
        method: 'POST',
        body: JSON.stringify({ CategoryName: categoryName }),
    }, false);
    cache.invalidate('/ingredient-categories/');
    return newCategory;
};
export const updateCategory = async (categoryId, categoryName) => {
    const updatedCategory = await fetchData(`/ingredient-categories/${categoryId}`, {
        method: 'PUT',
        body: JSON.stringify({ CategoryName: categoryName }),
    }, false);
    cache.invalidate('/ingredient-categories/');
    return updatedCategory;
};
export const deleteCategory = async (categoryId) => {
    await fetchData(`/ingredient-categories/${categoryId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/ingredient-categories/');
};

// SubCategories
export const getSubCategories = () => fetchData('/ingredient-sub-categories/');
export const addSubCategory = async (subCategory) => {
    const newSubCategory = await fetchData('/ingredient-sub-categories/', {
        method: 'POST',
        body: JSON.stringify(subCategory),
    }, false);
    cache.invalidate('/ingredient-sub-categories/');
    return newSubCategory;
};
export const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    const updatedSubCategory = await fetchData(`/ingredient-sub-categories/${subCategoryId}`, {
        method: 'PUT',
        body: JSON.stringify({ SubCategoryName: subCategoryName, CategoryID: categoryId }),
    }, false);
    cache.invalidate('/ingredient-sub-categories/');
    return updatedSubCategory;
};
export const deleteSubCategory = async (subCategoryId) => {
    await fetchData(`/ingredient-sub-categories/${subCategoryId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/ingredient-sub-categories/');
};

// Ingredients
export const getIngredients = () => fetchData('/ingredients/');
export const addIngredient = async (ingredient) => {
    const newIngredient = await fetchData('/ingredients/', {
        method: 'POST',
        body: JSON.stringify(ingredient),
    }, false);
    cache.invalidate('/ingredients/');
    return newIngredient;
};
export const updateIngredient = async (ingredientId, ingredient) => {
    const updatedIngredient = await fetchData(`/ingredients/${ingredientId}`, {
        method: 'PUT',
        body: JSON.stringify(ingredient),
    }, false);
    cache.invalidate('/ingredients/');
    return updatedIngredient;
};
export const deleteIngredient = async (ingredientId) => {
    await fetchData(`/ingredients/${ingredientId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/ingredients/');
};

// Authors
export const getAuthors = () => fetchData('/recipe-authors/');
export const addAuthor = async (authorName, authorImageURL) => {
    const newAuthor = await fetchData('/recipe-authors/', {
        method: 'POST',
        body: JSON.stringify({ AuthorName: authorName, AuthorImageURL: authorImageURL }),
    }, false);
    cache.invalidate('/recipe-authors/');
    return newAuthor;
};
export const updateAuthor = async (authorId, author) => {
    const updatedAuthor = await fetchData(`/recipe-authors/${authorId}`, {
        method: 'PUT',
        body: JSON.stringify(author),
    }, false);
    cache.invalidate('/recipe-authors/');
    return updatedAuthor;
};
export const deleteAuthor = async (authorId) => {
    await fetchData(`/recipe-authors/${authorId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/recipe-authors/');
};

// Recipe Books
export const getRecipeBooks = () => fetchData('/recipe-books/');
export const addRecipeBook = async (recipeBook) => {
    const newRecipeBook = await fetchData('/recipe-books/', {
        method: 'POST',
        body: JSON.stringify(recipeBook),
    }, false);
    cache.invalidate('/recipe-books/');
    return newRecipeBook;
};
export const updateRecipeBook = async (recipeBookId, recipeBook) => {
    const updatedRecipeBook = await fetchData(`/recipe-books/${recipeBookId}`, {
        method: 'PUT',
        body: JSON.stringify(recipeBook),
    }, false);
    cache.invalidate('/recipe-books/');
    return updatedRecipeBook;
};
export const deleteRecipeBook = async (recipeBookId) => {
    await fetchData(`/recipe-books/${recipeBookId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/recipe-books/');
};

// Recipes
export const getRecipes = () => fetchData('/recipes/');
export const addRecipe = async (recipe) => {
    const newRecipe = await fetchData('/recipes/', {
        method: 'POST',
        body: JSON.stringify(recipe),
    }, false);
    cache.invalidate('/recipes/');
    return newRecipe;
};
export const updateRecipe = async (recipeId, recipe) => {
    const updatedRecipe = await fetchData(`/recipes/${recipeId}`, {
        method: 'PUT',
        body: JSON.stringify(recipe),
    }, false);
    cache.invalidate('/recipes/');
    return updatedRecipe;
};
export const deleteRecipe = async (recipeId) => {
    await fetchData(`/recipes/${recipeId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/recipes/');
};

// Units
export const getUnits = () => fetchData('/units/');

// Recipe Ingredients
export const getRecipeIngredients = () => fetchData('/recipe-ingredients/');

export const addRecipeIngredient = async (recipeIngredient) => {
  const newRecipeIngredient = await fetchData('/recipe-ingredients/', {
    method: 'POST',
    body: JSON.stringify(recipeIngredient),
  }, false);
  cache.invalidate('/recipe-ingredients/');
  return newRecipeIngredient;
};

==================== C:\Code\recipe-app\client/src\utils\cache.js ====================

// src/utils/cache.js

class Cache {
    constructor() {
      this.cache = {};
    }
  
    set(key, data) {
      this.cache[key] = {
        data,
        timestamp: new Date().getTime(),
      };
    }
  
    get(key, expiryTime = 180000) { // default expiry time is 180 seconds
      const cachedItem = this.cache[key];
      if (cachedItem && (new Date().getTime() - cachedItem.timestamp < expiryTime)) {
        return cachedItem.data;
      }
      return null;
    }
  
    invalidate(key) {
      delete this.cache[key];
    }
  }
  
  const cache = new Cache();
  export default cache;
  

==================== C:\Code\recipe-app\create_db.py ====================

from sqlalchemy import create_engine, Column, Integer, String, Float, Text, ForeignKey, Date, Boolean, TIMESTAMP, CheckConstraint
from sqlalchemy.orm import relationship, sessionmaker, declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = 'Users'
    UserID = Column(Integer, primary_key=True, autoincrement=True)
    Username = Column(String, nullable=False, unique=True)
    PasswordHash = Column(String, nullable=False)
    Email = Column(String, nullable=False, unique=True)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class IngredientCategory(Base):
    __tablename__ = 'IngredientCategories'
    CategoryID = Column(Integer, primary_key=True, autoincrement=True)
    CategoryName = Column(String, nullable=False, unique=True)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class IngredientSubCategory(Base):
    __tablename__ = 'IngredientSubCategories'
    SubCategoryID = Column(Integer, primary_key=True, autoincrement=True)
    CategoryID = Column(Integer, ForeignKey('IngredientCategories.CategoryID'), nullable=False)
    SubCategoryName = Column(String, nullable=False)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class Unit(Base):
    __tablename__ = 'Units'
    UnitID = Column(Integer, primary_key=True, autoincrement=True)
    UnitName = Column(String, nullable=False, unique=True)
    Abbreviation = Column(String, nullable=False, unique=True)

class UnitConversion(Base):
    __tablename__ = 'UnitConversions'
    FromUnitID = Column(Integer, ForeignKey('Units.UnitID'), primary_key=True)
    ToUnitID = Column(Integer, ForeignKey('Units.UnitID'), primary_key=True)
    ConversionFactor = Column(Float, nullable=False)

class Ingredient(Base):
    __tablename__ = 'Ingredients'
    IngredientID = Column(Integer, primary_key=True, autoincrement=True)
    SubCategoryID = Column(Integer, ForeignKey('IngredientSubCategories.SubCategoryID'), nullable=False)
    IngredientName = Column(String, nullable=False)
    PurchaseUnitID = Column(Integer, ForeignKey('Units.UnitID'))
    PurchaseWeightVolume = Column(Float)
    PurchaseWeightUnitID = Column(Integer, ForeignKey('Units.UnitID'))
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class RecipeAuthor(Base):
    __tablename__ = 'RecipeAuthors'
    AuthorID = Column(Integer, primary_key=True, autoincrement=True)
    AuthorName = Column(String, nullable=False)
    AuthorImageURL = Column(String)

class RecipeBook(Base):
    __tablename__ = 'RecipeBooks'
    BookID = Column(Integer, primary_key=True, autoincrement=True)
    AuthorID = Column(Integer, ForeignKey('RecipeAuthors.AuthorID'), nullable=False)
    BookName = Column(String, nullable=False)
    CoverArtURL = Column(String)

class Recipe(Base):
    __tablename__ = 'Recipes'
    RecipeID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'))
    RecipeName = Column(String, nullable=False)
    AuthorID = Column(Integer, ForeignKey('RecipeAuthors.AuthorID'))
    BookID = Column(Integer, ForeignKey('RecipeBooks.BookID'))
    PageNumber = Column(Integer)
    OnlineURL = Column(String)
    CookTime = Column(Integer)
    Difficulty = Column(String)
    Type = Column(String)
    ImageURL = Column(String)
    Servings = Column(Integer)
    Cuisine = Column(String)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class RecipeStep(Base):
    __tablename__ = 'RecipeSteps'
    StepID = Column(Integer, primary_key=True, autoincrement=True)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    StepNumber = Column(Integer, nullable=False)
    Description = Column(Text, nullable=False)

class RecipeIngredientSection(Base):
    __tablename__ = 'RecipeIngredientSections'
    SectionID = Column(Integer, primary_key=True, autoincrement=True)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    SectionName = Column(String, nullable=False)

class RecipeIngredient(Base):
    __tablename__ = 'RecipeIngredients'
    RecipeIngredientID = Column(Integer, primary_key=True, autoincrement=True)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    IngredientID = Column(Integer, ForeignKey('Ingredients.IngredientID'), nullable=False)
    SectionID = Column(Integer, ForeignKey('RecipeIngredientSections.SectionID'))
    Quantity = Column(Float)
    UnitID = Column(Integer, ForeignKey('Units.UnitID'))

class MealPlan(Base):
    __tablename__ = 'MealPlans'
    MealPlanID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'), nullable=False)
    PlanName = Column(String)
    StartDate = Column(Date)
    EndDate = Column(Date)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class MealPlanRecipe(Base):
    __tablename__ = 'MealPlanRecipes'
    MealPlanRecipeID = Column(Integer, primary_key=True, autoincrement=True)
    MealPlanID = Column(Integer, ForeignKey('MealPlans.MealPlanID'), nullable=False)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    MealType = Column(String)
    Date = Column(Date, nullable=False)

class ShoppingList(Base):
    __tablename__ = 'ShoppingLists'
    ShoppingListID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'), nullable=False)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class ShoppingListIngredient(Base):
    __tablename__ = 'ShoppingListIngredients'
    ShoppingListIngredientID = Column(Integer, primary_key=True, autoincrement=True)
    ShoppingListID = Column(Integer, ForeignKey('ShoppingLists.ShoppingListID'), nullable=False)
    MealPlanRecipeID = Column(Integer, ForeignKey('MealPlanRecipes.MealPlanRecipeID'))
    IngredientID = Column(Integer, ForeignKey('Ingredients.IngredientID'), nullable=False)
    Quantity = Column(Float)
    UnitID = Column(Integer, ForeignKey('Units.UnitID'))
    IsManual = Column(Boolean, default=False)
    AlreadyHave = Column(Boolean, default=False)
    Purchased = Column(Boolean, default=False)

class Tag(Base):
    __tablename__ = 'Tags'
    TagID = Column(Integer, primary_key=True, autoincrement=True)
    TagName = Column(String, nullable=False, unique=True)

class RecipeTag(Base):
    __tablename__ = 'RecipeTags'
    RecipeTagID = Column(Integer, primary_key=True, autoincrement=True)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    TagID = Column(Integer, ForeignKey('Tags.TagID'), nullable=False)

class UserFavorite(Base):
    __tablename__ = 'UserFavorites'
    FavoriteID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'), nullable=False)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class RecipeReview(Base):
    __tablename__ = 'RecipeReviews'
    ReviewID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'), nullable=False)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    Rating = Column(Float, nullable=False)
    ReviewText = Column(Text)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

    __table_args__ = (
        CheckConstraint('Rating >= 0.5 AND Rating <= 5', name='check_rating_range'),
    )

# Define your database URI (in this case, a SQLite database)
engine = create_engine('sqlite:///mydatabase2.db')

# Create all tables
Base.metadata.create_all(engine)

# Optional: Create a session to interact with the database
Session = sessionmaker(bind=engine)
session = Session()


==================== C:\Code\recipe-app\frontend.py ====================

import os
import re

BASE_PATH = 'client/src'

def list_files_and_dirs(path):
    """List all files and directories in the given path."""
    items = os.listdir(path)
    files = [item for item in items if os.path.isfile(os.path.join(path, item))]
    dirs = [item for item in items if os.path.isdir(os.path.join(path, item))]
    return files, dirs

def display_menu(files, dirs):
    """Display a menu of files and directories."""
    for i, dir_name in enumerate(dirs):
        print(f"{i + 1}. [DIR] {dir_name}")
    for i, file_name in enumerate(files):
        print(f"{i + 1 + len(dirs)}. {file_name}")

def get_choice(files, dirs):
    """Get the user's choice from the menu."""
    while True:
        try:
            choice = int(input("\nEnter the number of your choice: ")) - 1
            if 0 <= choice < len(dirs):
                return 'DIR', dirs[choice]
            elif len(dirs) <= choice < len(files) + len(dirs):
                return 'FILE', files[choice - len(dirs)]
            else:
                print("Invalid choice. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def navigate_to_file():
    """Navigate through directories to select a file."""
    current_path = BASE_PATH

    while True:
        print(f"\nCurrent path: {current_path}")
        files, dirs = list_files_and_dirs(current_path)
        display_menu(files, dirs)

        choice_type, choice_name = get_choice(files, dirs)

        if choice_type == 'DIR':
            current_path = os.path.join(current_path, choice_name)
        elif choice_type == 'FILE':
            return os.path.join(current_path, choice_name)

def get_imports(file_path):
    """Extract the import statements from a file and return the paths of the imported files."""
    with open(file_path, 'r') as file:
        content = file.read()

    imports = re.findall(r"import\s.*\sfrom\s*['\"](.*)['\"]", content)
    return imports

def resolve_import_path(import_path, base_path):
    """Resolve the absolute path of an import statement."""
    if import_path.startswith('.'):
        return os.path.normpath(os.path.join(base_path, import_path + '.jsx'))  # Assuming .jsx files, you might need to adjust this
    else:
        # Assuming all non-relative imports are from 'client/src'
        return os.path.normpath(os.path.join(BASE_PATH, import_path + '.jsx'))

def collate_file(file_path, visited, base_path, output):
    """Recursively collate the contents of the file and its imports."""
    if file_path in visited:
        return

    visited.add(file_path)

    with open(file_path, 'r') as file:
        content = file.read()
        output.write(f"\n\n==================== {file_path} ====================\n\n")
        output.write(content)
    
    imports = get_imports(file_path)
    for imp in imports:
        import_path = resolve_import_path(imp, base_path)
        if os.path.exists(import_path):
            collate_file(import_path, visited, os.path.dirname(import_path), output)
        else:
            print(f"Warning: Import {imp} not found at {import_path}")

def main():
    output_file = 'collated_output.txt'
    visited = set()

    start_file_path = navigate_to_file()

    if not os.path.exists(start_file_path):
        print(f"Error: {start_file_path} does not exist.")
        return

    with open(output_file, 'w') as output:
        collate_file(start_file_path, visited, os.path.dirname(start_file_path), output)

    print(f"Collation complete. See {output_file}")

if __name__ == "__main__":
    main()


==================== C:\Code\recipe-app\mydatabase2 - Copy.db ====================

SQLite format 3   @     '                                                               ' .n¹   û    û
+7ú
 Õ:
{		yÊf)Ûø                                                                                                                                                                                                                                                                                                                                         6##3tableIngredientsIngredientsCREATE TABLE "Ingredients" (
	"IngredientID" INTEGER NOT NULL, 
	"SubCategoryID" INTEGER NOT NULL, 
	"IngredientName" VARCHAR NOT NULL, 
	"PurchaseUnitID" INTEGER, 
	"PurchaseWeightVolume" FLOAT, 
	"PurchaseWeightUnitID" INTEGER, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("IngredientID"), 
	FOREIGN KEY("SubCategoryID") REFERENCES "IngredientSubCategories" ("SubCategoryID"), 
	FOREIGN KEY("PurchaseUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("PurchaseWeightUnitID") REFERENCES "Units" ("UnitID")
)''ctableShoppingListsShoppingListsCREATE TABLE "ShoppingLists" (
	"ShoppingListID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("ShoppingListID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
):CtableMealPlansMealPlansCREATE TABLE "MealPlans" (
	"MealPlanID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"PlanName" VARCHAR, 
	"StartDate" DATE, 
	"EndDate" DATE, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("MealPlanID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
)##gtableRecipeBooksRecipeBooksCREATE TABLE "RecipeBooks" (
	"BookID" INTEGER NOT NULL, 
	"AuthorID" INTEGER NOT NULL, 
	"BookName" VARCHAR NOT NULL, 
	"CoverArtURL" VARCHAR, 
	PRIMARY KEY ("BookID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID")
)N
++StableUnitConversionsUnitConversionsCREATE TABLE "UnitConversions" (
	"FromUnitID" INTEGER NOT NULL, 
	"ToUnitID" INTEGER NOT NULL, 
	"ConversionFactor" FLOAT NOT NULL, 
	PRIMARY KEY ("FromUnitID", "ToUnitID"), 
	FOREIGN KEY("FromUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("ToUnitID") REFERENCES "Units" ("UnitID")
)=Q+ indexsqlite_autoindex_UnitConversions_1UnitConversionso;;utableIngredientSubCategoriesIngredientSubCategories
CREATE TABLE "IngredientSubCategories" (
	"SubCategoryID" INTEGER NOT NULL, 
	"CategoryID" INTEGER NOT NULL, 
	"SubCategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("SubCategoryID"), 
	FOREIGN KEY("CategoryID") REFERENCES "IngredientCategories" ("CategoryID")
)
	tableTagsTagsCREATE TABLE "Tags" (
	"TagID" INTEGER NOT NULL, 
	"TagName" VARCHAR NOT NULL, 
	PRIMARY KEY ("TagID"), 
	UNIQUE ("TagName")
)'; indexsqlite_autoindex_Tags_1Tags=	''9tableRecipeAuthorsRecipeAuthors
CREATE TABLE "RecipeAuthors" (
	"AuthorID" INTEGER NOT NULL, 
	"AuthorName" VARCHAR NOT NULL, 
	"AuthorImageURL" VARCHAR, 
	PRIMARY KEY ("AuthorID")
)XtableUnitsUnitsCREATE TABLE "Units" (
	"UnitID" INTEGER NOT NULL, 
	"UnitName" VARCHAR NOT NULL, 
	"Abbreviation" VARCHAR NOT NULL, 
	PRIMARY KEY ("UnitID"), 
	UNIQUE ("UnitName"), 
	UNIQUE ("Abbreviation")
))= indexsqlite_autoindex_Units_2Units	)= indexsqlite_autoindex_Units_1Units	555tableIngredientCategoriesIngredientCategoriesCREATE TABLE "IngredientCategories" (
	"CategoryID" INTEGER NOT NULL, 
	"CategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("CategoryID"), 
	UNIQUE ("CategoryName")
)G[5 indexsqlite_autoindex_IngredientCategories_1IngredientCategoriestableUsersUsersCREATE TABLE "Users" (
	"UserID" INTEGER NOT NULL, 
	"Username" VARCHAR NOT NULL, 
	"PasswordHash" VARCHAR NOT NULL, 
	"Email" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("UserID"), 
	UNIQUE ("Username"), 
	UNIQUE ("Email")
))= indexsqlite_autoindex_Users_2Users)= indexsqlite_autoindex_Users_1Users      
   
Ö ©s
Ö                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #;AAuniqueuser5$2b$12$lNeLnAWfpicHRFB7bvU.heTGqViRKbp3NGvXATXilNM2U3mJ8UJiWuniqueuser5@example.com2024-06-17 11:40:05.0389152024-06-17 11:40:05.038915 #;AAuniqueuser4$2b$12$nGEFLwgtQuvfUwKEoc3hq.D5MmOHUXC0RhRoJmxLZ3FVHYrv9KW9quniqueuser4@example.com2024-06-17 11:38:12.0036062024-06-17 11:38:12.003606 7AAtestuser2$2b$12$cftdrhDGVJIAfS8KLdFQEOdhIpsBUfu6VUMFqf7N5g4iVtYRrwvnqtestuser3@example.com2024-06-17 11:33:43.1961722024-06-17 11:33:43.196172U %533testuserpasswordhashtestuser@example.com2024-06-15 18:14:332024-06-15 18:14:33
   Æ ôæÖÆ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #uniqueuser5#uniqueuser4
testuser2	testuser
    Îè²                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ;uniqueuser5@example.com;uniqueuser4@example.com7testuser3@example.com5	testuser@example.com
    É                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          1 33Fruits2024-06-15 18:14:332024-06-15 18:14:335 !33Vegetables2024-06-15 18:14:332024-06-15 18:14:33
   ç çò                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
Fruits
!	Vegetables
   Ç ðåÙÇ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        !MillilitermL
 LiterL	 Gramg Kilogramkg
   Ò ëôáÒ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  !Milliliter	LiterGram	Kilogram
   ç îôúç                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       mLLg	kg
   @ Ô¤n@                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                , KBob Brownhttp://example.com/bobbrown.jpg4 'SAlice Johnsonhttp://example.com/alicejohnson.jpg. !MJane Smithhttp://example.com/janesmith.jpg* IJohn Doehttp://example.com/johndoe.jpg
   æ öæ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #Gluten-Free Vegan
   ç ç÷                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #Gluten-Free	Vegan
   T ÆT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      3 33Citrus2024-06-15 18:14:332024-06-15 18:14:33; 	+33Root Vegetables2024-06-15 18:14:332024-06-15 18:14:338 	%33Leafy Greens2024-06-15 18:14:332024-06-15 18:14:33
   í ÷í                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 è	è
   ò úò                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      		
    ÄP                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 = -[Gourmet Delightshttp://example.com/gourmet_delights.jpg= -[Family Favoriteshttp://example.com/family_favorites.jpg3 #QQuick Mealshttp://example.com/quick_meals.jpg: 	+YHealthy Cookinghttp://example.com/healthy_cooking.jpg
   ± ±                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       M 	#!!33Weekly Plan2024-06-102024-06-172024-06-15 18:14:332024-06-15 18:14:33
   Ó Ó                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         + 	332024-06-15 18:14:332024-06-15 18:14:33
   ï ÈOÙ[
Ý

U
 ß i+ïQ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      O			AABroccoli?ø      2024-06-15 18:38:12.5317182024-06-15 18:38:12.S	 	)		AAGreen Broccoli?ø      2024-06-15 18:36:48.4101192024-06-15 18:43:30.643991:	 			33Egg?©2024-06-15 18:18:232024-06-15 18:18:23<	 			33Flour?à      2024-06-15 18:18:232024-06-15 18:18:235	 		33Milk2024-06-15 18:18:232024-06-15 18:18:23=	 			33Cheese?É2024-06-15 18:18:232024-06-15 18:18:23?
	 			33Tortilla?Ó3333332024-06-15 18:18:232024-06-15 18:18:233	 				33Beef2024-06-15 18:18:232024-06-15 18:18:23B	 	33Soy Sauce?É2024-06-15 18:18:232024-06-15 18:18:23B
	 	#		33Bell Pepper?à      2024-06-15 18:18:232024-06-15 18:18:23=		 	)			33Chicken Breast2024-06-15 18:18:232024-06-15 18:18:23=	 			33Carrot?Ó3333332024-06-15 18:18:232024-06-15 18:18:23=	 			33Tomato?à      2024-06-15 18:18:232024-06-15 18:18:23=	 			33Garlic?©2024-06-15 18:18:232024-06-15 18:18:23<	 			33Onion?à      2024-06-15 18:18:232024-06-15 18:18:236	 				33Lentils2024-06-15 18:18:232024-06-15 18:18:237	 		33Orange2024-06-15 18:14:332024-06-15 18:14:33>	 		33Carrot?à      2024-06-15 18:14:332024-06-15 18:14:336	 				33Spinach2024-06-15 18:14:332024-06-15 18:14:33
   
½ «5®2
½                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2 	3O#U3AUpdated Recipe Namehttp://example.com/updated_recipe#MediumMain Courseht« W	'     33Carrot Soup 1EasySoupAmerican2024-06-15 18:14:332024-06-15 18:14:33s 	C 33Pancakeshttp://example.com/pancakesEasyBreakfastAmerican2024-06-15 18:18:232024-06-15 18:18:23z 	!G# 33Beef Tacos#http://example.com/beef_tacos(MediumMain CourseMexican2024-06-15 18:18:232024-06-15 18:18:23 	-S# 33Chicken Stir Fryhttp://example.com/chicken_stir_fryEasyMain CourseChinese2024-06-15 18:18:232024-06-15 18:18:23t 	#I 33Lentil Soup
http://example.com/lentil_soup-MediumSoupIndian2024-06-15 18:18:232024-06-15 18:18:23S 	#     33Carrot SoupEasySoupAmerican2024-06-15 18:14:332024-06-15 18:14:33
ø Û Í¢
+7ú
 Õ:
{		yÊf)Ûø                                                                                                                                                                                                                                                                                                                                                                                                                                             6##3tableIngredientsIngredientsCREATE TABLE "Ingredients" (
	"IngredientID" INTEGER NOT NULL, 
	"SubCategoryID" INTEGER NOT NULL, 
	"IngredientName" VARCHAR NOT NULL, 
	"PurchaseUnitID" INTEGER, 
	"PurchaseWeightVolume" FLOAT, 
	"PurchaseWeightUnitID" INTEGER, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("IngredientID"), 
	FOREIGN KEY("SubCategoryID") REFERENCES "IngredientSubCategories" ("SubCategoryID"), 
	FOREIGN KEY("PurchaseUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("PurchaseWeightUnitID") REFERENCES "Units" ("UnitID")
)''ctableShoppingListsShoppingListsCREATE TABLE "ShoppingLists" (
	"ShoppingListID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("ShoppingListID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
):CtableMealPlansMealPlansCREATE TABLE "MealPlans" (
	"MealPlanID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"PlanName" VARCHAR, 
	"StartDate" DATE, 
	"EndDate" DATE, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("MealPlanID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
)##gtableRecipeBooksRecipeBooksCREATE TABLE "RecipeBooks" (
	"BookID" INTEGER NOT NULL, 
	"AuthorID" INTEGER NOT NULL, 
	"BookName" VARCHAR NOT NULL, 
	"CoverArtURL" VARCHAR, 
	PRIMARY KEY ("BookID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID")
)N
++StableUnitConversionsUnitConversionsCREATE TABLE "UnitConversions" (
	"FromUnitID" INTEGER NOT NULL, 
	"ToUnitID" INTEGER NOT NULL, 
	"ConversionFactor" FLOAT NOT NULL, 
	PRIMARY KEY ("FromUnitID", "ToUnitID"), 
	FOREIGN KEY("FromUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("ToUnitID") REFERENCES "Units" ("UnitID")
)=Q+ indexsqlite_autoindex_UnitConversions_1UnitConversionso;;utableIngredientSubCategoriesIngredientSubCategories
CREATE TABLE "IngredientSubCategories" (
	"SubCategoryID" INTEGER NOT NULL, 
	"CategoryID" INTEGER NOT NULL, 
	"SubCategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("SubCategoryID"), 
	FOREIGN KEY("CategoryID") REFERENCES "IngredientCategories" ("CategoryID")
)
	tableTagsTagsCREATE TABLE "Tags" (
	"TagID" INTEGER NOT NULL, 
	"TagName" VARCHAR NOT NULL, 
	PRIMARY KEY ("TagID"), 
	UNIQUE ("TagName")
)'; indexsqlite_autoindex_Tags_1Tags=	''9tableRecipeAuthorsRecipeAuthors
CREATE TABLE "RecipeAuthors" (
	"AuthorID" INTEGER NOT NULL, 
	"AuthorName" VARCHAR NOT NULL, 
	"AuthorImageURL" VARCHAR, 
	PRIMARY KEY ("AuthorID")
)XtableUnitsUnitsCREATE TABLE "Units" (
	"UnitID" INTEGER NOT NULL, 
	"UnitName" VARCHAR NOT NULL, 
	"Abbreviation" VARCHAR NOT NULL, 
	PRIMARY KEY ("UnitID"), 
	UNIQUE ("UnitName"), 
	UNIQUE ("Abbreviation")
))= indexsqlite_autoindex_Units_2Units	)= indexsqlite_autoindex_Units_1Units	555tableIngredientCategoriesIngredientCategoriesCREATE TABLE "IngredientCategories" (
	"CategoryID" INTEGER NOT NULL, 
	"CategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("CategoryID"), 
	UNIQUE ("CategoryName")
)G[5 indexsqlite_autoindex_IngredientCategories_1IngredientCategoriestableUsersUsersCREATE TABLE "Users" (
	"UserID" INTEGER NOT NULL, 
	"Username" VARCHAR NOT NULL, 
	"PasswordHash" VARCHAR NOT NULL, 
	"Email" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("UserID"), 
	UNIQUE ("Username"), 
	UNIQUE ("Email")
))= indexsqlite_autoindex_Users_2Users)= indexsqlite_autoindex_Users_1Users       
   	 ® 	£jã·g= ®                                                                                                                                                    6;;tableShoppingListIngredientsShoppingListIngredientsCREATE TABLE "ShoppingListIngredients" (
	"ShoppingListIngredientID" INTEGER NOT NULL, 
	"ShoppingListID" INTEGER NOT NULL, 
	"MealPlanRecipeID" INTEGER, 
	"IngredientID" INTEGER NOT NULL, 
	"Quantity" FLOAT, 
	"UnitID" INTEGER, 
	"IsManual" BOOLEAN, 
	"AlreadyHave" BOOLEAN, 
	"Purchased" BOOLEAN, 
	PRIMARY KEY ("ShoppingListIngredientID"), 
	FOREIGN KEY("ShoppingListID") REFERENCES "ShoppingLists" ("ShoppingListID"), 
	FOREIGN KEY("MealPlanRecipeID") REFERENCES "MealPlanRecipes" ("MealPlanRecipeID"), 
	FOREIGN KEY("IngredientID") REFERENCES "Ingredients" ("IngredientID"), 
	FOREIGN KEY("UnitID") REFERENCES "Units" ("UnitID")
)M''YtableUserFavoritesUserFavoritesCREATE TABLE "UserFavorites" (
	"FavoriteID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	PRIMARY KEY ("FavoriteID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
))!!tableRecipeTagsRecipeTagsCREATE TABLE "RecipeTags" (
	"RecipeTagID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"TagID" INTEGER NOT NULL, 
	PRIMARY KEY ("RecipeTagID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID"), 
	FOREIGN KEY("TagID") REFERENCES "Tags" ("TagID")
)++?tableMealPlanRecipesMealPlanRecipesCREATE TABLE "MealPlanRecipes" (
	"MealPlanRecipeID" INTEGER NOT NULL, 
	"MealPlanID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"MealType" VARCHAR, 
	"Date" DATE NOT NULL, 
	PRIMARY KEY ("MealPlanRecipeID"), 
	FOREIGN KEY("MealPlanID") REFERENCES "MealPlans" ("MealPlanID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)!==UtableRecipeIngredientSectionsRecipeIngredientSectionsCREATE TABLE "RecipeIngredientSections" (
	"SectionID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"SectionName" VARCHAR NOT NULL, 
	PRIMARY KEY ("SectionID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)##ktableRecipeStepsRecipeStepsCREATE TABLE "RecipeSteps" (
	"StepID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"StepNumber" INTEGER NOT NULL, 
	"Description" TEXT NOT NULL, 
	PRIMARY KEY ("StepID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)f#tableRecipesRecipesCREATE TABLE "Recipes" (
	"RecipeID" INTEGER NOT NULL, 
	"UserID" INTEGER, 
	"RecipeName" VARCHAR NOT NULL, 
	"AuthorID" INTEGER, 
	"BookID" INTEGER, 
	"PageNumber" INTEGER, 
	"OnlineURL" VARCHAR, 
	"CookTime" INTEGER, 
	"Difficulty" VARCHAR, 
	"Type" VARCHAR, 
	"ImageURL" VARCHAR, 
	"Servings" INTEGER, 
	"Cuisine" VARCHAR, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("RecipeID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID"), 
	FOREIGN KEY("BookID") REFERENCES "RecipeBooks" ("BookID")
).//tableRecipeIngredientsRecipeIngredientsCREATE TABLE "RecipeIngredients" (
	"RecipeIngredientID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"IngredientID" INTEGER NOT NULL, 
	"SectionID" INTEGER, 
	"Quantity" FLOAT, 
	"UnitID" INTEGER, 
	PRIMARY KEY ("RecipeIngredientID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID"), 
	FOREIGN KEY("IngredientID") REFERENCES "Ingredients" ("IngredientID"), 
	FOREIGN KEY("SectionID") REFERENCES "RecipeIngredientSections" ("SectionID"), 
	FOREIGN KEY("UnitID") REFERENCES "Units" ("UnitID")
)@''?tableRecipeReviewsRecipeReviewsCREATE TABLE "RecipeReviews" (
	"ReviewID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"Rating" FLOAT NOT NULL, 
	"ReviewText" TEXT, 
	"CreatedAt" TIMESTAMP, 
	PRIMARY KEY ("ReviewID"), 
	CONSTRAINT check_rating_range CHECK (Rating >= 0.5 AND Rating <= 5), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)
   +
¾ ßºa<üÒ«sS9
×
´

y
T
;

åÉ­rS2ðÐ¯uS2
ö
Ü
¾                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                + 7
Garnish with berries.* /	Serve with syrup.) =Cook until golden brown.( 1Flip the pancakes.' =Cook until bubbles form. & ?Pour batter onto the pan.% 7Heat a non-stick pan.$ 3Whisk until smooth.# =Add the wet ingredients." 	=Mix the dry ingredients.! 7
Serve with guacamole."  C	Enjoy with a side of beans. =Squeeze lime over tacos. 9Garnish with cilantro. /Serve with salsa. =Add cheese and toppings. 3Assemble the tacos. 3Warm the tortillas. 5Chop the vegetables. 	)Cook the beef.! A
Garnish with sesame seeds. -	Serve with rice.# ESeason with salt and pepper. ;Stir fry for 5 minutes. 1Pour in soy sauce.! AAdd vegetables to the pan.( OAdd chicken and cook until brown. 1Heat oil in a pan. 5Chop the vegetables. 	1Slice the chicken.
 ;
Garnish with coriander. !	Serve hot.# ESeason with salt and pepper.%
 ISimmer for another 15 minutes.(	 OAdd chopped tomatoes and carrots. 5Cook for 20 minutes.! AAdd the lentils and water.# ESaute the onions and garlic." CChop the onions and garlic. 	1Rinse the lentils. 	3Blend until smooth.# 	GBoil in water for 20 minutes. 		APeel and chop the carrots.
   ê ê                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 	-Main Ingredients
    éÐ¸                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  	!Breakfast2024-06-15 	!Dinner2024-06-14 	!Lunch2024-06-13 	!Dinner2024-06-12 		!Lunch2024-06-11
   ú ú                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 		
   æ æ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             		32024-06-15 18:14:33
   Á Á                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       = 		C3@      Delicious and easy to make!2024-06-15 18:14:33
   )
è óåØË½¯¢{n`SF9,øìÞÑÄ·ªvj\OB5(
ô
è                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
) 		2( 	2' 	d& 	d% 	d$ 	
# 	d" 	2! 	d  	 È
 		2 	d 	d 	
d 	
 	d 	d 	2 	
 	ô
 		2 	2 	d 	d 	d 	2 	
d 	

 	d 		ô 	
d
 		 È
	 		2 	d 	d 	  	 È 	
 	d 	 È 	  È
   ª ðßÏ¿®|l\L;+ûëÚÊºª                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
 	d
 	2
 	d
 	 È
 	

 	d
 	d
 	2
 	

 	ô
 	2

 	
d	
 	

 	d
 		ô
 	 
 	 È
 	

 	d
 	 È
 		 È

==================== C:\Code\recipe-app\mydatabase2.db ====================

SQLite format 3   @    <                                                              < .fê   û    û
ã
U[0
	Ö
ldQÿoÀ6
Û                                                                                                                                                                  6##3tableIngredientsIngredientsCREATE TABLE "Ingredients" (
	"IngredientID" INTEGER NOT NULL, 
	"SubCategoryID" INTEGER NOT NULL, 
	"IngredientName" VARCHAR NOT NULL, 
	"PurchaseUnitID" INTEGER, 
	"PurchaseWeightVolume" FLOAT, 
	"PurchaseWeightUnitID" INTEGER, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("IngredientID"), 
	FOREIGN KEY("SubCategoryID") REFERENCES "IngredientSubCategories" ("SubCategoryID"), 
	FOREIGN KEY("PurchaseUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("PurchaseWeightUnitID") REFERENCES "Units" ("UnitID")
)N++StableUnitConversionsUnitConversionsCREATE TABLE "UnitConversions" (
	"FromUnitID" INTEGER NOT NULL, 
	"ToUnitID" INTEGER NOT NULL, 
	"ConversionFactor" FLOAT NOT NULL, 
	PRIMARY KEY ("FromUnitID", "ToUnitID"), 
	FOREIGN KEY("FromUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("ToUnitID") REFERENCES "Units" ("UnitID")
)=Q+ indexsqlite_autoindex_UnitConversions_1UnitConversions''ctableShoppingListsShoppingListsCREATE TABLE "ShoppingLists" (
	"ShoppingListID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("ShoppingListID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
):CtableMealPlansMealPlansCREATE TABLE "MealPlans" (
	"MealPlanID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"PlanName" VARCHAR, 
	"StartDate" DATE, 
	"EndDate" DATE, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("MealPlanID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
)##gtableRecipeBooksRecipeBooksCREATE TABLE "RecipeBooks" (
	"BookID" INTEGER NOT NULL, 
	"AuthorID" INTEGER NOT NULL, 
	"BookName" VARCHAR NOT NULL, 
	"CoverArtURL" VARCHAR, 
	PRIMARY KEY ("BookID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID")
)o
;;utableIngredientSubCategoriesIngredientSubCategoriesCREATE TABLE "IngredientSubCategories" (
	"SubCategoryID" INTEGER NOT NULL, 
	"CategoryID" INTEGER NOT NULL, 
	"SubCategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("SubCategoryID"), 
	FOREIGN KEY("CategoryID") REFERENCES "IngredientCategories" ("CategoryID")
)	tableTagsTagsCREATE TABLE "Tags" (
	"TagID" INTEGER NOT NULL, 
	"TagName" VARCHAR NOT NULL, 
	PRIMARY KEY ("TagID"), 
	UNIQUE ("TagName")
)'; indexsqlite_autoindex_Tags_1Tags
=
''9tableRecipeAuthorsRecipeAuthorsCREATE TABLE "RecipeAuthors" (
	"AuthorID" INTEGER NOT NULL, 
	"AuthorName" VARCHAR NOT NULL, 
	"AuthorImageURL" VARCHAR, 
	PRIMARY KEY ("AuthorID")
)XtableUnitsUnitsCREATE TABLE "Units" (
	"UnitID" INTEGER NOT NULL, 
	"UnitName" VARCHAR NOT NULL, 
	"Abbreviation" VARCHAR NOT NULL, 
	PRIMARY KEY ("UnitID"), 
	UNIQUE ("UnitName"), 
	UNIQUE ("Abbreviation")
))	= indexsqlite_autoindex_Units_2Units
)= indexsqlite_autoindex_Units_1Units		555tableIngredientCategoriesIngredientCategoriesCREATE TABLE "IngredientCategories" (
	"CategoryID" INTEGER NOT NULL, 
	"CategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("CategoryID"), 
	UNIQUE ("CategoryName")
)G[5 indexsqlite_autoindex_IngredientCategories_1IngredientCategories       b/indexix_Users_UsernameUsersCREATE UNIQUE INDEX "ix_Users_Username" ON "Users" ("Username")T+uindexix_Users_UserIDUsersCREATE INDEX "ix_Users_UserID" ON "Users" ("UserID")X)indexix_Users_EmailUsersCREATE UNIQUE INDEX "ix_Users_Email" ON "Users" ("Email")ktableUsersUsersCREATE TABLE "Users" (
	"UserID" INTEGER NOT NULL, 
	"Username" VARCHAR NOT NULL, 
	"PasswordHash" VARCHAR NOT NULL, 
	"Email" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP NOT NULL, 
	"UpdatedAt" TIMESTAMP NOT NULL, 
	PRIMARY KEY ("UserI   
   
/ cj
Ó
743
/                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #Q=AAuniqueuse2rscrypt:32768:8:1$82ZqKERCL4HIE4fs$da3b402bb11282642875226a14dac3103bf1a1372f65d1fa38dfb84300ee32ec6cdec81ae8e9525ad88f3de6371137fd21eb3dda093e76e8369fe5e7629b01ebuniqueuser22@example.com2024-06-26 17:34:09.7328852024-06-26 17:34:09.732885~ !Q9AAuniqueuserscrypt:32768:8:1$QouazhGh6I7jJrW9$8f0564382d7aa8a58a3c5c531c283575c97355eaada016491417c031680e4e0469cadd4951ad2241e2eea58271e3537483b8a7fc1da224e0882dd262e298d92funiqueuser@example.com2024-06-26 00:00:00.0000002024-06-26 00:00:00.000000  #Q;AAanotheruserscrypt:32768:8:1$l7Sgtxp6ZbNVEGEl$e372f532dc397d2ea16fa2d5850b945870b87bceaee20a9850df85b4d8a45aadb8ed191972b602e1d5eff110af643bc7a1ff534d679af7ed016b82f333685958anotheruser@example.com2024-06-26 00:00:00.0000002024-06-26 00:00:00.000000 CAAwarren$2b$12$RqI1lGpQQHXACvxLMNADHuS0as5lyn2rOFmRjdzYQCAl1OtRiJLmGwarrencoffey@googlemail.com2024-06-17 15:46:44.4549782024-06-17 15:46:44.454978 5AAtestuser$2b$12$MuMNqvqrCcYoOgHD7zAp3.UWlx5LOmyI9Btf3/yxJRfQ3S8hqrYw.testuser@example.com2024-06-17 15:22:24.5445602024-06-17 15:22:24.544560 5AAnewuser2$2b$12$QdbIT8Lam5crtKgAfIAZhu4wF9THV5w58rowxiMEJDaXbAnHTTGjCnewuser2@example.com2024-06-17 14:26:17.1787482024-06-17 14:26:17.178748` #3AAnewuserpassword123newuser@example.com2024-06-17 14:22:53.3912712024-06-17 14:22:53.391271 #;AAuniqueuser5$2b$12$cQeSnEd5COtni8E3BZTY5eaVVEgoJ8heZiXmqhkHJ1npT4zZ1Vq5muniqueuser5@example.com2024-06-17 11:40:54.8169422024-06-17 11:40:54.816942
   ' _´Í'åD{                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               =uniqueuser22@example.com9uniqueuser@example.com;anotheruser@example.comCwarrencoffey@googlemail.com5testuser@example.com5newuser2@example.com3newuser@example.com;	uniqueuser5@example.com
   Ò üöðêäÞØÒ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          		
    °åØË¡ñÀ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #uniqueuse2r!uniqueuser#anotheruser
warrentestusernewuser2newuser#	uniqueuser5
¹ 	
x3òªd
Ù½

W                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           > AATest22024-06-17 19:27:45.2242172024-06-17 19:27:45.224217@	=
 AATest2024-06-20 12:23:42.6068152024-06-20 12:23:42.606815B AAHousehold2024-06-17 14:58:21.8378052024-06-17 14:58:21.837805E %AAChilled Food2024-06-17 14:58:21.7533962024-06-17 14:58:21.753396D #AAFrozen Food2024-06-17 14:58:21.7078052024-06-17 14:58:21.707805F 'AAFood Cupboard2024-06-17 14:58:21.6708882024-06-17 14:58:21.670888? AADrinks2024-06-17 14:58:21.6274662024-06-17 14:58:21.627466C !AAFresh Food2024-06-17 14:58:21.5865132024-06-17 14:58:21.586513? AABakery2024-06-17 14:58:21.5357592024-06-17 14:58:21.535759   @	 AAAlcohol2024-06-20 11:25:16.9946082024-06-20 11:25:16.9946084
ð 	 ôåË¹Ö©t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        	Test2Test

Household%Chilled Food#Frozen Food'Food Cupboard
Drinks!Fresh Food
Bakery   Alcohol	
   Ø óèØ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Kilogramkg	 Gramg Piecepc
   á îá÷                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   KilogramGram	Piece
   í ôíú                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               kgg	pc
   ³ îÜÆ³¤                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
Ruth
 
warrennnn '
Warren Coffey -
The Hairy Bikers %
Jamie Oliver % Pinch of Nom
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

 x ¾v4åT
Å

B¿x3ì¤\
Ì
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         A AAWoahhh2024-06-20 10:42:56.0744742024-06-20 10:42:56.074474F #AAWarren test2024-06-20 10:42:32.5470962024-06-20 10:42:32.547096F #AAWarren test2024-06-20 10:42:28.2960762024-06-20 10:42:28.296076F #AAWarren test2024-06-20 10:41:57.5976072024-06-20 10:41:57.597607F #AAWarren test2024-06-20 10:41:09.5820862024-06-20 10:41:09.582086E !AAcleaninggg2024-06-20 10:39:32.7306692024-06-20 10:39:32.730669E !AAcleaninggg2024-06-20 10:38:44.6812372024-06-20 10:38:44.6812E
 !AATestBakery2024-06-20 12:29:00.9217622024-06-20 12:29:00.921762@ AAPasta2024-06-18 13:54:43.1794962024-06-18 13:54:43.179496   AAAWine2024-06-17 15:07:40.9926192024-06-17 15:07:40.992619>
 AATea2024-06-17 15:07:40.9410742024-06-17 15:07:40.941074A	 AACoffee2024-06-17 15:07:40.8882622024-06-17 15:07:40.888262@ AAWater2024-06-17 15:07:40.7910132024-06-17 15:07:40.791013K -AAFresh Vegetables2024-06-17 15:07:40.7312842024-06-17 15:07:40.731284F #AAFresh Fruit2024-06-17 15:07:40.6916962024-06-17 15:07:40.691696G %AASweet Treats2024-06-17 15:07:40.6044782024-06-17 15:07:40.604478M 1AABreakfast Pastries2024-06-17 15:07:40.5530532024-06-17 15:07:40.553053@ AACakes2024-06-17 15:07:40.5093422024-06-17 15:07:40.509342F #AABread Rolls2024-06-17 15:07:40.4770762024-06-17 15:07:40.477076@ AABread2024-06-17 15:07:40.4299402024-06-17 15:07:40.429940
   Ä ìÕÄ®                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           !
Ruth's fud )
Warren's scran 
Easy food +
60 Minute Meals 	' Fast and easy
   ¥ ¥L÷                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         S 	!!AAnew2024-06-272024-07-062024-06-24 19:45:19.8794012024-06-24 19:45:19.879401W 	!!AACaravan2024-06-282024-06-302024-06-24 19:15:17.9979232024-06-24 19:15:17.997923Y 	!!AATest plan2024-06-242024-06-272024-06-24 19:13:44.9647852024-06-24 19:13:44.964785
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
 Ò ¶fÏ5
ì

X

p#ÚC
÷
¬
e
	Í	ÒÒÒÒÒÒ>>å                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               M	 	)	AANew York Bagel2024-06-20 08:10:57.9873752024-06-20 08:10:57.987375M	 	)	AC	 		AATest2024-06-20 10:11:42.0814882024-06-20 10:11:42.081488M	 	)	AANew York Bagel2024-06-20 08:07:35.5981062024-06-20 08:07:35.598106J	 AANew Test È2024-06-19 17:11:35.0900682024-06-19 17:11:35.090068½f	AATest222024-06-19 17:09:00.9344562024-06-19 17:09:00.934456B	 		AAPie2024-06-19 17:08:41.8414082024-06-19 17:08:41.841408B	 		AAPie2024-06-19 17:06:43.5075392024-06-19 17:06:43.507539D	 AAPie2024-06-19 17:06:30.8402082024-06-19 17:06:30.840208N	 )		AATestIngredientô2024-06-19 17:05:21.8808182024-06-19 17:05:21.880818G	 AAPenneô2024-06-18 13:55:00.0616542024-06-18 13:55:00.061654O	 )AA	Coffee sachets2024-06-18 13:44:18.0321872024-06-18 13:44:18.032187E	 			AACarrots2024-06-17 15:14:32.0359732024-06-17 15:14:32.035973E	 			AALettuce2024-06-17 15:14:32.0026602024-06-17 15:14:32.002660I	 #			AABlueberries2024-06-17 15:14:31.9695472024-06-17 15:14:31.969547J	 %			AAStrawberries2024-06-17 15:14:31.9026852024-06-17 15:14:31.902685J	 %			AAOrange Juice2024-06-17 15:14:31.8766642024-06-17 15:14:31.876664I	 #			AAApple Juice2024-06-17 15:14:31.8361712024-06-17 15:14:31.836171G	 			AA
Green Tea2024-06-17 15:14:31.7763472024-06-17 15:14:31.776347K
	 '			AA	Ground Coffee2024-06-17 15:14:31.7526132024-06-17 15:14:31.752613K	 '			AABottled Water2024-06-17 15:14:31.6753592024-06-17 15:14:31.675359   P-			AAMixed Vegetables2024-06-17 15:14:31.6363402024-06-17 15:14:31.636340I
	 #			AAFruit Salad2024-06-17 15:14:31.6139852024-06-17 15:14:31.613985E		 			AABrownie2024-06-17 15:14:31.5746812024-06-17 15:14:31.574681K	 '			AADanish Pastry2024-06-17 15:14:31.5360602024-06-17 15:14:31.536060G	 			AACroissant2024-06-17 15:14:31.4736442024-06-17 15:14:31.473644J	 %			AAVanilla Cake2024-06-17 15:14:31.4363922024-06-17 15:14:31.436392L	 )			AAChocolate Cake2024-06-17 15:14:31.3857272024-06-17 15:14:31.385727J	 %			AADinner Rolls2024-06-17 15:14:31.3540872024-06-17 15:14:31.354087I	 #			AABurger Buns2024-06-17 15:14:31.3128722024-06-17 15:14:31.312872N	 	/			AAWhole Grain Bread2024-06-17 15:14:31.2687022024-06-17 15:14:31.268702H	 	#			AAWhite Bread2024-06-17 15:14:31.2338302024-06-17 15:14:31.233830
      è                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  R  




AATest nowC"2024-06-26 17:45:03.69109220    	         Test

Û 6 ÷G
ã
U[0
	Ö
ldQÿ®o6
Û                                                                                                                                                                                                                                                                      6##3tableIngredientsIngredientsCREATE TABLE "Ingredients" (
	"IngredientID" INTEGER NOT NULL, 
	"SubCategoryID" INTEGER NOT NULL, 
	"IngredientName" VARCHAR NOT NULL, 
	"PurchaseUnitID" INTEGER, 
	"PurchaseWeightVolume" FLOAT, 
	"PurchaseWeightUnitID" INTEGER, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("IngredientID"), 
	FOREIGN KEY("SubCategoryID") REFERENCES "IngredientSubCategories" ("SubCategoryID"), 
	FOREIGN KEY("PurchaseUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("PurchaseWeightUnitID") REFERENCES "Units" ("UnitID")
)=Q+ indexsqlite_autoindex_UnitConversions_1UnitConversionsN++StableUnitConversionsUnitConversionsCREATE TABLE "UnitConversions" (
	"FromUnitID" INTEGER NOT NULL, 
	"ToUnitID" INTEGER NOT NULL, 
	"ConversionFactor" FLOAT NOT NULL, 
	PRIMARY KEY ("FromUnitID", "ToUnitID"), 
	FOREIGN KEY("FromUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("ToUnitID") REFERENCES "Units" ("UnitID")
)''ctableShoppingListsShoppingListsCREATE TABLE "ShoppingLists" (
	"ShoppingListID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("ShoppingListID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
):CtableMealPlansMealPlansCREATE TABLE "MealPlans" (
	"MealPlanID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"PlanName" VARCHAR, 
	"StartDate" DATE, 
	"EndDate" DATE, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("MealPlanID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
)##gtableRecipeBooksRecipeBooksCREATE TABLE "RecipeBooks" (
	"BookID" INTEGER NOT NULL, 
	"AuthorID" INTEGER NOT NULL, 
	"BookName" VARCHAR NOT NULL, 
	"CoverArtURL" VARCHAR, 
	PRIMARY KEY ("BookID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID")
)o
;;utableIngredientSubCategoriesIngredientSubCategoriesCREATE TABLE "IngredientSubCategories" (
	"SubCategoryID" INTEGER NOT NULL, 
	"CategoryID" INTEGER NOT NULL, 
	"SubCategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("SubCategoryID"), 
	FOREIGN KEY("CategoryID") REFERENCES "IngredientCategories" ("CategoryID")
)	tableTagsTagsCREATE TABLE "Tags" (
	"TagID" INTEGER NOT NULL, 
	"TagName" VARCHAR NOT NULL, 
	PRIMARY KEY ("TagID"), 
	UNIQUE ("TagName")
)'; indexsqlite_autoindex_Tags_1Tags
=
''9tableRecipeAuthorsRecipeAuthorsCREATE TABLE "RecipeAuthors" (
	"AuthorID" INTEGER NOT NULL, 
	"AuthorName" VARCHAR NOT NULL, 
	"AuthorImageURL" VARCHAR, 
	PRIMARY KEY ("AuthorID")
)XtableUnitsUnitsCREATE TABLE "Units" (
	"UnitID" INTEGER NOT NULL, 
	"UnitName" VARCHAR NOT NULL, 
	"Abbreviation" VARCHAR NOT NULL, 
	PRIMARY KEY ("UnitID"), 
	UNIQUE ("UnitName"), 
	UNIQUE ("Abbreviation")
))	= indexsqlite_autoindex_Units_2Units
)= indexsqlite_autoindex_Units_1Units		555tableIngredientCategoriesIngredientCategoriesCREATE TABLE "IngredientCategories" (
	"CategoryID" INTEGER NOT NULL, 
	"CategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("CategoryID"), 
	UNIQUE ("CategoryName")
)G[5 indexsqlite_autoindex_IngredientCategories_1IngredientCategories       b/indexix_Users_UsernameUsersCREATE UNIQUE INDEX "ix_Users_Username" ON "Users" ("Username")T+uindexix_Users_UserIDUsersCREATE INDEX "ix_Users_UserID" ON "Users" ("UserID")X)indexix_Users_EmailUsersCREATE UNIQUE INDEX "ix_Users_Email" ON "Users" ("Email")ktableUsersUsersCREATE TABLE "Users" (
	"UserID" INTEGER NOT NULL, 
	"Username" VARCHAR NOT NULL, 
	"PasswordHash" VARCHAR NOT NULL, 
	"Email" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP NOT NULL, 
	"UpdatedAt" TIMESTAMP NOT NULL, 
	PRIMARY KEY ("UserID")
)
| õÑR:¯
Ï                                                                                                                                                                                                                                                 )!!tableRecipeTagsRecipeTagsCREATE TABLE "RecipeTags" (
	"RecipeTagID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"TagID" INTEGER NOT NULL, 
	PRIMARY KEY ("RecipeTagID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID"), 
	FOREIGN KEY("TagID") REFERENCES "Tags" ("TagID")
)##qtableRecipeStepsRecipeStepsCREATE TABLE "RecipeSteps" (
	"StepID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"StepNumber" INTEGER NOT NULL, 
	"Description" VARCHAR NOT NULL, 
	PRIMARY KEY ("StepID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)|''7tableRecipeReviewsRecipeReviewsCREATE TABLE "RecipeReviews" (
	"ReviewID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"Rating" FLOAT NOT NULL, 
	"ReviewText" VARCHAR, 
	"CreatedAt" TIMESTAMP, 
	PRIMARY KEY ("ReviewID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)!==UtableRecipeIngredientSectionsRecipeIngredientSectionsCREATE TABLE "RecipeIngredientSections" (
	"SectionID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"SectionName" VARCHAR NOT NULL, 
	PRIMARY KEY ("SectionID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)++?tableMealPlanRecipesMealPlanRecipesCREATE TABLE "MealPlanRecipes" (
	"MealPlanRecipeID" INTEGER NOT NULL, 
	"MealPlanID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"MealType" VARCHAR, 
	"Date" DATE NOT NULL, 
	PRIMARY KEY ("MealPlanRecipeID"), 
	FOREIGN KEY("MealPlanID") REFERENCES "MealPlans" ("MealPlanID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)  3#tableRecipesRecipesCREATE TABLE "Recipes" (
	"RecipeID" INTEGER NOT NULL, 
	"UserID" INTEGER, 
	"RecipeName" VARCHAR NOT NULL, 
	"AuthorID" INTEGER, 
	"BookID" INTEGER, 
	"PageNumber" INTEGER, 
	"OnlineURL" VARCHAR, 
	"CookTime" INTEGER, 
	"Difficulty" VARCHAR, 
	"Type" VARCHAR, 
	"Image     dtableRecipesRecipesCREATE TABLE Recipes (
    RecipeID INTEGER PRIMARY KEY,
    UserID INTEGER,
    RecipeName TEXT NOT NULL,
    AuthorID INTEGER,
    BookID INTEGER,
    PageNumber INTEGER,
    OnlineURL TEXT,
    CookTime INTEGER,
    Difficulty TEXT,
    Type TEXT,
    ImageURL TEXT,
    Servings INTEGER,
    Cuisine TEXT,
    CreatedAt TIMESTAMP,
    UpdatedAt TIMESTAMP,
    FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE SET NULL,
    FOREIGN KEY(AuthorID) REFERENCES RecipeAuthors(AuthorID) ON DELETE SET NULL,
    FOREIGN KEY(BookID) REFERENCES RecipeBooks(BookID) ON DELETE SET NULL
)6;;tableShoppingListIngredientsShoppingListIngredientsCREATE TABLE "ShoppingListIngredients" (
	"ShoppingListIngredientID" INTEGER NOT NULL, 
	"ShoppingListID" INTEGER NOT NULL, 
	"MealPlanRecipeID" INTEGER, 
	"IngredientID" INTEGER NOT NULL, 
	"Quantity" FLOAT, 
	"UnitID" INTEGER, 
	"IsManual" BOOLEAN, 
	"AlreadyHave" BOOLEAN, 
	"Purchased" BOOLEAN, 
	PRIMARY KEY ("ShoppingListIngredientID"), 
	FOREIGN KEY("ShoppingListID") REFERENCES "ShoppingLists" ("ShoppingListID"), 
	FOREIGN KEY("MealPlanRecipeID") REFERENCES "MealPlanRecipes" ("MealPlanRecipeID"), 
	FOREIGN KEY("IngredientID") REFERENCES "Ingredients" ("IngredientID"), 
	FOREIGN KEY("UnitID") REFERENCES "Units" ("UnitID")
)-//	tableRecipeIngredientsRecipeIngredientsCREATE TABLE RecipeIngredients (
    RecipeIngredientID INTEGER PRIMARY KEY,
    RecipeID INTEGER,
    IngredientID INTEGER,
    SectionID INTEGER,
    Quantity FLOAT,
    UnitID INTEGER,
    FOREIGN KEY(RecipeID) REFERENCES Recipes(RecipeID) ON DELETE CASCADE,
    FOREIGN KEY(IngredientID) REFERENCES Ingredients(IngredientID) ON DELETE CASCADE,
    FOREIGN KEY(SectionID) REFERENCES RecipeIngredientSections(SectionID) ON DELETE CASCADE,
    FOREIGN KEY(UnitID) REFERENCES Units(UnitID) ON DELETE SET NULL
))
      ÌGGG,,,,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 !Breakfast2024-06-30õ 	!Breakfast2024-06-27 	!Breakfast2024-06-27 	!Lunch2024-06-25õ P	 	!Dinner2024-06-25õ 2	!Dinner2024-0 !Breakfast2024-06-30 	!Breakfast2024-06-23  	!Breakfast2024-06-26d 	!Breakfast2024 	 		!Breakfast2024-06-26 	!Breakfast2024-06-27ä i	!Lunch2024-06-26ä Q	!Breakfast2024-06-25ä 5	!Breakfast2024-06-24ä 	!Dinner2024-06-24 	!Lunch2024-06-27   		!Dinner2024-06-27-244
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
      ö ÞÒÄº®£}reZNC                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           	 	 	
  	d	 	 	
{
 	  Ý	 	 	  
  d
	  		 	 	
  	 	 		   È
  	

 	 

 	 
   
		 	!
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

==================== C:\Code\recipe-app\output_all.txt ====================



==================== C:\Code\recipe-app\backend.txt ====================



==================== C:\Code\recipe-app\backend\mydatabase2.db ====================



==================== C:\Code\recipe-app\backend\run.py ====================

from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)


==================== C:\Code\recipe-app\backend\app\base.py ====================

from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class TimestampMixin(object):
    CreatedAt = db.Column(db.DateTime, default=datetime.utcnow)
    UpdatedAt = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


==================== C:\Code\recipe-app\backend\app\extensions.py ====================

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


==================== C:\Code\recipe-app\backend\app\generic_crud.py ====================

from flask import Blueprint
from .utils import get_all, get_by_id, create_record, update_record, delete_record
from . import db

def create_crud_blueprint(model, url_prefix):
    bp = Blueprint(model.__tablename__, __name__, url_prefix=url_prefix)

    @bp.route('/', methods=['GET'])
    def get_records():
        return get_all(model)

    @bp.route('/<int:id>', methods=['GET'])
    def get_record(id):
        return get_by_id(model, id)

    @bp.route('/', methods=['POST'])
    def create():
        return create_record(model)

    @bp.route('/<int:id>', methods=['PUT'])
    def update(id):
        return update_record(model, id)

    @bp.route('/<int:id>', methods=['DELETE'])
    def delete(id):
        return delete_record(model, id)

    return bp


==================== C:\Code\recipe-app\backend\app\models.py ====================

from werkzeug.security import generate_password_hash, check_password_hash
from .extensions import db
from .base import TimestampMixin

class IngredientCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientCategories'
    CategoryID = db.Column(db.Integer, primary_key=True)
    CategoryName = db.Column(db.String, unique=True, nullable=False)

    def to_dict(self):
        return {
            'CategoryID': self.CategoryID,
            'CategoryName': self.CategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Ingredient(db.Model, TimestampMixin):
    __tablename__ = 'Ingredients'
    IngredientID = db.Column(db.Integer, primary_key=True)
    SubCategoryID = db.Column(db.Integer, db.ForeignKey('IngredientSubCategories.SubCategoryID'), nullable=False)
    IngredientName = db.Column(db.String, nullable=False)
    PurchaseUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))
    PurchaseWeightVolume = db.Column(db.Float)
    PurchaseWeightUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))

    def to_dict(self):
        return {
            'IngredientID': self.IngredientID,
            'SubCategoryID': self.SubCategoryID,
            'IngredientName': self.IngredientName,
            'PurchaseUnitID': self.PurchaseUnitID,
            'PurchaseWeightVolume': self.PurchaseWeightVolume,
            'PurchaseWeightUnitID': self.PurchaseWeightUnitID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class IngredientSubCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientSubCategories'
    SubCategoryID = db.Column(db.Integer, primary_key=True)
    CategoryID = db.Column(db.Integer, db.ForeignKey('IngredientCategories.CategoryID'), nullable=False)
    SubCategoryName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SubCategoryID': self.SubCategoryID,
            'CategoryID': self.CategoryID,
            'SubCategoryName': self.SubCategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class MealPlanRecipe(db.Model):
    __tablename__ = 'MealPlanRecipes'
    MealPlanRecipeID = db.Column(db.Integer, primary_key=True)
    MealPlanID = db.Column(db.Integer, db.ForeignKey('MealPlans.MealPlanID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    MealType = db.Column(db.String)
    Date = db.Column(db.Date, nullable=False)

    def to_dict(self):
        return {
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'MealPlanID': self.MealPlanID,
            'RecipeID': self.RecipeID,
            'MealType': self.MealType,
            'Date': self.Date
        }

class MealPlan(db.Model, TimestampMixin):
    __tablename__ = 'MealPlans'
    MealPlanID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    PlanName = db.Column(db.String)
    StartDate = db.Column(db.Date)
    EndDate = db.Column(db.Date)

    def to_dict(self):
        return {
            'MealPlanID': self.MealPlanID,
            'UserID': self.UserID,
            'PlanName': self.PlanName,
            'StartDate': self.StartDate,
            'EndDate': self.EndDate,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeAuthor(db.Model):
    __tablename__ = 'RecipeAuthors'
    AuthorID = db.Column(db.Integer, primary_key=True)
    AuthorName = db.Column(db.String, nullable=False)
    AuthorImageURL = db.Column(db.String)

    def to_dict(self):
        return {
            'AuthorID': self.AuthorID,
            'AuthorName': self.AuthorName,
            'AuthorImageURL': self.AuthorImageURL
        }

class RecipeBook(db.Model):
    __tablename__ = 'RecipeBooks'
    BookID = db.Column(db.Integer, primary_key=True)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='CASCADE'), nullable=False)
    BookName = db.Column(db.String, nullable=False)
    CoverArtURL = db.Column(db.String)

    def to_dict(self):
        return {
            'BookID': self.BookID,
            'AuthorID': self.AuthorID,
            'BookName': self.BookName,
            'CoverArtURL': self.CoverArtURL
        }

class RecipeIngredient(db.Model):
    __tablename__ = 'RecipeIngredients'
    RecipeIngredientID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    SectionID = db.Column(db.Integer, db.ForeignKey('RecipeIngredientSections.SectionID', ondelete='CASCADE'))
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))

    def to_dict(self):
        return {
            'RecipeIngredientID': self.RecipeIngredientID,
            'RecipeID': self.RecipeID,
            'IngredientID': self.IngredientID,
            'SectionID': self.SectionID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID
        }

class RecipeIngredientSection(db.Model):
    __tablename__ = 'RecipeIngredientSections'
    SectionID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    SectionName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SectionID': self.SectionID,
            'RecipeID': self.RecipeID,
            'SectionName': self.SectionName
        }

class RecipeReview(db.Model):
    __tablename__ = 'RecipeReviews'
    ReviewID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    Rating = db.Column(db.Float, nullable=False)
    ReviewText = db.Column(db.String)

    def to_dict(self):
        return {
            'ReviewID': self.ReviewID,
            'UserID': self.UserID,
            'RecipeID': self.RecipeID,
            'Rating': self.Rating,
            'ReviewText': self.ReviewText
        }

class Recipe(db.Model, TimestampMixin):
    __tablename__ = 'Recipes'
    RecipeID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='SET NULL'))
    RecipeName = db.Column(db.String, nullable=False)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='SET NULL'))
    BookID = db.Column(db.Integer, db.ForeignKey('RecipeBooks.BookID', ondelete='SET NULL'))
    PageNumber = db.Column(db.Integer)
    OnlineURL = db.Column(db.String)
    CookTime = db.Column(db.Integer)
    Difficulty = db.Column(db.String)
    Type = db.Column(db.String)
    ImageURL = db.Column(db.String)
    Servings = db.Column(db.Integer)
    Cuisine = db.Column(db.String)

    def to_dict(self):
        return {
            'RecipeID': self.RecipeID,
            'UserID': self.UserID,
            'RecipeName': self.RecipeName,
            'AuthorID': self.AuthorID,
            'BookID': self.BookID,
            'PageNumber': self.PageNumber,
            'OnlineURL': self.OnlineURL,
            'CookTime': self.CookTime,
            'Difficulty': self.Difficulty,
            'Type': self.Type,
            'ImageURL': self.ImageURL,
            'Servings': self.Servings,
            'Cuisine': self.Cuisine,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeStep(db.Model):
    __tablename__ = 'RecipeSteps'
    StepID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    StepNumber = db.Column(db.Integer, nullable=False)
    Description = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'StepID': self.StepID,
            'RecipeID': self.RecipeID,
            'StepNumber': self.StepNumber,
            'Description': self.Description
        }

class RecipeTag(db.Model):
    __tablename__ = 'RecipeTags'
    RecipeTagID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    TagID = db.Column(db.Integer, db.ForeignKey('Tags.TagID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'RecipeTagID': self.RecipeTagID,
            'RecipeID': self.RecipeID,
            'TagID': self.TagID
        }

class ShoppingListIngredient(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingListIngredients'
    ShoppingListIngredientID = db.Column(db.Integer, primary_key=True)
    ShoppingListID = db.Column(db.Integer, db.ForeignKey('ShoppingLists.ShoppingListID', ondelete='CASCADE'), nullable=False)
    MealPlanRecipeID = db.Column(db.Integer, db.ForeignKey('MealPlanRecipes.MealPlanRecipeID', ondelete='CASCADE'))
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))
    IsManual = db.Column(db.Boolean)
    AlreadyHave = db.Column(db.Boolean)
    Purchased = db.Column(db.Boolean)

    def to_dict(self):
        return {
            'ShoppingListIngredientID': self.ShoppingListIngredientID,
            'ShoppingListID': self.ShoppingListID,
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'IngredientID': self.IngredientID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID,
            'IsManual': self.IsManual,
            'AlreadyHave': self.AlreadyHave,
            'Purchased': self.Purchased,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class ShoppingList(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingLists'
    ShoppingListID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'ShoppingListID': self.ShoppingListID,
            'UserID': self.UserID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Tag(db.Model):
    __tablename__ = 'Tags'
    TagID = db.Column(db.Integer, primary_key=True)
    TagName = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'TagID': self.TagID,
            'TagName': self.TagName
        }

class UnitConversion(db.Model):
    __tablename__ = 'UnitConversions'
    FromUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ToUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ConversionFactor = db.Column(db.Float, nullable=False)

    def to_dict(self):
        return {
            'FromUnitID': self.FromUnitID,
            'ToUnitID': self.ToUnitID,
            'ConversionFactor': self.ConversionFactor
        }

class Unit(db.Model):
    __tablename__ = 'Units'
    UnitID = db.Column(db.Integer, primary_key=True)
    UnitName = db.Column(db.String, nullable=False, unique=True)
    Abbreviation = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'UnitID': self.UnitID,
            'UnitName': self.UnitName,
            'Abbreviation': self.Abbreviation
        }

class User(db.Model, TimestampMixin):
    __tablename__ = 'Users'
    UserID = db.Column(db.Integer, primary_key=True)
    Username = db.Column(db.String, nullable=False, unique=True)
    PasswordHash = db.Column(db.String, nullable=False)
    Email = db.Column(db.String, nullable=False, unique=True)

    def set_password(self, password):
        self.PasswordHash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.PasswordHash, password)

    def to_dict(self):
        return {
            'UserID': self.UserID,
            'Username': self.Username,
            'Email': self.Email,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }


==================== C:\Code\recipe-app\backend\app\utils.py ====================

from flask import request, jsonify
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from .extensions import db
from .models import User
from datetime import datetime

def get_all(model):
    try:
        records = model.query.all()
        return jsonify([record.to_dict() for record in records]), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def get_by_id(model, id):
    try:
        record = model.query.get_or_404(id)
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def create_record(model):
    try:
        data = request.get_json()
        if issubclass(model, TimestampMixin):
            if 'CreatedAt' not in data:
                data['CreatedAt'] = datetime.utcnow()
            if 'UpdatedAt' not in data:
                data['UpdatedAt'] = datetime.utcnow()

        if model == User:
            password = data.pop('Password')
            user = model(**data)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            return jsonify(user.to_dict()), 201
        else:
            record = model(**data)
            db.session.add(record)
            db.session.commit()
            return jsonify(record.to_dict()), 201
    except IntegrityError as e:
        db.session.rollback()
        return jsonify({'error': 'A record with that unique value already exists.'}), 400
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def update_record(model, id):
    try:
        data = request.get_json()
        record = model.query.get_or_404(id)
        for key, value in data.items():
            setattr(record, key, value)
        if issubclass(model, TimestampMixin):
            record.UpdatedAt = datetime.utcnow()
        db.session.commit()
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def delete_record(model, id):
    try:
        record = model.query.get_or_404(id)
        db.session.delete(record)
        db.session.commit()
        return '', 204
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500


==================== C:\Code\recipe-app\backend\app\__init__.py ====================

from flask import Flask
from .extensions import db
from .models import IngredientCategory, Ingredient, IngredientSubCategory, MealPlanRecipe, MealPlan, RecipeAuthor, RecipeBook, RecipeIngredient, RecipeIngredientSection, RecipeReview, Recipe, RecipeStep, RecipeTag, ShoppingListIngredient, ShoppingList, Tag, UnitConversion, Unit, User
from .generic_crud import create_crud_blueprint
from sqlalchemy import inspect

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../../mydatabase2.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    db.init_app(app)
    
    with app.app_context():
        # Print all tables in the database
        inspector = inspect(db.engine)
        print(inspector.get_table_names())

    # Register blueprints
    app.register_blueprint(create_crud_blueprint(IngredientCategory, '/ingredient_categories'))
    app.register_blueprint(create_crud_blueprint(Ingredient, '/ingredients'))
    app.register_blueprint(create_crud_blueprint(IngredientSubCategory, '/ingredient_subcategories'))
    app.register_blueprint(create_crud_blueprint(MealPlanRecipe, '/meal_plan_recipes'))
    app.register_blueprint(create_crud_blueprint(MealPlan, '/meal_plans'))
    app.register_blueprint(create_crud_blueprint(RecipeAuthor, '/recipe_authors'))
    app.register_blueprint(create_crud_blueprint(RecipeBook, '/recipe_books'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredient, '/recipe_ingredients'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredientSection, '/recipe_ingredient_sections'))
    app.register_blueprint(create_crud_blueprint(RecipeReview, '/recipe_reviews'))
    app.register_blueprint(create_crud_blueprint(Recipe, '/recipes'))
    app.register_blueprint(create_crud_blueprint(RecipeStep, '/recipe_steps'))
    app.register_blueprint(create_crud_blueprint(RecipeTag, '/recipe_tags'))
    app.register_blueprint(create_crud_blueprint(ShoppingListIngredient, '/shopping_list_ingredients'))
    app.register_blueprint(create_crud_blueprint(ShoppingList, '/shopping_lists'))
    app.register_blueprint(create_crud_blueprint(Tag, '/tags'))
    app.register_blueprint(create_crud_blueprint(UnitConversion, '/unit_conversions'))
    app.register_blueprint(create_crud_blueprint(Unit, '/units'))
    app.register_blueprint(create_crud_blueprint(User, '/users'))

    return app


==================== C:\Code\recipe-app\backend\instance\mydatabase2.db ====================



==================== C:\Code\recipe-app\client.txt ====================



==================== C:\Code\recipe-app\client\.eslintrc.cjs ====================

module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}


==================== C:\Code\recipe-app\client\index.html ====================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


==================== C:\Code\recipe-app\client\postcss.config.js ====================

export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };
  

==================== C:\Code\recipe-app\client\README.md ====================

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh


==================== C:\Code\recipe-app\client\tailwind.config.js ====================

/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [
      require('daisyui'),
    ],
    daisyui: {
      themes: ["light", "dark", "cupcake", "bumblebee", "emerald", "corporate", "synthwave", "retro", "cyberpunk", "valentine", "halloween", "garden", "forest", "aqua", "lofi", "pastel", "fantasy", "wireframe", "black", "luxury", "dracula", "cmyk", "autumn", "business", "acid", "lemonade", "night", "coffee", "winter"],
    },
  }
  

==================== C:\Code\recipe-app\client\vite.config.js ====================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ''),
      },
    },
  },
});


==================== C:\Code\recipe-app\client\public\vite.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

==================== C:\Code\recipe-app\client\src\App.css ====================



==================== C:\Code\recipe-app\client\src\App.jsx ====================

import React from 'react';
import AppRoutes from './routes';
import NavBar from './components/NavBar';
import { useAuth } from './context/AuthContext';
import SideBar from './components/SideBar';

function App() {
  const { isAuthenticated } = useAuth();

  return (
    <div className="flex flex-col min-h-screen">
      <NavBar />
      <div className="flex grow">
        {isAuthenticated && <SideBar />}
        <AppRoutes />
      </div>
    </div>
  );
}

export default App;


==================== C:\Code\recipe-app\client\src\index.css ====================

@tailwind base;
@tailwind components;
@tailwind utilities;


==================== C:\Code\recipe-app\client\src\main.jsx ====================

import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';
import { AuthProvider } from './context/AuthContext';
import { DataProvider } from './context/DataContext';

const rootElement = document.getElementById('root');
const root = createRoot(rootElement);

root.render(
  <BrowserRouter>
    <AuthProvider>
      <DataProvider>
        <App />
      </DataProvider>
    </AuthProvider>
  </BrowserRouter>
);


==================== C:\Code\recipe-app\client\src\routes.jsx ====================

// src/routes.jsx

import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import Register from './pages/Register';
import ManageCategories from './pages/ManageCategories';
import ManageSubCategories from './pages/ManageSubCategories';
import ManageIngredients from './pages/ManageIngredients';
import ManageRecipes from './pages/ManageRecipes';
import ManageAuthors from './pages/ManageAuthors';
import ManageRecipeBooks from './pages/ManageRecipeBooks';
import ManageMealPlans from './pages/ManageMealPlans';
import PrivateRoute from './components/PrivateRoute';
import MealPlanDetails from './pages/MealPlanDetails';

import Home from './pages/Home';

function AppRoutes() {
  return (
    <Routes>
      <Route path="login" element={<Login />} />
      <Route path="register" element={<Register />} />
      <Route path="/" element={<PrivateRoute><Home /></PrivateRoute>} />
      <Route path="/meal-plan/:mealPlanId" element={<PrivateRoute><MealPlanDetails /></PrivateRoute>} />
      <Route path="admin">
        <Route index element={<PrivateRoute><Dashboard /></PrivateRoute>} />
        <Route path="manage-categories" element={<PrivateRoute><ManageCategories /></PrivateRoute>} />
        <Route path="manage-sub-categories" element={<PrivateRoute><ManageSubCategories /></PrivateRoute>} />
        <Route path="manage-ingredients" element={<PrivateRoute><ManageIngredients /></PrivateRoute>} />
        <Route path="manage-recipes" element={<PrivateRoute><ManageRecipes /></PrivateRoute>} />
        <Route path="manage-authors" element={<PrivateRoute><ManageAuthors /></PrivateRoute>} />
        <Route path="manage-recipe-books" element={<PrivateRoute><ManageRecipeBooks /></PrivateRoute>} />
        <Route path="manage-meal-plans" element={<PrivateRoute><ManageMealPlans /></PrivateRoute>} />
      </Route>

    </Routes>
  );
}

export default AppRoutes;


==================== C:\Code\recipe-app\client\src\supabaseClient.js ====================

// src/supabaseClient.js

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://fovbbeeexjqmcivjaujs.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZvdmJiZWVleGpxbWNpdmphdWpzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTk1Nzg2NjksImV4cCI6MjAzNTE1NDY2OX0.F3M2b5cR9gKJo5muAZ45bgs8LKkf8znkMlixf7wN_88';

export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);


==================== C:\Code\recipe-app\client\src\assets\react.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

==================== C:\Code\recipe-app\client\src\components\AddAuthorModal.jsx ====================

// src/components/AddAuthorModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';

function AddAuthorModal() {
  const [authorName, setAuthorName] = useState('');
  const [authorImageURL, setAuthorImageURL] = useState('');
  const { createAuthor } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createAuthor(authorName, authorImageURL);
      document.getElementById('add_author_modal').close();
    } catch (error) {
      alert('Failed to add author');
    }
  };

  return (
    <Modal id="add_author_modal" title="Add Author">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Author Name"
          value={authorName}
          onChange={(e) => setAuthorName(e.target.value)}
          required
        />
        <TextInput
          label="Author Image URL"
          value={authorImageURL}
          onChange={(e) => setAuthorImageURL(e.target.value)}
        />
        <Button>Add Author</Button>
      </form>
    </Modal>
  );
}

export default AddAuthorModal;


==================== C:\Code\recipe-app\client\src\components\AddCategoryModal.jsx ====================

// src/components/AddCategoryModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Button from './ui/Button';

function AddCategoryModal() {
  const [categoryName, setCategoryName] = useState('');
  const { createCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createCategory(categoryName);
      document.getElementById('add_category_modal').close();
    } catch (error) {
      alert('Failed to add category');
    }
  };

  return (
    <Modal id="add_category_modal" title="Add Category">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Category Name"
          value={categoryName}
          onChange={(e) => setCategoryName(e.target.value)}
          required
        />
        <Button>Add Category</Button>
      </form>
    </Modal>
  );
}

export default AddCategoryModal;


==================== C:\Code\recipe-app\client\src\components\AddIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Select from './ui/Select';
import Button from './ui/Button';

function AddIngredientModal({ onIngredientAdded = () => {} }) {
  const [ingredientName, setIngredientName] = useState('');
  const [purchaseWeightVolume, setPurchaseWeightVolume] = useState('');
  const [purchaseUnitId, setPurchaseUnitId] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const [subCategoryId, setSubCategoryId] = useState('');
  const [purchaseWeightUnitId, setPurchaseWeightUnitId] = useState('');

  const { categories, subCategories, units, createIngredient } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const ingredient = {
      IngredientName: ingredientName,
      PurchaseWeightVolume: purchaseWeightVolume,
      PurchaseUnitID: purchaseUnitId,
      SubCategoryID: subCategoryId,
      PurchaseWeightUnitID: purchaseWeightUnitId,
    };

    try {
      const newIngredient = await createIngredient(ingredient);
      onIngredientAdded(newIngredient);
      document.getElementById('add_ingredient_modal').close();
    } catch (error) {
      alert('Failed to add ingredient');
    }
  };

  const filteredSubCategories = subCategories.filter(
    (subCategory) => subCategory.CategoryID === parseInt(categoryId)
  );

  const unitOptions = units.map((unit) => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  const subCategoryOptions = filteredSubCategories.map((subCategory) => ({
    value: subCategory.SubCategoryID,
    label: subCategory.SubCategoryName,
  }));

  return (
    <Modal id="add_ingredient_modal" title="Add Ingredient" className="modal modal-bottom sm:modal-middle">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Ingredient Name"
          value={ingredientName}
          onChange={(e) => setIngredientName(e.target.value)}
          required
        />
        <TextInput
          label="Purchase Weight Volume"
          value={purchaseWeightVolume}
          onChange={(e) => setPurchaseWeightVolume(e.target.value)}
          required
        />
        <Select
          label="Purchase Unit"
          value={purchaseUnitId}
          onChange={(e) => setPurchaseUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Select
          label="Sub-Category"
          value={subCategoryId}
          onChange={(e) => setSubCategoryId(e.target.value)}
          required
          options={subCategoryOptions}
          defaultOption="Select a sub-category"
          disabled={!categoryId} // Disable until a category is selected
        />
        <Select
          label="Purchase Weight Unit"
          value={purchaseWeightUnitId}
          onChange={(e) => setPurchaseWeightUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Button>Add Ingredient</Button>
      </form>
    </Modal>
  );
}

export default AddIngredientModal;


==================== C:\Code\recipe-app\client\src\components\AddMealPlanModal.jsx ====================

// src/components/AddMealPlanModal.jsx

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';

function AddMealPlanModal() {
  const [planName, setPlanName] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const { createMealPlan } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const mealPlan = {
      PlanName: planName,
      StartDate: startDate,
      EndDate: endDate,
      UserID: 1, // Adjust as needed
    };

    try {
      await createMealPlan(mealPlan);
      document.getElementById('add_meal_plan_modal').close();
    } catch (error) {
      alert('Failed to add meal plan');
    }
  };

  return (
    <Modal id="add_meal_plan_modal" title="Add Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Plan Name"
          value={planName}
          onChange={(e) => setPlanName(e.target.value)}
          required
        />
        <TextInput
          label="Start Date"
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          required
        />
        <TextInput
          label="End Date"
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          required
        />
        <Button>Add Meal Plan</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanModal;


==================== C:\Code\recipe-app\client\src\components\AddMealPlanRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import Select from './ui/Select';
import { format, isValid } from 'date-fns';
import TextInput from './ui/TextInput';

function AddMealPlanRecipeModal({ mealPlanId, defaultDate, defaultMealType, defaultRecipeId, mealPlanRecipeId }) {

  const [recipeId, setRecipeId] = useState('');
  const [date, setDate] = useState(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
  const [mealType, setMealType] = useState(defaultMealType || '');
  const [currentMealPlanRecipeId, setCurrentMealPlanRecipeId] = useState(mealPlanRecipeId);

  const { recipes, createMealPlanRecipe, updateMealPlanRecipe } = useData();

  useEffect(() => {
    setDate(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
    setMealType(defaultMealType || '');
    setRecipeId(defaultRecipeId || '');
    setCurrentMealPlanRecipeId(mealPlanRecipeId || '');
  }, [defaultDate, defaultMealType, defaultRecipeId, mealPlanRecipeId]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!mealPlanId || !recipeId || !mealType || !date) {
      alert('All fields are required.');
      return;
    }

    const mealPlanRecipe = {
      MealPlanID: mealPlanId,
      RecipeID: recipeId,
      MealType: mealType,
      Date: date,
    };

    console.log("Submitting mealPlanRecipeId:", currentMealPlanRecipeId);

    try {
      if (currentMealPlanRecipeId) {
        // Update the existing meal plan recipe
        await updateMealPlanRecipe(currentMealPlanRecipeId, mealPlanRecipe);
      } else {
        // Create a new meal plan recipe
        await createMealPlanRecipe(mealPlanRecipe);
      }
      document.getElementById('add_meal_plan_recipe_modal').close();
      setRecipeId('');
      setMealType('');
      setDate('');
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add/update meal plan recipe');
    }
  };

  const recipeOptions = recipes.map(recipe => ({
    value: recipe.RecipeID,
    label: recipe.RecipeName,
  }));

  return (
    <Modal id="add_meal_plan_recipe_modal" title="Add/Update Meal in Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <Select
          label="Recipe"
          value={recipeId}
          onChange={(e) => setRecipeId(e.target.value)}
          required
          options={recipeOptions}
          defaultOption="Select a recipe"
        />
        <TextInput
          label="Date"
          type="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          required
        />
        <Select
          label="Meal Type"
          value={mealType}
          onChange={(e) => setMealType(e.target.value)}
          required
          options={[
            { value: 'Breakfast', label: 'Breakfast' },
            { value: 'Lunch', label: 'Lunch' },
            { value: 'Dinner', label: 'Dinner' }
          ]}
          defaultOption="Select a meal type"
        />
        <Button type="submit">{currentMealPlanRecipeId ? 'Update Meal' : 'Add Meal'}</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanRecipeModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeBookModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeBookModal() {
  const [bookName, setBookName] = useState('');
  const [authorID, setAuthorID] = useState('');
  const [coverArtURL, setCoverArtURL] = useState('');

  const { authors, createRecipeBook } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const recipeBook = {
      AuthorID: authorID,
      BookName: bookName,
      CoverArtURL: coverArtURL
    };

    try {
      await createRecipeBook(recipeBook);
      document.getElementById('add_recipe_book_modal').close();
    } catch (error) {
      alert('Failed to add book');
    }
  };

  const authorOptions = authors.map(author => ({
    value: author.AuthorID,
    label: author.AuthorName,
  }));

  return (
    <Modal id="add_recipe_book_modal" title="Add Recipe Book">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Book Name"
          value={bookName}
          onChange={(e) => setBookName(e.target.value)}
          required
        />
        <Select
          label="Author"
          value={authorID}
          onChange={(e) => setAuthorID(e.target.value)}
          required
          options={authorOptions}
          defaultOption="Select an author"
        />
        <TextInput
          label="Cover Art URL"
          value={coverArtURL}
          onChange={(e) => setCoverArtURL(e.target.value)}
        />
        <Button>Add Book</Button>
      </form>
    </Modal>
  );
}

export default AddRecipeBookModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import Fuse from 'fuse.js';
import { useData } from '../context/DataContext';
import AddIngredientModal from './AddIngredientModal';
import Table from './ui/Table';
import Button from './ui/Button';
import Modal from './ui/Modal';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeIngredientModal({ recipeId }) {
  const [selectedIngredientId, setSelectedIngredientId] = useState('');
  const [quantity, setQuantity] = useState('');
  const [selectedUnitId, setSelectedUnitId] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredIngredients, setFilteredIngredients] = useState([]);
  const [defaultUnitId, setDefaultUnitId] = useState('');

  const { ingredients, units, categories, subCategories, createRecipeIngredient } = useData();

  useEffect(() => {
    if (ingredients.length && categories.length && subCategories.length) {
      const updatedIngredients = ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      });
      setFilteredIngredients(updatedIngredients);
    }
  }, [ingredients, categories, subCategories]);

  const handleSearch = (e) => {
    const term = e.target.value;
    setSearchTerm(term);

    if (term === '') {
      setFilteredIngredients(ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      }));
    } else {
      const fuse = new Fuse(filteredIngredients, {
        keys: ['IngredientName', 'CategoryName', 'SubCategoryName'],
        threshold: 0.3, // Adjust the threshold as needed
      });

      const result = fuse.search(term);
      setFilteredIngredients(result.map((r) => r.item));
    }
  };

  const handleAddClick = (ingredientId) => {
    const ingredient = ingredients.find((ing) => ing.IngredientID === ingredientId);
    if (ingredient) {
      setSelectedIngredientId(ingredientId);
      setDefaultUnitId(ingredient.PurchaseUnitID || ''); // Handle missing PurchaseUnitID
      setSelectedUnitId(ingredient.PurchaseUnitID || ''); // Set the default unit id
      document.getElementById('quantity_unit_modal').showModal();
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = {
      RecipeID: recipeId,
      IngredientID: selectedIngredientId,
      Quantity: parseFloat(quantity),
      UnitID: selectedUnitId || defaultUnitId,
    };

    try {
      await createRecipeIngredient(data);
      window.location.reload(); // Refresh the page to show the new ingredient
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add ingredient');
    }
  };

  const handleAddNewIngredient = () => {
    document.getElementById('add_ingredient_modal').showModal();
  };

  const handleNewIngredientAdded = (newIngredient) => {
    if (newIngredient && newIngredient.PurchaseUnitID) {
      setFilteredIngredients((prevIngredients) => [
        ...prevIngredients,
        {
          ...newIngredient,
          CategoryName: '',
          SubCategoryName: '',
        },
      ]);

      // Automatically select the newly added ingredient and open the quantity/unit modal
      setSelectedIngredientId(newIngredient.IngredientID);
      setDefaultUnitId(newIngredient.PurchaseUnitID);
      setSelectedUnitId(newIngredient.PurchaseUnitID);
      setQuantity(''); // Reset the quantity
      document.getElementById('quantity_unit_modal').showModal();
    } else {
      alert('New ingredient does not have a PurchaseUnitID');
    }
  };

  const headers = ['Ingredient', 'Category', 'Sub-Category', 'Action'];
  const data = filteredIngredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientName,
      ingredient.CategoryName,
      ingredient.SubCategoryName,
      <Button
        size="sm"
        variant="primary"
        outline={true}
        onClick={() => handleAddClick(ingredient.IngredientID)}
      >
        Add
      </Button>
    ],
  }));

  const unitOptions = units.map(unit => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  return (
    <div>
      <Modal id="add_recipe_ingredient_modal" title="Add Ingredient to Recipe" wide={true}>
        <div className='flex flex-col gap-4 mb-8'>
          <TextInput
            label="Search Ingredient"
            value={searchTerm}
            onChange={handleSearch}
            placeholder="Type to search ingredients..."
          />

          <Button
            outline={true}
            size='sm'
            onClick={handleAddNewIngredient}
          >Add New Ingredient</Button>
        </div>
        <Table headers={headers} data={data} />
      </Modal>

      <Modal id="quantity_unit_modal" title="Enter Quantity and Unit">
        <form onSubmit={handleSubmit} className="flex gap-4 flex-col mt-4">
          <TextInput
            label="Quantity"
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
            required
          />

          <Select
            label="Unit"
            value={selectedUnitId || defaultUnitId}
            onChange={(e) => setSelectedUnitId(e.target.value)}
            required
            options={unitOptions}
            defaultOption="Select a unit"
          />
          <Button>Add Ingredient</Button>
        </form>
      </Modal>

      <AddIngredientModal onIngredientAdded={handleNewIngredientAdded} />
    </div>
  );
}

export default AddRecipeIngredientModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeModal() {
    const [recipeName, setRecipeName] = useState('');
    const [authorID, setAuthorID] = useState('');
    const [bookID, setBookID] = useState('');
    const [pageNumber, setPageNumber] = useState('');
    const [onlineURL, setOnlineURL] = useState('');
    const [cookTime, setCookTime] = useState('');
    const [difficulty, setDifficulty] = useState('');
    const [type, setType] = useState('');
    const [imageURL, setImageURL] = useState('');
    const [servings, setServings] = useState('');
    const [cuisine, setCuisine] = useState('');
    const [filteredBooks, setFilteredBooks] = useState([]);

    const { authors, recipeBooks, createRecipe } = useData();

    useEffect(() => {
        if (authorID) {
            setFilteredBooks(recipeBooks.filter(book => book.AuthorID === parseInt(authorID)));
        } else {
            setFilteredBooks([]);
        }
    }, [authorID, recipeBooks]);

    const handleAuthorChange = (e) => {
        setAuthorID(e.target.value);
        setBookID(''); // Reset book selection when author changes
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        const recipe = {
            RecipeName: recipeName,
            AuthorID: parseInt(authorID) || null,
            BookID: parseInt(bookID) || null,
            PageNumber: parseInt(pageNumber) || null,
            OnlineURL: onlineURL,
            CookTime: parseInt(cookTime) || null,
            Difficulty: difficulty,
            Type: type,
            ImageURL: imageURL,
            Servings: parseInt(servings) || null,
            Cuisine: cuisine,
        };

        try {
            await createRecipe(recipe);
            document.getElementById('add_recipe_modal').close();
        } catch (error) {
            alert('Failed to add recipe');
        }
    };

    const authorOptions = authors.map(author => ({
        value: author.AuthorID,
        label: author.AuthorName
    }));

    const bookOptions = filteredBooks.map(book => ({
        value: book.BookID,
        label: book.BookName
    }));

    return (
        <Modal id="add_recipe_modal" title="Add Recipe">
            <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
                <TextInput
                    label="Recipe Name"
                    value={recipeName}
                    onChange={(e) => setRecipeName(e.target.value)}
                    required
                />
                <Select
                    label="Author"
                    value={authorID}
                    onChange={handleAuthorChange}
                    options={authorOptions}
                    defaultOption="Select an author"
                />
                <Select
                    label="Book"
                    value={bookID}
                    onChange={(e) => setBookID(e.target.value)}
                    options={bookOptions}
                    defaultOption="Select a book"
                    disabled={!authorID}
                />
                <TextInput
                    label="Page Number"
                    type="number"
                    value={pageNumber}
                    onChange={(e) => setPageNumber(e.target.value)}
                    disabled={!bookID}
                />
                <TextInput
                    label="Online URL"
                    type="url"
                    value={onlineURL}
                    onChange={(e) => setOnlineURL(e.target.value)}
                />
                <TextInput
                    label="Cook Time (minutes)"
                    type="number"
                    value={cookTime}
                    onChange={(e) => setCookTime(e.target.value)}
                    required
                />
                <TextInput
                    label="Difficulty"
                    value={difficulty}
                    onChange={(e) => setDifficulty(e.target.value)}
                />
                <TextInput
                    label="Type"
                    value={type}
                    onChange={(e) => setType(e.target.value)}
                />
                <TextInput
                    label="Image URL"
                    type="url"
                    value={imageURL}
                    onChange={(e) => setImageURL(e.target.value)}
                />
                <TextInput
                    label="Servings"
                    type="number"
                    value={servings}
                    onChange={(e) => setServings(e.target.value)}
                    required
                />
                <TextInput
                    label="Cuisine"
                    value={cuisine}
                    onChange={(e) => setCuisine(e.target.value)}
                />
                <Button>Add Recipe</Button>
            </form>
        </Modal>
    );
}

export default AddRecipeModal;


==================== C:\Code\recipe-app\client\src\components\AddSubCategoryModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddSubCategoryModal() {
  const [subCategoryName, setSubCategoryName] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const { categories, createSubCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const subCategory = {
      SubCategoryName: subCategoryName,
      CategoryID: categoryId,
    };

    try {
      await createSubCategory(subCategory);
      document.getElementById('add_sub_category_modal').close();
    } catch (error) {
      console.error('Error adding sub-category:', error);
      alert('Failed to add sub-category');
    }
  };

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  return (
    <Modal id="add_sub_category_modal" title="Add Sub-Category">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Sub-Category Name"
          value={subCategoryName}
          onChange={(e) => setSubCategoryName(e.target.value)}
          required
        />        
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Button>Add Sub-Category</Button>
      </form>
    </Modal>
  );
}

export default AddSubCategoryModal;


==================== C:\Code\recipe-app\client\src\components\AuthorTable.jsx ====================

// src/components/AuthorTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import Table from './ui/Table';
import DeleteButton from './ui/DeleteButton';

function AuthorTable() {
  const { authors, deleteAuthor } = useData();

  const handleDelete = async (authorId) => {
    if (window.confirm('Are you sure you want to delete this author?')) {
      await deleteAuthor(authorId);
    }
  };

  const headers = ['#', 'Author Name', 'Actions'];

  const data = authors.map((author, index) => ({
    id: author.AuthorID,
    cells: [
      index + 1,
      author.AuthorName,
      <DeleteButton onClick={() => handleDelete(author.AuthorID)} />      
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default AuthorTable;


==================== C:\Code\recipe-app\client\src\components\Calendar.jsx ====================

// src/components/Calendar.jsx
import React from 'react';
import Button from './ui/Button';
import { format, eachDayOfInterval, parseISO } from 'date-fns';

const Calendar = ({ mealPlan, mealPlanRecipes, recipes, onAddMeal, onModifyMeal }) => {
  const days = eachDayOfInterval({
    start: parseISO(mealPlan.StartDate),
    end: parseISO(mealPlan.EndDate),
  });

  const getMealForDay = (date, mealType) => {
    return mealPlanRecipes.find(
      (mpr) => mpr.Date === format(date, 'yyyy-MM-dd') && mpr.MealType === mealType
    );
  };

  const getRecipeName = (recipeId) => {
    const recipe = recipes.find(r => r.RecipeID === recipeId);
    return recipe ? recipe.RecipeName : 'Unknown Recipe';
  };

  return (
    <div className="grid grid-cols-1 gap-4">
      {days.map((day) => (
        <div key={day} className="border p-2">
          <h3 className="font-bold">{format(day, 'eee, MMM d')}</h3>
          {['Breakfast', 'Lunch', 'Dinner'].map((mealType) => {
            const meal = getMealForDay(day, mealType);
            return (
              <div key={mealType} className="my-2">
                <h4 className="font-semibold">{mealType}</h4>
                {meal ? (
                  <div>
                    <div>{getRecipeName(meal.RecipeID)}</div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="secondary"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID)}
                      >
                        Modify
                      </Button>
                      <Button
                        size="sm"
                        variant="error"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID, true)}
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                ) : (
                  <Button
                    size="sm"
                    variant="secondary"
                    outline
                    onClick={() => onAddMeal(day, mealType)}
                  >
                    Add {mealType}
                  </Button>
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
};

export default Calendar;


==================== C:\Code\recipe-app\client\src\components\CategoryTable.jsx ====================

// src/components/CategoryTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function CategoryTable() {
  const { categories, subCategories, deleteCategory } = useData();

  const handleDelete = async (categoryId) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      await deleteCategory(categoryId);
    }
  };

  const headers = ['ID', 'Category Name', 'Sub-Categories', 'Actions'];

  const data = categories.map((category, index) => {
    const categorySubCategories = subCategories.filter(sub => sub.CategoryID === category.CategoryID).map(sub => sub.SubCategoryName).join(', ');

    return {
      id: category.CategoryID,
      cells: [
        category.CategoryID,
        category.CategoryName,
        categorySubCategories || 'None',
        <DeleteButton onClick={() => handleDelete(category.CategoryID)} />
      ],
    };
  });

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default CategoryTable;


==================== C:\Code\recipe-app\client\src\components\IngredientTable.jsx ====================

// src/components/IngredientTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function IngredientTable() {
  const { ingredients, categories, subCategories, units, deleteIngredient } = useData();

  const handleDelete = async (ingredientId) => {
    if (window.confirm('Are you sure you want to delete this ingredient?')) {
      try {
        await deleteIngredient(ingredientId);
      } catch (error) {
        alert('Failed to delete ingredient');
      }
    }
  };

  const getSubCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    return subCategory ? subCategory.SubCategoryName : 'Unknown';
  };

  const getCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    if (subCategory) {
      const category = categories.find(category => category.CategoryID === subCategory.CategoryID);
      return category ? category.CategoryName : 'Unknown';
    }
    return 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const headers = ['ID', 'Ingredient Name', 'Purchase Weight Volume', 'Purchase Unit', 'Category', 'Subcategory', 'Purchase Weight Unit', 'Actions'];

  const data = ingredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientID,
      ingredient.IngredientName,
      ingredient.PurchaseWeightVolume,
      getUnitName(ingredient.PurchaseUnitID),
      getCategoryName(ingredient.SubCategoryID),
      getSubCategoryName(ingredient.SubCategoryID),
      getUnitName(ingredient.PurchaseWeightUnitID),
      <DeleteButton onClick={() => handleDelete(ingredient.IngredientID)} />
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default IngredientTable;


==================== C:\Code\recipe-app\client\src\components\MealPlanRecipeTable.jsx ====================

// src/components/MealPlanRecipeTable.jsx

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanRecipeTable({ mealPlanId }) {
    const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

    const handleDelete = async (mealPlanRecipeId) => {
        if (window.confirm('Are you sure you want to delete this meal?')) {
            try {
                await deleteMealPlanRecipe(mealPlanRecipeId);
            } catch (error) {
                alert('Failed to delete meal');
            }
        }
    };

    const getRecipeName = (recipeId) => {
        const recipe = recipes.find(recipe => recipe.RecipeID === recipeId);
        return recipe ? recipe.RecipeName : 'Unknown';
    };

    const headers = ['ID', 'Recipe', 'Meal Type', 'Date', 'Actions'];

    const data = mealPlanRecipes
        .filter(mpr => mpr.MealPlanID === mealPlanId)
        .map((mealPlanRecipe) => ({
            id: mealPlanRecipe.MealPlanRecipeID,
            cells: [
                mealPlanRecipe.MealPlanRecipeID,
                getRecipeName(mealPlanRecipe.RecipeID),
                mealPlanRecipe.MealType,
                mealPlanRecipe.Date,
                <DeleteButton onClick={() => handleDelete(mealPlanRecipe.MealPlanRecipeID)} />,
            ],
        }));

    function handleAddClick() {
        document.getElementById('add_meal_plan_recipe_modal').showModal();
    }

    return (
        <div className="overflow-x-auto">
            <Button size='sm' outline={true} variant='secondary' onClick={handleAddClick}>Add meal</Button>
            <Table headers={headers} data={data} />
        </div>
    );
}

export default MealPlanRecipeTable;


==================== C:\Code\recipe-app\client\src\components\MealPlanTable.jsx ====================

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanTable({ onManageMeals }) {
  const { mealPlans, deleteMealPlan } = useData();

  const handleDelete = async (mealPlanId) => {
    if (window.confirm('Are you sure you want to delete this meal plan?')) {
      try {
        await deleteMealPlan(mealPlanId);
      } catch (error) {
        alert('Failed to delete meal plan');
      }
    }
  };

  const headers = ['ID', 'Plan Name', 'Start Date', 'End Date', 'Actions'];

  const data = mealPlans.map((mealPlan) => ({
    id: mealPlan.MealPlanID,
    cells: [
      mealPlan.MealPlanID,
      mealPlan.PlanName,
      mealPlan.StartDate,
      mealPlan.EndDate,
      <div className="flex gap-2">
        <Button
          size="sm"
          variant="primary"
          outline={true}
          onClick={() => onManageMeals(mealPlan)}
        >
          Manage Meals
        </Button>
        <DeleteButton onClick={() => handleDelete(mealPlan.MealPlanID)} />
      </div>
    ],
  }));

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default MealPlanTable;


==================== C:\Code\recipe-app\client\src\components\NavBar.jsx ====================

// src/components/NavBar.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ThemeSwitcher from './ThemeSwitcher';
import { useAuth } from '../context/AuthContext';

const NavBar = () => {
  const { isAuthenticated, logout } = useAuth();

  return (
    <nav className="navbar justify-between bg-base-300">
      <a className="btn btn-ghost text-lg">
        <img alt="Logo" src="../vite.svg" className="w-4" />
        Recipe App
      </a>
      <div className="dropdown dropdown-end sm:hidden">
        <button className="btn btn-ghost">
          <i className="fa-solid fa-bars text-lg"></i>
        </button>

        <ul tabIndex="0" className="dropdown-content menu z-[1] bg-base-200 p-6 rounded-box shadow w-56 gap-2">
          <li><a>About</a></li>
          <li><a>Pricing</a></li>
          <li><a>Blog</a></li>
          <li><a>Contact</a></li>
          <a className="btn btn-sm btn-primary">Log in</a>
        </ul>
      </div>
      <div className="hidden sm:flex gap-2">
        <ThemeSwitcher />       
        {isAuthenticated ? (
          <button
            onClick={logout}
            className="btn btn-primary btn-sm"
          >
            Logout
          </button>
        ) : (
          <>
            <Link to="/register" className="btn btn-ghost btn-sm">Register</Link>
            <Link to="/login" className="btn btn-primary btn-sm">Login</Link>
          </>
        )}
      </div>
    </nav>
  );
};

export default NavBar;


==================== C:\Code\recipe-app\client\src\components\PrivateRoute.jsx ====================

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import SideBar from './SideBar';

const PrivateRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  return (
    <div className="flex grow">     
      <div className="flex flex-col px-8 py-6 grow">
        {children}
      </div>
    </div>
  );
};

export default PrivateRoute;


==================== C:\Code\recipe-app\client\src\components\RecipeBookTable.jsx ====================

// src/components/RecipeBookTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';

function RecipeBookTable() {
  const { recipeBooks, authors, deleteRecipeBook } = useData();

  const handleDelete = async (bookId) => {
    if (window.confirm('Are you sure you want to delete this book?')) {
      try {
        await deleteRecipeBook(bookId);
      } catch (error) {
        alert('Failed to delete book');
      }
    }
  };

  const getAuthorName = (authorId) => {
    const author = authors.find(author => author.AuthorID === authorId);
    return author ? author.AuthorName : 'Unknown';
  };

  const headers = ['#', 'Book Name', 'Author Name', 'Actions'];

  const data = useMemo(() => 
    recipeBooks.map((book, index) => ({
      id: book.BookID,
      cells: [
        index + 1,
        book.BookName,
        getAuthorName(book.AuthorID),
        <DeleteButton onClick={() => handleDelete(book.BookID)} />,
      ],
    })),
    [recipeBooks, authors]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeBookTable;


==================== C:\Code\recipe-app\client\src\components\RecipeTable.jsx ====================

// src/components/RecipeTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function RecipeTable({ onAddIngredients }) {
  const { recipes, ingredients, units, recipeIngredients, deleteRecipe } = useData();

  const handleDelete = async (recipeId) => {
    if (window.confirm('Are you sure you want to delete this recipe?')) {
      try {
        await deleteRecipe(recipeId);
      } catch (error) {
        alert('Failed to delete recipe');
      }
    }
  };

  const getIngredientName = (ingredientId) => {
    const ingredient = ingredients.find(ingredient => ingredient.IngredientID === ingredientId);
    return ingredient ? ingredient.IngredientName : 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const renderIngredients = (recipeId) => {
    const filteredIngredients = recipeIngredients.filter(ri => ri.RecipeID === recipeId);
    return filteredIngredients.map(ingredient => (
      <li key={ingredient.RecipeIngredientID}>
        {ingredient.Quantity} {getUnitName(ingredient.UnitID)} of {getIngredientName(ingredient.IngredientID)}
      </li>
    ));
  };

  const headers = ['#', 'Recipe Name', 'Author ID', 'Ingredients', 'Actions'];

  const data = useMemo(() =>
    recipes.map((recipe, index) => ({
      id: recipe.RecipeID,
      cells: [
        index + 1,
        recipe.RecipeName,
        recipe.AuthorID,
        <ul className='list-disc ml-4'>
          {renderIngredients(recipe.RecipeID)}
        </ul>,
        <div className='flex gap-2'>
          <Button
            size="sm"
            variant="primary"
            outline={true}
            onClick={() => onAddIngredients(recipe.RecipeID)}
          >
            Add Ingredients
          </Button>
          <DeleteButton onClick={() => handleDelete(recipe.RecipeID)} />
        </div>
      ],
    })),
    [recipes, recipeIngredients, ingredients, units]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeTable;


==================== C:\Code\recipe-app\client\src\components\ShoppingList.jsx ====================

// src/components/ShoppingList.jsx

import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';

function ShoppingList({ mealPlanId }) {
    const { getShoppingList } = useData();
    const shoppingList = getShoppingList(mealPlanId);

    const headers = ['Ingredient Name', 'Quantity', 'Unit'];

    const data = shoppingList.map((ingredient) => ({
        id: ingredient.IngredientID,
        cells: [
            ingredient.IngredientName,
            ingredient.Quantity,
            ingredient.unit ? ingredient.unit.UnitName : 'Unknown'
        ],
    }));

    return (
        <div className="overflow-x-auto">
            <Table headers={headers} data={data} />
        </div>
    );
}

export default ShoppingList;


==================== C:\Code\recipe-app\client\src\components\ShoppingListModal.jsx ====================

// src/components/ShoppingListModal.jsx

import React from 'react';
import Modal from './ui/Modal';

function ShoppingListModal({ shoppingList }) {
    return (
        <Modal id="shopping_list_modal" title="Generated Shopping List">
            {shoppingList ? (
                <ul className="list-disc ml-4">
                    {shoppingList.map((item, index) => (
                        <li key={index}>{item.Quantity} {item.UnitName} of {item.IngredientName}</li>
                    ))}
                </ul>
            ) : (
                <p>No items in the shopping list.</p>
            )}
        </Modal>
    );
}

export default ShoppingListModal;


==================== C:\Code\recipe-app\client\src\components\SideBar.jsx ====================

// src/components/SideBar.jsx

import React from "react";
import { NavLink } from "react-router-dom";
import { FaTachometerAlt, FaList, FaSitemap, FaLeaf, FaBook, FaUser, FaUtensils, FaCalendarAlt } from "react-icons/fa";

const menuItems = [
  { title: "Ingredients", isTitle: true },
  { title: "Categories", link: "/admin/manage-categories", Icon: FaList },
  { title: "Sub-categories", link: "/admin/manage-sub-categories", Icon: FaSitemap },
  { title: "Ingredients", link: "/admin/manage-ingredients", Icon: FaLeaf },
  { title: "Recipes", isTitle: true },
  { title: "Recipes", link: "/admin/manage-recipes", Icon: FaUtensils },
  { title: "Authors", link: "/admin/manage-authors", Icon: FaUser },
  { title: "Recipe books", link: "/admin/manage-recipe-books", Icon: FaBook },
  { title: "Meal Plans", link: "/admin/manage-meal-plans", Icon: FaCalendarAlt },
];

const MenuItem = ({ item }) => {
  if (item.isTitle) {
    return <li className="menu-title">{item.title}</li>;
  }

  const { Icon } = item;

  return (
    <li>
      <NavLink to={item.link} className={({ isActive }) => (isActive ? "active" : "")}>
        <Icon className="inline mr-2" />
        {item.title}
      </NavLink>
    </li>
  );
};

export default function SideBar() {
  return (
    <aside className="sticky top-0 overflow-y-auto w-60 bg-base-200 p-4 min-w-60">
      <ul className="menu px-0 gap-1">
        {menuItems.map((item, index) => (
          <MenuItem key={index} item={item} />
        ))}
      </ul>
    </aside>
  );
}


==================== C:\Code\recipe-app\client\src\components\SubCategoryTable.jsx ====================

// src/components/SubCategoryTable.jsx
import React, { useState, useMemo } from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function SubCategoryTable() {
  const [selectedCategories, setSelectedCategories] = useState([]);
  const { categories, subCategories, deleteSubCategory } = useData();

  const handleDelete = async (subCategoryId) => {
    if (window.confirm('Are you sure you want to delete this sub-category?')) {
      try {
        await deleteSubCategory(subCategoryId);
      } catch (error) {
        alert('Failed to delete sub-category');
      }
    }
  };

  const getCategoryName = (categoryId) => {
    const category = categories.find(category => category.CategoryID === categoryId);
    return category ? category.CategoryName : 'Unknown';
  };

  const handleCategoryChange = (e) => {
    const selectedValue = parseInt(e.target.value);
    setSelectedCategories(prevSelected =>
      prevSelected.includes(selectedValue)
        ? prevSelected.filter(id => id !== selectedValue)
        : [...prevSelected, selectedValue]
    );
  };

  const filteredSubCategories = useMemo(() => 
    selectedCategories.length > 0
      ? subCategories.filter(subCategory => selectedCategories.includes(subCategory.CategoryID))
      : subCategories,
    [subCategories, selectedCategories]
  );

  const headers = ['#', 'Sub-Category Name', 'Category Name', 'Actions'];

  const data = useMemo(() =>
    filteredSubCategories.map((subCategory, index) => ({
      id: subCategory.SubCategoryID,
      cells: [
        index + 1,
        subCategory.SubCategoryName,
        getCategoryName(subCategory.CategoryID),
        <DeleteButton key={subCategory.SubCategoryID} onClick={() => handleDelete(subCategory.SubCategoryID)} />
      ],
    })),
    [filteredSubCategories, categories]
  );

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center mb-4">
        <label className="mr-2">Filter by Category:</label>
        <select
          className="select select-bordered"
          value=""
          onChange={handleCategoryChange}
        >
          <option value="" disabled>Select Categories</option>
          {categories.map(category => (
            <option
              key={category.CategoryID}
              value={category.CategoryID}
              disabled={selectedCategories.includes(category.CategoryID)}
            >
              {category.CategoryName}
            </option>
          ))}
        </select>
      </div>
      <div className="mb-4">
        {selectedCategories.map(categoryId => (
          <div key={categoryId} className="badge badge-primary mr-2">
            {getCategoryName(categoryId)}
            <button
              type="button"
              className="ml-1"
              onClick={() => setSelectedCategories(selectedCategories.filter(id => id !== categoryId))}
            >
              ✕
            </button>
          </div>
        ))}
      </div>
      <Table headers={headers} data={data} />
    </div>
  );
}

export default SubCategoryTable;


==================== C:\Code\recipe-app\client\src\components\ThemeSwitcher.jsx ====================

import React, { useEffect, useState } from 'react';

const ThemeSwitcher = () => {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
      setTheme(savedTheme);
    }
  }, []);

  const handleThemeChange = (event) => {
    const selectedTheme = event.target.value;
    document.documentElement.setAttribute('data-theme', selectedTheme);
    localStorage.setItem('theme', selectedTheme);
    setTheme(selectedTheme);
  };

  return (   
    <div className="dropdown dropdown-end">
      <select className="btn btn-ghost btn-sm" value={theme} onChange={handleThemeChange}>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
        <option value="cupcake">Cupcake</option>
        <option value="bumblebee">Bumblebee</option>
        <option value="emerald">Emerald</option>
        <option value="corporate">Corporate</option>
        <option value="synthwave">Synthwave</option>
        <option value="retro">Retro</option>
        <option value="cyberpunk">Cyberpunk</option>
        <option value="valentine">Valentine</option>
        <option value="halloween">Halloween</option>
        <option value="garden">Garden</option>
        <option value="forest">Forest</option>
        <option value="aqua">Aqua</option>
        <option value="lofi">Lofi</option>
        <option value="pastel">Pastel</option>
        <option value="fantasy">Fantasy</option>
        <option value="wireframe">Wireframe</option>
        <option value="black">Black</option>
        <option value="luxury">Luxury</option>
        <option value="dracula">Dracula</option>
        <option value="cmyk">CMYK</option>
        <option value="autumn">Autumn</option>
        <option value="business">Business</option>
        <option value="acid">Acid</option>
        <option value="lemonade">Lemonade</option>
        <option value="night">Night</option>
        <option value="coffee">Coffee</option>
        <option value="winter">Winter</option>
      </select>
    </div>
  );
};

export default ThemeSwitcher;


==================== C:\Code\recipe-app\client\src\components\ui\Button.jsx ====================

// src/components/ui/Button.jsx
import React from 'react';

const Button = ({ type, variant = 'primary', size = 'md', outline = false, block = false, circle = false, square = false, className = '', onClick, children }) => {
  const baseClass = 'btn';
  const variantClass = `btn-${variant}`;
  const sizeClass = `btn-${size}`;
  const outlineClass = outline ? 'btn-outline' : '';
  const blockClass = block ? 'btn-block' : '';
  const circleClass = circle ? 'btn-circle' : '';
  const squareClass = square ? 'btn-square' : '';

  const classes = `${baseClass} ${variantClass} ${sizeClass} ${outlineClass} ${blockClass} ${circleClass} ${squareClass} ${className}`;

  return (
    <button type={type} className={classes} onClick={onClick}>
      {children}
    </button>
  );
};

export default Button;


==================== C:\Code\recipe-app\client\src\components\ui\Card.jsx ====================

// src/components/ui/Card.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import Button from './Button';

const Card = ({ title, count, link, children }) => {
    return (
        <div className="card bg-base-100 w-96 shadow-xl">
            <div className="card-body">
                <h2 className="card-title">{title}</h2>
                {count && <p className="text-2xl font-bold">{count}</p>}
                {children}
                <div className="card-actions justify-end">
                    <Link to={link}>
                        <Button
                            variant='secondary'
                            outline={true}
                        >
                            Manage
                        </Button>
                    </Link>
                </div>
            </div>
        </div>
    );
};

export default Card;


==================== C:\Code\recipe-app\client\src\components\ui\DeleteButton.jsx ====================

// src/components/ui/DeleteButton.jsx
import React from 'react';
import Button from './Button';

const DeleteButton = ({ onClick }) => (
  <Button
    size="sm"
    variant="error"
    outline={true}
    onClick={onClick}
  >
    Delete
  </Button>
);

export default DeleteButton;


==================== C:\Code\recipe-app\client\src\components\ui\Modal.jsx ====================

import React from 'react';

const Modal = ({ id, title, children, wide }) => {
    const modalBoxClass = wide ? 'modal-box w-11/12 max-w-5xl' : 'modal-box';
    const modalClass = wide ? 'modal' : 'modal modal-bottom sm:modal-middle';

    return (
        <dialog id={id} className={modalClass}>
            <div className={modalBoxClass}>
                <form method="dialog">
                    <button className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <h3 className="font-bold text-lg">{title}</h3>
                {children}
            </div>
        </dialog>
    );
};

export default Modal;


==================== C:\Code\recipe-app\client\src\components\ui\Select.jsx ====================

// src/components/ui/Select.jsx
import React from 'react';

const Select = ({ label, value, onChange, required, options, defaultOption, disabled }) => {
  return (
    <label className="form-control">
      <div className="label">
        <span className="label-text">{label}</span>
      </div>
      <select
        className="select select-bordered"
        value={value}
        onChange={onChange}
        required={required}
        disabled={disabled}
      >
        <option value="" disabled>{defaultOption}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value} disabled={option.disabled}>
            {option.label}
          </option>
        ))}
      </select>
    </label>
  );
};

export default Select;


==================== C:\Code\recipe-app\client\src\components\ui\Table.jsx ====================

// src/components/ui/Table.jsx
import React, { useState } from 'react';
import { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';

const Table = ({ headers, data }) => {
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'ascending' });

  const sortedData = React.useMemo(() => {
    let sortableData = [...data];
    if (sortConfig.key) {
      sortableData.sort((a, b) => {
        const aKey = a.cells[headers.indexOf(sortConfig.key)];
        const bKey = b.cells[headers.indexOf(sortConfig.key)];

        if (aKey < bKey) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aKey > bKey) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableData;
  }, [data, sortConfig, headers]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (header) => {
    if (sortConfig.key === header) {
      return sortConfig.direction === 'ascending' ? <FaSortUp /> : <FaSortDown />;
    }
    return <FaSort />;
  };

  return (
    <div className="overflow-x-auto">
      <table className="table table-zebra">
        <thead>
          <tr>
            {headers.map((header, index) => (
              <th key={index} onClick={() => requestSort(header)} className="cursor-pointer">
                <div className="flex items-center">
                  {header}
                  <span className="ml-2">{getSortIcon(header)}</span>
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row, rowIndex) => (
            <tr key={row.id || rowIndex}>
              {row.cells.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Table;


==================== C:\Code\recipe-app\client\src\components\ui\TextInput.jsx ====================

import React from 'react';

const TextInput = ({ label, type = 'text', value, onChange, required = false, placeholder = '', className = 'input input-bordered', min, max }) => {
  return (
    <label className="form-control">
      {label && (
        <div className="label">
          <span className="label-text">{label}</span>
        </div>
      )}
      <input
        type={type}
        className={className}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
        min={min}
        max={max}
      />
    </label>
  );
};

export default TextInput;


==================== C:\Code\recipe-app\client\src\context\AuthContext.jsx ====================

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const storedAuth = localStorage.getItem('isAuthenticated');
    if (storedAuth === 'true') {
      setIsAuthenticated(true);
    }
    setLoading(false); // Indicate that the auth status has been checked
  }, []);

  const login = async (username, password) => {
    const response = await fetch('http://localhost:8000/api/users/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Password: password }),
    });

    if (response.ok) {
      setIsAuthenticated(true);
      localStorage.setItem('isAuthenticated', 'true');
      navigate('/');
    } else {
      alert('Login failed');
    }
  };

  const logout = () => {
    setIsAuthenticated(false);
    localStorage.removeItem('isAuthenticated');
    navigate('/login');
  };

  if (loading) {
    return <div>Loading...</div>; // Display a loading message or spinner while checking auth status
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


==================== C:\Code\recipe-app\client\src\context\DataContext.jsx ====================

import React, { createContext, useContext, useEffect, useState } from 'react';
import * as apiService from '../services/apiService';

const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [authors, setAuthors] = useState([]);
  const [recipeBooks, setRecipeBooks] = useState([]);
  const [recipes, setRecipes] = useState([]);
  const [units, setUnits] = useState([]);
  const [recipeIngredients, setRecipeIngredients] = useState([]);
  const [mealPlans, setMealPlans] = useState([]);
  const [mealPlanRecipes, setMealPlanRecipes] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [
          categoriesData,
          subCategoriesData,
          ingredientsData,
          authorsData,
          recipeBooksData,
          recipesData,
          unitsData,
          recipeIngredientsData,
          mealPlansData,
          mealPlanRecipesData,
        ] = await Promise.all([
          apiService.getCategories(),
          apiService.getSubCategories(),
          apiService.getIngredients(),
          apiService.getAuthors(),
          apiService.getRecipeBooks(),
          apiService.getRecipes(),
          apiService.getUnits(),
          apiService.getRecipeIngredients(),
          apiService.getMealPlans(),
          apiService.getMealPlanRecipes(),
        ]);

        setCategories(categoriesData);
        setSubCategories(subCategoriesData);
        setIngredients(ingredientsData);
        setAuthors(authorsData);
        setRecipeBooks(recipeBooksData);
        setRecipes(recipesData);
        setUnits(unitsData);
        setRecipeIngredients(recipeIngredientsData);
        setMealPlans(mealPlansData);
        setMealPlanRecipes(mealPlanRecipesData);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  // Categories CRUD
  const createCategory = async (categoryName) => {
    try {
      const newCategory = await apiService.addCategory(categoryName);
      setCategories([...categories, newCategory]);
    } catch (error) {
      console.error('Error adding category:', error);
    }
  };

  const updateCategory = async (categoryId, categoryName) => {
    try {
      const updatedCategory = await apiService.updateCategory(categoryId, categoryName);
      setCategories(categories.map(cat => (cat.CategoryID === categoryId ? updatedCategory : cat)));
    } catch (error) {
      console.error('Error updating category:', error);
    }
  };

  const deleteCategory = async (categoryId) => {
    try {
      await apiService.deleteCategory(categoryId);
      setCategories(categories.filter(cat => cat.CategoryID !== categoryId));
    } catch (error) {
      console.error('Error deleting category:', error);
    }
  };

  // SubCategories CRUD
  const createSubCategory = async (subCategory) => {
    try {
      const newSubCategory = await apiService.addSubCategory(subCategory);
      setSubCategories([...subCategories, newSubCategory]);
    } catch (error) {
      console.error('Error adding subcategory:', error);
    }
  };

  const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    try {
      const updatedSubCategory = await apiService.updateSubCategory(subCategoryId, subCategoryName, categoryId);
      setSubCategories(subCategories.map(sub => (sub.SubCategoryID === subCategoryId ? updatedSubCategory : sub)));
    } catch (error) {
      console.error('Error updating subcategory:', error);
    }
  };

  const deleteSubCategory = async (subCategoryId) => {
    try {
      await apiService.deleteSubCategory(subCategoryId);
      setSubCategories(subCategories.filter(sub => sub.SubCategoryID !== subCategoryId));
    } catch (error) {
      console.error('Error deleting subcategory:', error);
    }
  };

  // Ingredients CRUD
  const createIngredient = async (ingredient) => {
    try {
      const newIngredient = await apiService.addIngredient(ingredient);
      setIngredients([...ingredients, newIngredient]);
    } catch (error) {
      console.error('Error adding ingredient:', error);
    }
  };

  const updateIngredient = async (ingredientId, ingredient) => {
    try {
      const updatedIngredient = await apiService.updateIngredient(ingredientId, ingredient);
      setIngredients(ingredients.map(ing => (ing.IngredientID === ingredientId ? updatedIngredient : ing)));
    } catch (error) {
      console.error('Error updating ingredient:', error);
    }
  };

  const deleteIngredient = async (ingredientId) => {
    try {
      await apiService.deleteIngredient(ingredientId);
      setIngredients(ingredients.filter(ing => ing.IngredientID !== ingredientId));
    } catch (error) {
      console.error('Error deleting ingredient:', error);
    }
  };

  // Authors CRUD
  const createAuthor = async (authorName, authorImageURL) => {
    try {
      const newAuthor = await apiService.addAuthor(authorName, authorImageURL);
      setAuthors([...authors, newAuthor]);
    } catch (error) {
      console.error('Error adding author:', error);
    }
  };

  const updateAuthor = async (authorId, author) => {
    try {
      const updatedAuthor = await apiService.updateAuthor(authorId, author);
      setAuthors(authors.map(auth => (auth.AuthorID === authorId ? updatedAuthor : auth)));
    } catch (error) {
      console.error('Error updating author:', error);
    }
  };

  const deleteAuthor = async (authorId) => {
    try {
      await apiService.deleteAuthor(authorId);
      setAuthors(authors.filter(auth => auth.AuthorID !== authorId));
    } catch (error) {
      console.error('Error deleting author:', error);
    }
  };

  // Recipe Books CRUD
  const createRecipeBook = async (recipeBook) => {
    try {
      const newRecipeBook = await apiService.addRecipeBook(recipeBook);
      setRecipeBooks([...recipeBooks, newRecipeBook]);
    } catch (error) {
      console.error('Error adding recipe book:', error);
    }
  };

  const updateRecipeBook = async (recipeBookId, recipeBook) => {
    try {
      const updatedRecipeBook = await apiService.updateRecipeBook(recipeBookId, recipeBook);
      setRecipeBooks(recipeBooks.map(book => (book.BookID === recipeBookId ? updatedRecipeBook : book)));
    } catch (error) {
      console.error('Error updating recipe book:', error);
    }
  };

  const deleteRecipeBook = async (recipeBookId) => {
    try {
      await apiService.deleteRecipeBook(recipeBookId);
      setRecipeBooks(recipeBooks.filter(book => book.BookID !== recipeBookId));
    } catch (error) {
      console.error('Error deleting recipe book:', error);
    }
  };

  // Recipes CRUD
  const createRecipe = async (recipe) => {
    try {
      const newRecipe = await apiService.addRecipe(recipe);
      setRecipes([...recipes, newRecipe]);
    } catch (error) {
      console.error('Error adding recipe:', error);
      throw error; // Ensure to rethrow the error to be caught in the component
    }
  };

  const updateRecipe = async (recipeId, recipe) => {
    try {
      const updatedRecipe = await apiService.updateRecipe(recipeId, recipe);
      setRecipes(recipes.map(rec => (rec.RecipeID === recipeId ? updatedRecipe : rec)));
    } catch (error) {
      console.error('Error updating recipe:', error);
    }
  };

  const deleteRecipe = async (recipeId) => {
    try {
      await apiService.deleteRecipe(recipeId);
      setRecipes(recipes.filter(rec => rec.RecipeID !== recipeId));
    } catch (error) {
      console.error('Error deleting recipe:', error);
    }
  };

  const createRecipeIngredient = async (recipeIngredient) => {
    try {
      const newRecipeIngredient = await apiService.addRecipeIngredient(recipeIngredient);
      setRecipeIngredients([...recipeIngredients, newRecipeIngredient]);
    } catch (error) {
      console.error('Error adding recipe ingredient:', error);
    }
  };

  // Meal Plans CRUD
  const createMealPlan = async (mealPlan) => {
    try {
      const newMealPlan = await apiService.addMealPlan(mealPlan);
      setMealPlans([...mealPlans, newMealPlan]);
    } catch (error) {
      console.error('Error adding meal plan:', error);
    }
  };

  const updateMealPlan = async (mealPlanId, mealPlan) => {
    try {
      const updatedMealPlan = await apiService.updateMealPlan(mealPlanId, mealPlan);
      setMealPlans(mealPlans.map(mp => (mp.MealPlanID === mealPlanId ? updatedMealPlan : mp)));
    } catch (error) {
      console.error('Error updating meal plan:', error);
    }
  };

  const deleteMealPlan = async (mealPlanId) => {
    try {
      await apiService.deleteMealPlan(mealPlanId);
      setMealPlans(mealPlans.filter(mp => mp.MealPlanID !== mealPlanId));
    } catch (error) {
      console.error('Error deleting meal plan:', error);
    }
  };

  // Meal Plan Recipes CRUD
  const createMealPlanRecipe = async (mealPlanRecipe) => {
    try {
      const newMealPlanRecipe = await apiService.addMealPlanRecipe(mealPlanRecipe);
      setMealPlanRecipes([...mealPlanRecipes, newMealPlanRecipe]);
    } catch (error) {
      console.error('Error adding meal plan recipe:', error);
    }
  };

  const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    try {
      const updatedMealPlanRecipe = await apiService.updateMealPlanRecipe(mealPlanRecipeId, mealPlanRecipe);
      setMealPlanRecipes(prev => prev.map(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId ? updatedMealPlanRecipe : mpr));
    } catch (error) {
      console.error('Error updating meal plan recipe:', error);
    }
  };

  const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    try {
      await apiService.deleteMealPlanRecipe(mealPlanRecipeId);
      setMealPlanRecipes(mealPlanRecipes.filter(mpr => mpr.MealPlanRecipeID !== mealPlanRecipeId));
    } catch (error) {
      console.error('Error deleting meal plan recipe:', error);
    }
  };

  const getShoppingList = (mealPlanId) => {
    const filteredMealPlanRecipes = mealPlanRecipes.filter(mpr => mpr.MealPlanID === mealPlanId);

    const ingredientMap = new Map();

    filteredMealPlanRecipes.forEach(mpr => {
      const recipeId = mpr.RecipeID;
      const recipeIngredientsForRecipe = recipeIngredients.filter(ri => ri.RecipeID === recipeId);

      recipeIngredientsForRecipe.forEach(ri => {
        const ingredient = ingredients.find(ing => ing.IngredientID === ri.IngredientID);
        const unit = units.find(unit => unit.UnitID === ri.UnitID);
        if (ingredient) {
          const existing = ingredientMap.get(ingredient.IngredientID);
          if (existing) {
            existing.Quantity += ri.Quantity;
          } else {
            ingredientMap.set(ingredient.IngredientID, {
              ...ingredient,
              Quantity: ri.Quantity,
              unit: unit || { UnitName: 'Unknown' }
            });
          }
        }
      });
    });

    return Array.from(ingredientMap.values());
  };

  return (
    <DataContext.Provider
      value={{
        categories, createCategory, updateCategory, deleteCategory,
        subCategories, createSubCategory, updateSubCategory, deleteSubCategory,
        ingredients, createIngredient, updateIngredient, deleteIngredient,
        authors, createAuthor, updateAuthor, deleteAuthor,
        recipeBooks, createRecipeBook, updateRecipeBook, deleteRecipeBook,
        recipes, createRecipe, updateRecipe, deleteRecipe,
        units, recipeIngredients, createRecipeIngredient,
        mealPlans, createMealPlan, updateMealPlan, deleteMealPlan,
        mealPlanRecipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe,
        getShoppingList,
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => useContext(DataContext);


==================== C:\Code\recipe-app\client\src\pages\Dashboard.jsx ====================

// src/pages/Home.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';

function Dashboard() {
  const { categories, subCategories, ingredients, authors, recipeBooks, recipes } = useData();

  const items = [
    { name: 'Categories', count: categories.length, link: '/manage-categories' },
    { name: 'Subcategories', count: subCategories.length, link: '/manage-sub-categories' },
    { name: 'Ingredients', count: ingredients.length, link: '/manage-ingredients' },
    { name: 'Authors', count: authors.length, link: '/manage-authors' },
    { name: 'Recipe Books', count: recipeBooks.length, link: '/manage-recipe-books' },
    { name: 'Recipes', count: recipes.length, link: '/manage-recipes' },
  ];

  return (
    <div className="flex flex-wrap gap-4 p-6">
      {items.map((item, index) => (
        <Card key={index} title={item.name} count={item.count} link={item.link} />
      ))}
    </div>
  );
}

export default Dashboard;


==================== C:\Code\recipe-app\client\src\pages\Home.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import AddMealPlanModal from '../components/AddMealPlanModal';
import { format, isWithinInterval, parseISO, startOfWeek, endOfWeek, isFuture, isPast } from 'date-fns';
import { Link } from 'react-router-dom';

const Home = () => {
  const { mealPlans } = useData();
  const [isModalOpen, setIsModalOpen] = useState(false);

  const categorizeMealPlans = (mealPlans) => {
    const now = new Date();
    const currentWeekStart = startOfWeek(now, { weekStartsOn: 1 });
    const currentWeekEnd = endOfWeek(now, { weekStartsOn: 1 });

    const currentWeekPlans = mealPlans.filter(plan =>
      isWithinInterval(parseISO(plan.StartDate), { start: currentWeekStart, end: currentWeekEnd }) ||
      isWithinInterval(parseISO(plan.EndDate), { start: currentWeekStart, end: currentWeekEnd })
    );

    const upcomingPlans = mealPlans.filter(plan =>
      isFuture(parseISO(plan.StartDate)) && !currentWeekPlans.includes(plan)
    );

    const previousPlans = mealPlans.filter(plan =>
      isPast(parseISO(plan.EndDate)) && !currentWeekPlans.includes(plan)
    );

    return { currentWeekPlans, upcomingPlans, previousPlans };
  };

  const { currentWeekPlans, upcomingPlans, previousPlans } = categorizeMealPlans(mealPlans);

  const renderMealPlanCard = (plan) => (
    <Link to={`/meal-plan/${plan.MealPlanID}`} key={plan.MealPlanID}>
      <Card title={plan.PlanName} count={1}>
        <p>Start: {format(parseISO(plan.StartDate), 'yyyy-MM-dd')}</p>
        <p>End: {format(parseISO(plan.EndDate), 'yyyy-MM-dd')}</p>
      </Card>
    </Link>
  );

  const openModal = () => {
    setIsModalOpen(true);
    document.getElementById('add_meal_plan_modal').showModal();
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Current Week</h1>
      {currentWeekPlans.length > 0 ? (
        <div className="flex flex-wrap gap-4 mb-8">
          {currentWeekPlans.map(renderMealPlanCard)}
        </div>
      ) : (
        <div className="mb-8">
          <p>No current meal plans for this week.</p>
          <Button onClick={openModal}>Add Meal Plan</Button>
        </div>
      )}

      <h2 className="text-xl font-bold mb-4">Upcoming Meal Plans</h2>
      <div className="flex flex-wrap gap-4 mb-8">
        {upcomingPlans.map(renderMealPlanCard)}
      </div>

      <h2 className="text-xl font-bold mb-4">Previous Meal Plans</h2>
      <div className="flex flex-wrap gap-4 mb-8">
        {previousPlans.map(renderMealPlanCard)}
      </div>

      {isModalOpen && <AddMealPlanModal />}
    </div>
  );
};

export default Home;


==================== C:\Code\recipe-app\client\src\pages\Login.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import TextInput from '../components/ui/TextInput';
import Button from '../components/ui/Button';

function Login() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const { login } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        await login(username, password);
    };

    return (
        <div className="flex items-start p-8 justify-center w-full">
            <div className="flex flex-col w-96 rounded-box bg-base-200 p-6 gap-4">
                <h1 className="text-3xl font-bold self-center">Log in</h1>
                {/* <span className="self-center flex gap-2">
                    Don't have an account?
                    <a className="link link-secondary" onClick={() => navigate('/register')}>Register</a>
                </span>
                <a className="btn btn-neutral">
                    <i className="fa-brands fa-google text-primary"></i>
                    Log in with Google
                </a>
                <div className="divider">OR</div> */}
                <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
                    <TextInput
                        label="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                    />
                    <label className="form-control w-full">
                        <div className="label">
                            <span className="label-text">Password</span>
                            <a className="label-text link link-accent">Forgot password?</a>
                        </div>
                        <TextInput
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </label>
                    <div className="form-control">
                        <label className="cursor-pointer label self-start gap-2">
                            <input type="checkbox" className="checkbox" />
                            <span className="label-text">Remember me</span>
                        </label>
                    </div>
                    <Button type="submit">Log in</Button>
                </form>
            </div>
        </div>
    );
}

export default Login;


==================== C:\Code\recipe-app\client\src\pages\ManageAuthors.jsx ====================

// src/pages/ManageAuthors.jsx
import React from 'react';
import AuthorTable from '../components/AuthorTable';
import AddAuthorModal from '../components/AddAuthorModal';

function ManageAuthors() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Authors</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_author_modal').showModal()}>Add Author</button>
      </div>
      <AuthorTable />
      <AddAuthorModal />
    </div>
  );
}

export default ManageAuthors;


==================== C:\Code\recipe-app\client\src\pages\ManageCategories.jsx ====================

// src/pages/ManageCategories.jsx
import React from 'react';
import CategoryTable from '../components/CategoryTable';
import AddCategoryModal from '../components/AddCategoryModal';

function ManageCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_category_modal').showModal()}>Add Category</button>
      </div>
      <CategoryTable />
      <AddCategoryModal />
    </div>
  );
}

export default ManageCategories;


==================== C:\Code\recipe-app\client\src\pages\ManageIngredients.jsx ====================

// src/pages/ManageIngredients.jsx
import React from 'react';
import IngredientTable from '../components/IngredientTable';
import AddIngredientModal from '../components/AddIngredientModal';

function ManageIngredients() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Ingredients</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_ingredient_modal').showModal()}>Add Ingredient</button>
      </div>
      <IngredientTable />
      <AddIngredientModal />
    </div>
  );
}

export default ManageIngredients;


==================== C:\Code\recipe-app\client\src\pages\ManageMealPlans.jsx ====================

// src/pages/ManageMealPlans.jsx

import React, { useState } from 'react';
import MealPlanTable from '../components/MealPlanTable';
import AddMealPlanModal from '../components/AddMealPlanModal';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';
import Calendar from '../components/Calendar';
import ShoppingList from '../components/ShoppingList';
import { useData } from '../context/DataContext';

function ManageMealPlans() {
  const [selectedMealPlan, setSelectedMealPlan] = useState(null);
  const [addingMeal, setAddingMeal] = useState(null);
  const [modifyingMeal, setModifyingMeal] = useState(null);
  const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

  const handleAddMeals = (mealPlan) => {
    setSelectedMealPlan(mealPlan);
  };

  const handleAddMeal = (date, mealType) => {
    setAddingMeal({ date, mealType });
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = async (mealPlanRecipeId, remove = false) => {
    if (remove) {
      if (window.confirm('Are you sure you want to remove this meal?')) {
        try {
          await deleteMealPlanRecipe(mealPlanRecipeId);
        } catch (error) {
          console.log(error);
          alert('Failed to remove meal');
        }
      }
    } else {
      const mealPlanRecipe = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
      if (mealPlanRecipe) {
        setModifyingMeal(mealPlanRecipe);
        setAddingMeal({
          date: mealPlanRecipe.Date,
          mealType: mealPlanRecipe.MealType,
          recipeId: mealPlanRecipe.RecipeID,
          mealPlanRecipeId: mealPlanRecipeId
        });
        document.getElementById('add_meal_plan_recipe_modal').showModal();
      } else {
        console.error('Meal plan recipe not found:', mealPlanRecipeId);
      }
    }
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Meal Plans</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_meal_plan_modal').showModal()}>Add Meal Plan</button>
      </div>
      <MealPlanTable onManageMeals={handleAddMeals} />
      {selectedMealPlan && (
        <>
          <h2 className="text-2xl font-bold mt-6">Meals for Selected Plan</h2>
          <Calendar
            mealPlan={selectedMealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === selectedMealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
          />
          <h2 className="text-2xl font-bold mt-6">Shopping List</h2>
          <ShoppingList mealPlanId={selectedMealPlan.MealPlanID} />
        </>
      )}
      <AddMealPlanModal />
      {selectedMealPlan && (
        <AddMealPlanRecipeModal
          mealPlanId={selectedMealPlan.MealPlanID}
          startDate={selectedMealPlan.StartDate}
          endDate={selectedMealPlan.EndDate}
          defaultDate={addingMeal?.date}
          defaultMealType={addingMeal?.mealType}
          defaultRecipeId={addingMeal?.recipeId}
          mealPlanRecipeId={addingMeal?.mealPlanRecipeId}
        />
      )}
    </div>
  );
}

export default ManageMealPlans;


==================== C:\Code\recipe-app\client\src\pages\ManageRecipeBooks.jsx ====================

// src/pages/ManageRecipeBooks.jsx
import React from 'react';
import RecipeBookTable from '../components/RecipeBookTable';
import AddRecipeBookModal from '../components/AddRecipeBookModal';

function ManageRecipeBooks() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipe Books</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_recipe_book_modal').showModal()}>Add Recipe Book</button>
      </div>
      <RecipeBookTable />
      <AddRecipeBookModal />
    </div>
  );
}

export default ManageRecipeBooks;


==================== C:\Code\recipe-app\client\src\pages\ManageRecipes.jsx ====================

// src/pages/ManageRecipes.jsx
import React, { useState } from 'react';
import RecipeTable from '../components/RecipeTable';
import AddRecipeModal from '../components/AddRecipeModal';
import AddRecipeIngredientModal from '../components/AddRecipeIngredientModal';
import Button from '../components/ui/Button';

function ManageRecipes() {
  const [selectedRecipeId, setSelectedRecipeId] = useState(null);

  const handleAddIngredients = (recipeId) => {
    setSelectedRecipeId(recipeId);
    document.getElementById('add_recipe_ingredient_modal').showModal();
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipes</h1>
      <div>
        <Button
          size='sm'
          variant='secondary'
          outline={true}
          onClick={() => document.getElementById('add_recipe_modal').showModal()}
        >
          Add Recipe
        </Button>       
      </div>
      <RecipeTable onAddIngredients={handleAddIngredients} />
      <AddRecipeModal />
      <AddRecipeIngredientModal recipeId={selectedRecipeId} />
    </div>
  );
}

export default ManageRecipes;


==================== C:\Code\recipe-app\client\src\pages\ManageSubCategories.jsx ====================

// src/pages/ManageSubCategories.jsx
import React from 'react';
import SubCategoryTable from '../components/SubCategoryTable';
import AddSubCategoryModal from '../components/AddSubCategoryModal';

function ManageSubCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Sub-Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_sub_category_modal').showModal()}>Add Sub-Category</button>
      </div>
      <SubCategoryTable />
      <AddSubCategoryModal />
    </div>
  );
}

export default ManageSubCategories;


==================== C:\Code\recipe-app\client\src\pages\MealPlanDetails.jsx ====================

import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { useData } from '../context/DataContext';
import Calendar from '../components/Calendar';
import Button from '../components/ui/Button';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';

const MealPlanDetails = () => {
  const { mealPlanId } = useParams();
  const { mealPlans, mealPlanRecipes, recipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe } = useData();
  const mealPlan = mealPlans.find(mp => mp.MealPlanID === parseInt(mealPlanId));
  const [selectedMeal, setSelectedMeal] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleAddMeal = (date, mealType) => {
    setSelectedMeal({ date, mealType, mealPlanRecipeId: null });
    setIsModalOpen(true);
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = (mealPlanRecipeId) => {
    const meal = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
    if (meal) {
      setSelectedMeal({
        date: meal.Date,
        mealType: meal.MealType,
        recipeId: meal.RecipeID,
        mealPlanRecipeId: meal.MealPlanRecipeID,
      });
      setIsModalOpen(true);
      document.getElementById('add_meal_plan_recipe_modal').showModal();
    }
  };

  const handleSaveMeal = async (mealPlanRecipe) => {
    if (selectedMeal.mealPlanRecipeId) {
      await updateMealPlanRecipe(selectedMeal.mealPlanRecipeId, mealPlanRecipe);
    } else {
      await createMealPlanRecipe(mealPlanRecipe);
    }
    setIsModalOpen(false);
  };

  const handleRemoveMeal = async (mealPlanRecipeId) => {
    if (window.confirm('Are you sure you want to remove this meal?')) {
      await deleteMealPlanRecipe(mealPlanRecipeId);
    }
  };

  return (
    <div className="p-6">
      {mealPlan ? (
        <>
          <h1 className="text-2xl font-bold mb-4">{mealPlan.PlanName}</h1>
          <Calendar
            mealPlan={mealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === mealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
            onRemoveMeal={handleRemoveMeal}
          />

          <AddMealPlanRecipeModal
            mealPlanId={mealPlan.MealPlanID}
            defaultDate={selectedMeal?.date}
            defaultMealType={selectedMeal?.mealType}
            defaultRecipeId={selectedMeal?.recipeId}
            mealPlanRecipeId={selectedMeal?.mealPlanRecipeId}
            onSave={handleSaveMeal}
          />
        </>
      ) : (
        <p>Meal plan not found.</p>
      )}
    </div>
  );
};

export default MealPlanDetails;


==================== C:\Code\recipe-app\client\src\pages\Register.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';

function Register() {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await fetch('http://localhost:8000/api/users/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Email: email, Password: password }),
    });

    if (response.ok) {
      await login(username, password);
    } else {
      alert('Registration failed');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="p-8 bg-white rounded shadow-md w-96">
        <h2 className="mb-4 text-2xl font-bold text-center">Register</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block mb-1">Username</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <button type="submit" className="w-full py-2 text-white bg-green-500 rounded hover:bg-green-600">
            Register
          </button>
        </form>
      </div>
    </div>
  );
}

export default Register;


==================== C:\Code\recipe-app\client\src\services\apiService.js ====================

import { supabase } from '../supabaseClient';

// Categories
export const getCategories = async () => {
    const { data, error } = await supabase.from('IngredientCategories').select('*');
    if (error) throw error;
    return data;
};

export const addCategory = async (categoryName) => {
    const { data, error } = await supabase
        .from('IngredientCategories')
        .insert([{ CategoryName: categoryName }])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateCategory = async (categoryId, categoryName) => {
    const { data, error } = await supabase
        .from('IngredientCategories')
        .update({ CategoryName: categoryName })
        .eq('CategoryID', categoryId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteCategory = async (categoryId) => {
    const { data, error } = await supabase.from('IngredientCategories').delete().eq('CategoryID', categoryId).select();
    if (error) throw error;
    return data;
};

// SubCategories
export const getSubCategories = async () => {
    const { data, error } = await supabase.from('IngredientSubCategories').select('*');
    if (error) throw error;
    return data;
};

export const addSubCategory = async (subCategory) => {
    const { data, error } = await supabase
        .from('IngredientSubCategories')
        .insert([subCategory])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    const { data, error } = await supabase
        .from('IngredientSubCategories')
        .update({ SubCategoryName: subCategoryName, CategoryID: categoryId })
        .eq('SubCategoryID', subCategoryId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteSubCategory = async (subCategoryId) => {
    const { data, error } = await supabase.from('IngredientSubCategories').delete().eq('SubCategoryID', subCategoryId).select();
    if (error) throw error;
    return data;
};

// Ingredients
export const getIngredients = async () => {
    const { data, error } = await supabase.from('Ingredients').select('*');
    if (error) throw error;
    return data;
};

export const addIngredient = async (ingredient) => {
    const { data, error } = await supabase
        .from('Ingredients')
        .insert([ingredient])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateIngredient = async (ingredientId, ingredient) => {
    const { data, error } = await supabase
        .from('Ingredients')
        .update(ingredient)
        .eq('IngredientID', ingredientId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteIngredient = async (ingredientId) => {
    const { data, error } = await supabase.from('Ingredients').delete().eq('IngredientID', ingredientId).select();
    if (error) throw error;
    return data;
};

// Authors
export const getAuthors = async () => {
    const { data, error } = await supabase.from('RecipeAuthors').select('*');
    if (error) throw error;
    return data;
};

export const addAuthor = async (authorName, authorImageURL) => {
    const { data, error } = await supabase
        .from('RecipeAuthors')
        .insert([{ AuthorName: authorName, AuthorImageURL: authorImageURL }])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateAuthor = async (authorId, author) => {
    const { data, error } = await supabase
        .from('RecipeAuthors')
        .update(author)
        .eq('AuthorID', authorId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteAuthor = async (authorId) => {
    const { data, error } = await supabase.from('RecipeAuthors').delete().eq('AuthorID', authorId).select();
    if (error) throw error;
    return data;
};

// Recipe Books
export const getRecipeBooks = async () => {
    const { data, error } = await supabase.from('RecipeBooks').select('*');
    if (error) throw error;
    return data;
};

export const addRecipeBook = async (recipeBook) => {
    const { data, error } = await supabase
        .from('RecipeBooks')
        .insert([recipeBook])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateRecipeBook = async (recipeBookId, recipeBook) => {
    const { data, error } = await supabase
        .from('RecipeBooks')
        .update(recipeBook)
        .eq('BookID', recipeBookId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteRecipeBook = async (recipeBookId) => {
    const { data, error } = await supabase.from('RecipeBooks').delete().eq('BookID', recipeBookId).select();
    if (error) throw error;
    return data;
};

// Recipes
export const getRecipes = async () => {
    const { data, error } = await supabase.from('Recipes').select('*');
    if (error) throw error;
    return data;
};

export const addRecipe = async (recipe) => {
    console.log('Inserting recipe:', recipe);
    const { data, error } = await supabase
        .from('Recipes')
        .insert([recipe])
        .select(); // Ensure to select the inserted rows
    console.log('Supabase insert response:', { data, error });
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateRecipe = async (recipeId, recipe) => {
    const { data, error } = await supabase
        .from('Recipes')
        .update(recipe)
        .eq('RecipeID', recipeId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteRecipe = async (recipeId) => {
    const { data, error } = await supabase.from('Recipes').delete().eq('RecipeID', recipeId).select();
    if (error) throw error;
    return data;
};

// Units
export const getUnits = async () => {
    const { data, error } = await supabase.from('Units').select('*');
    if (error) throw error;
    return data;
};

// Recipe Ingredients
export const getRecipeIngredients = async () => {
    const { data, error } = await supabase.from('RecipeIngredients').select('*');
    if (error) throw error;
    return data;
};

export const addRecipeIngredient = async (recipeIngredient) => {
    const { data, error } = await supabase
        .from('RecipeIngredients')
        .insert([recipeIngredient])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

// Meal Plans
export const getMealPlans = async () => {
    const { data, error } = await supabase.from('MealPlans').select('*');
    if (error) throw error;
    return data;
};

export const addMealPlan = async (mealPlan) => {
    console.log('Inserting meal plan:', mealPlan);
    const { data, error } = await supabase
        .from('MealPlans')
        .insert([mealPlan])
        .select(); // Ensure to select the inserted rows
    console.log('Supabase insert response:', { data, error });
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateMealPlan = async (mealPlanId, mealPlan) => {
    const { data, error } = await supabase
        .from('MealPlans')
        .update(mealPlan)
        .eq('MealPlanID', mealPlanId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteMealPlan = async (mealPlanId) => {
    const { data, error } = await supabase.from('MealPlans')
        .delete()
        .eq('MealPlanID', mealPlanId)
        .select();
    if (error) throw error;
    return data;
};

// Meal Plan Recipes
export const getMealPlanRecipes = async () => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .select('*');
    if (error) throw error;
    return data;
};

export const addMealPlanRecipe = async (mealPlanRecipe) => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .insert([mealPlanRecipe])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .update(mealPlanRecipe)
        .eq('MealPlanRecipeID', mealPlanRecipeId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    const { data, error } = await supabase.from('MealPlanRecipes').delete().eq('MealPlanRecipeID', mealPlanRecipeId).select();
    if (error) throw error;
    return data;
};


==================== C:\Code\recipe-app\client\src\utils\cache.js ====================

// src/utils/cache.js

class Cache {
    constructor() {
      this.cache = {};
    }
  
    set(key, data) {
      this.cache[key] = {
        data,
        timestamp: new Date().getTime(),
      };
    }
  
    get(key, expiryTime = 180000) { // default expiry time is 180 seconds
      const cachedItem = this.cache[key];
      if (cachedItem && (new Date().getTime() - cachedItem.timestamp < expiryTime)) {
        return cachedItem.data;
      }
      return null;
    }
  
    invalidate(key) {
      delete this.cache[key];
    }
  }
  
  const cache = new Cache();
  export default cache;
  

==================== C:\Code\recipe-app\collated_output.txt ====================



==================== client/src\pages\ManageMealPlans.jsx ====================

// src/pages/ManageMealPlans.jsx

import React, { useState, useEffect } from 'react';
import MealPlanTable from '../components/MealPlanTable';
import AddMealPlanModal from '../components/AddMealPlanModal';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';
import Calendar from '../components/Calendar';
import { useData } from '../context/DataContext';

function ManageMealPlans() {
  const [selectedMealPlan, setSelectedMealPlan] = useState(null);
  const [addingMeal, setAddingMeal] = useState(null);
  const [modifyingMeal, setModifyingMeal] = useState(null);
  const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

  const handleAddMeals = (mealPlan) => {
    setSelectedMealPlan(mealPlan);
  };

  const handleAddMeal = (date, mealType) => {
    setAddingMeal({ date, mealType });
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = async (mealPlanRecipeId, remove = false) => {
    if (remove) {
      if (window.confirm('Are you sure you want to remove this meal?')) {
        try {
          await deleteMealPlanRecipe(mealPlanRecipeId);
        } catch (error) {
          console.log(error);
          alert('Failed to remove meal');
        }
      }
    } else {
      const mealPlanRecipe = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
      if (mealPlanRecipe) {
        setModifyingMeal(mealPlanRecipe);
        document.getElementById('add_meal_plan_recipe_modal').showModal();
      } else {
        console.error('Meal plan recipe not found:', mealPlanRecipeId);
      }
    }
  };

  useEffect(() => {
    if (modifyingMeal) {
      setAddingMeal({
        date: modifyingMeal.Date,
        mealType: modifyingMeal.MealType,
        recipeId: modifyingMeal.RecipeID,
      });
    }
  }, [modifyingMeal]);

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Meal Plans</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_meal_plan_modal').showModal()}>Add Meal Plan</button>
      </div>
      <MealPlanTable onManageMeals={handleAddMeals} />
      {selectedMealPlan && (
        <>
          <h2 className="text-2xl font-bold mt-6">Meals for Selected Plan</h2>
          <Calendar
            mealPlan={selectedMealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === selectedMealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
          />
        </>
      )}
      <AddMealPlanModal />
      {selectedMealPlan && (
        <AddMealPlanRecipeModal
          mealPlanId={selectedMealPlan.MealPlanID}
          startDate={selectedMealPlan.StartDate}
          endDate={selectedMealPlan.EndDate}
          defaultDate={addingMeal?.date}
          defaultMealType={addingMeal?.mealType}
          defaultRecipeId={addingMeal?.recipeId}
        />
      )}
    </div>
  );
}

export default ManageMealPlans;


==================== client\src\components\MealPlanTable.jsx ====================

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanTable({ onManageMeals }) {
  const { mealPlans, deleteMealPlan } = useData();

  const handleDelete = async (mealPlanId) => {
    if (window.confirm('Are you sure you want to delete this meal plan?')) {
      try {
        await deleteMealPlan(mealPlanId);
      } catch (error) {
        alert('Failed to delete meal plan');
      }
    }
  };

  const headers = ['ID', 'Plan Name', 'Start Date', 'End Date', 'Actions'];

  const data = mealPlans.map((mealPlan) => ({
    id: mealPlan.MealPlanID,
    cells: [
      mealPlan.MealPlanID,
      mealPlan.PlanName,
      mealPlan.StartDate,
      mealPlan.EndDate,
      <div className="flex gap-2">
        <Button
          size="sm"
          variant="primary"
          outline={true}
          onClick={() => onManageMeals(mealPlan)}
        >
          Manage Meals
        </Button>
        <DeleteButton onClick={() => handleDelete(mealPlan.MealPlanID)} />
      </div>
    ],
  }));

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default MealPlanTable;


==================== client\src\context\DataContext.jsx ====================

// src/context/DataContext.jsx

import React, { createContext, useContext, useEffect, useState } from 'react';
import * as apiService from '../services/apiService';

const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [authors, setAuthors] = useState([]);
  const [recipeBooks, setRecipeBooks] = useState([]);
  const [recipes, setRecipes] = useState([]);
  const [units, setUnits] = useState([]);
  const [recipeIngredients, setRecipeIngredients] = useState([]);
  const [mealPlans, setMealPlans] = useState([]);
  const [mealPlanRecipes, setMealPlanRecipes] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [
          categoriesData,
          subCategoriesData,
          ingredientsData,
          authorsData,
          recipeBooksData,
          recipesData,
          unitsData,
          recipeIngredientsData,
          mealPlansData,
          mealPlanRecipesData,
        ] = await Promise.all([
          apiService.getCategories(),
          apiService.getSubCategories(),
          apiService.getIngredients(),
          apiService.getAuthors(),
          apiService.getRecipeBooks(),
          apiService.getRecipes(),
          apiService.getUnits(),
          apiService.getRecipeIngredients(),
          apiService.getMealPlans(),
          apiService.getMealPlanRecipes(),
        ]);

        setCategories(categoriesData);
        setSubCategories(subCategoriesData);
        setIngredients(ingredientsData);
        setAuthors(authorsData);
        setRecipeBooks(recipeBooksData);
        setRecipes(recipesData);
        setUnits(unitsData);
        setRecipeIngredients(recipeIngredientsData);
        setMealPlans(mealPlansData);
        setMealPlanRecipes(mealPlanRecipesData);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  // Categories CRUD
  const createCategory = async (categoryName) => {
    const newCategory = await apiService.addCategory(categoryName);
    setCategories([...categories, newCategory]);
  };

  const updateCategory = async (categoryId, categoryName) => {
    await apiService.updateCategory(categoryId, categoryName);
    setCategories(categories.map(cat => (cat.CategoryID === categoryId ? { ...cat, CategoryName: categoryName } : cat)));
  };

  const deleteCategory = async (categoryId) => {
    await apiService.deleteCategory(categoryId);
    setCategories(categories.filter(cat => cat.CategoryID !== categoryId));
  };

  // SubCategories CRUD
  const createSubCategory = async (subCategory) => {
    const newSubCategory = await apiService.addSubCategory(subCategory);
    setSubCategories([...subCategories, newSubCategory]);
  };

  const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    await apiService.updateSubCategory(subCategoryId, subCategoryName, categoryId);
    setSubCategories(subCategories.map(sub => (sub.SubCategoryID === subCategoryId ? { ...sub, SubCategoryName: subCategoryName, CategoryID: categoryId } : sub)));
  };

  const deleteSubCategory = async (subCategoryId) => {
    await apiService.deleteSubCategory(subCategoryId);
    setSubCategories(subCategories.filter(sub => sub.SubCategoryID !== subCategoryId));
  };

  // Ingredients CRUD
  const createIngredient = async (ingredient) => {
    const newIngredient = await apiService.addIngredient(ingredient);
    setIngredients([...ingredients, newIngredient]);
  };

  const updateIngredient = async (ingredientId, ingredient) => {
    await apiService.updateIngredient(ingredientId, ingredient);
    setIngredients(ingredients.map(ing => (ing.IngredientID === ingredientId ? { ...ing, ...ingredient } : ing)));
  };

  const deleteIngredient = async (ingredientId) => {
    await apiService.deleteIngredient(ingredientId);
    setIngredients(ingredients.filter(ing => ing.IngredientID !== ingredientId));
  };

  // Authors CRUD
  const createAuthor = async (authorName, authorImageURL) => {
    const newAuthor = await apiService.addAuthor(authorName, authorImageURL);
    setAuthors([...authors, newAuthor]);
  };

  const updateAuthor = async (authorId, author) => {
    await apiService.updateAuthor(authorId, author);
    setAuthors(authors.map(auth => (auth.AuthorID === authorId ? { ...auth, ...author } : auth)));
  };

  const deleteAuthor = async (authorId) => {
    await apiService.deleteAuthor(authorId);
    setAuthors(authors.filter(auth => auth.AuthorID !== authorId));
  };

  // Recipe Books CRUD
  const createRecipeBook = async (recipeBook) => {
    const newRecipeBook = await apiService.addRecipeBook(recipeBook);
    setRecipeBooks([...recipeBooks, newRecipeBook]);
  };

  const updateRecipeBook = async (recipeBookId, recipeBook) => {
    await apiService.updateRecipeBook(recipeBookId, recipeBook);
    setRecipeBooks(recipeBooks.map(book => (book.BookID === recipeBookId ? { ...book, ...recipeBook } : book)));
  };

  const deleteRecipeBook = async (recipeBookId) => {
    await apiService.deleteRecipeBook(recipeBookId);
    setRecipeBooks(recipeBooks.filter(book => book.BookID !== recipeBookId));
  };

  // Recipes CRUD
  const createRecipe = async (recipe) => {
    const newRecipe = await apiService.addRecipe(recipe);
    setRecipes([...recipes, newRecipe]);
  };

  const updateRecipe = async (recipeId, recipe) => {
    await apiService.updateRecipe(recipeId, recipe);
    setRecipes(recipes.map(rec => (rec.RecipeID === recipeId ? { ...rec, ...recipe } : rec)));
  };

  const deleteRecipe = async (recipeId) => {
    await apiService.deleteRecipe(recipeId);
    setRecipes(recipes.filter(rec => rec.RecipeID !== recipeId));
  };

  const createRecipeIngredient = async (recipeIngredient) => {
    const newRecipeIngredient = await apiService.addRecipeIngredient(recipeIngredient);
    setRecipeIngredients([...recipeIngredients, newRecipeIngredient]);
  };

  // Meal Plans CRUD
  const createMealPlan = async (mealPlan) => {
    const newMealPlan = await apiService.addMealPlan(mealPlan);
    setMealPlans([...mealPlans, newMealPlan]);
  };

  const updateMealPlan = async (mealPlanId, mealPlan) => {
    await apiService.updateMealPlan(mealPlanId, mealPlan);
    setMealPlans(mealPlans.map(mp => (mp.MealPlanID === mealPlanId ? { ...mp, ...mealPlan } : mp)));
  };

  const deleteMealPlan = async (mealPlanId) => {
    await apiService.deleteMealPlan(mealPlanId);
    setMealPlans(mealPlans.filter(mp => mp.MealPlanID !== mealPlanId));
  };

   // Meal Plan Recipes CRUD
   const createMealPlanRecipe = async (mealPlanRecipe) => {
    const newMealPlanRecipe = await apiService.addMealPlanRecipe(mealPlanRecipe);
    setMealPlanRecipes([...mealPlanRecipes, newMealPlanRecipe]);
  };

  const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    await apiService.updateMealPlanRecipe(mealPlanRecipeId, mealPlanRecipe);
    setMealPlanRecipes(mealPlanRecipes.map(mpr => (mpr.MealPlanRecipeID === mealPlanRecipeId ? { ...mpr, ...mealPlanRecipe } : mpr)));
  };

  const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    await apiService.deleteMealPlanRecipe(mealPlanRecipeId);
    setMealPlanRecipes(mealPlanRecipes.filter(mpr => mpr.MealPlanRecipeID !== mealPlanRecipeId));
  };

  return (
    <DataContext.Provider
      value={{
        categories, createCategory, updateCategory, deleteCategory,
        subCategories, createSubCategory, updateSubCategory, deleteSubCategory,
        ingredients, createIngredient, updateIngredient, deleteIngredient,
        authors, createAuthor, updateAuthor, deleteAuthor,
        recipeBooks, createRecipeBook, updateRecipeBook, deleteRecipeBook,
        recipes, createRecipe, updateRecipe, deleteRecipe,
        units, recipeIngredients, createRecipeIngredient,
        mealPlans, createMealPlan, updateMealPlan, deleteMealPlan,
        mealPlanRecipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe,      
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => useContext(DataContext);


==================== client\src\components\ui\DeleteButton.jsx ====================

// src/components/ui/DeleteButton.jsx
import React from 'react';
import Button from './Button';

const DeleteButton = ({ onClick }) => (
  <Button
    size="sm"
    variant="error"
    outline={true}
    onClick={onClick}
  >
    Delete
  </Button>
);

export default DeleteButton;


==================== client\src\components\ui\Button.jsx ====================

// src/components/ui/Button.jsx
import React from 'react';

const Button = ({ type, variant = 'primary', size = 'md', outline = false, block = false, circle = false, square = false, className = '', onClick, children }) => {
  const baseClass = 'btn';
  const variantClass = `btn-${variant}`;
  const sizeClass = `btn-${size}`;
  const outlineClass = outline ? 'btn-outline' : '';
  const blockClass = block ? 'btn-block' : '';
  const circleClass = circle ? 'btn-circle' : '';
  const squareClass = square ? 'btn-square' : '';

  const classes = `${baseClass} ${variantClass} ${sizeClass} ${outlineClass} ${blockClass} ${circleClass} ${squareClass} ${className}`;

  return (
    <button type={type} className={classes} onClick={onClick}>
      {children}
    </button>
  );
};

export default Button;


==================== client\src\components\ui\Table.jsx ====================

// src/components/ui/Table.jsx
import React, { useState } from 'react';
import { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';

const Table = ({ headers, data }) => {
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'ascending' });

  const sortedData = React.useMemo(() => {
    let sortableData = [...data];
    if (sortConfig.key) {
      sortableData.sort((a, b) => {
        const aKey = a.cells[headers.indexOf(sortConfig.key)];
        const bKey = b.cells[headers.indexOf(sortConfig.key)];

        if (aKey < bKey) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aKey > bKey) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableData;
  }, [data, sortConfig, headers]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (header) => {
    if (sortConfig.key === header) {
      return sortConfig.direction === 'ascending' ? <FaSortUp /> : <FaSortDown />;
    }
    return <FaSort />;
  };

  return (
    <div className="overflow-x-auto">
      <table className="table table-zebra">
        <thead>
          <tr>
            {headers.map((header, index) => (
              <th key={index} onClick={() => requestSort(header)} className="cursor-pointer">
                <div className="flex items-center">
                  {header}
                  <span className="ml-2">{getSortIcon(header)}</span>
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row, rowIndex) => (
            <tr key={row.id || rowIndex}>
              {row.cells.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Table;


==================== client\src\components\AddMealPlanModal.jsx ====================

// src/components/AddMealPlanModal.jsx

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';

function AddMealPlanModal() {
  const [planName, setPlanName] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const { createMealPlan } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const mealPlan = {
      PlanName: planName,
      StartDate: startDate,
      EndDate: endDate,
      UserID: 1, // Adjust as needed
    };

    try {
      await createMealPlan(mealPlan);
      document.getElementById('add_meal_plan_modal').close();
    } catch (error) {
      alert('Failed to add meal plan');
    }
  };

  return (
    <Modal id="add_meal_plan_modal" title="Add Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Plan Name"
          value={planName}
          onChange={(e) => setPlanName(e.target.value)}
          required
        />
        <TextInput
          label="Start Date"
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          required
        />
        <TextInput
          label="End Date"
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          required
        />
        <Button>Add Meal Plan</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanModal;


==================== client\src\components\ui\Modal.jsx ====================

import React from 'react';

const Modal = ({ id, title, children, wide }) => {
    const modalBoxClass = wide ? 'modal-box w-11/12 max-w-5xl' : 'modal-box';
    const modalClass = wide ? 'modal' : 'modal modal-bottom sm:modal-middle';

    return (
        <dialog id={id} className={modalClass}>
            <div className={modalBoxClass}>
                <form method="dialog">
                    <button className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <h3 className="font-bold text-lg">{title}</h3>
                {children}
            </div>
        </dialog>
    );
};

export default Modal;


==================== client\src\components\ui\TextInput.jsx ====================

import React from 'react';

const TextInput = ({ label, type = 'text', value, onChange, required = false, placeholder = '', className = 'input input-bordered', min, max }) => {
  return (
    <label className="form-control">
      {label && (
        <div className="label">
          <span className="label-text">{label}</span>
        </div>
      )}
      <input
        type={type}
        className={className}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
        min={min}
        max={max}
      />
    </label>
  );
};

export default TextInput;


==================== client\src\components\AddMealPlanRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import Select from './ui/Select';
import { format, isValid } from 'date-fns';

function AddMealPlanRecipeModal({ mealPlanId, defaultDate, defaultMealType, defaultRecipeId  }) {
  const [recipeId, setRecipeId] = useState('');
  const [date, setDate] = useState(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
  const [mealType, setMealType] = useState(defaultMealType || '');
  const { recipes, createMealPlanRecipe } = useData();

  useEffect(() => {
    setDate(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
    setMealType(defaultMealType || '');
    setRecipeId(defaultRecipeId || '');
  }, [defaultDate, defaultMealType, defaultRecipeId]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!mealPlanId || !recipeId || !mealType || !date) {
      alert('All fields are required.');
      return;
    }

    const mealPlanRecipe = {
      MealPlanID: mealPlanId,
      RecipeID: recipeId,
      MealType: mealType,
      Date: date,
    };

    try {
      await createMealPlanRecipe(mealPlanRecipe);
      document.getElementById('add_meal_plan_recipe_modal').close();
      setRecipeId('');
      setMealType('');
      setDate('');
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add meal plan recipe');
    }
  };

  const recipeOptions = recipes.map(recipe => ({
    value: recipe.RecipeID,
    label: recipe.RecipeName,
  }));

  return (
    <Modal id="add_meal_plan_recipe_modal" title="Add Meal to Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <Select
          label="Recipe"
          value={recipeId}
          onChange={(e) => setRecipeId(e.target.value)}
          required
          options={recipeOptions}
          defaultOption="Select a recipe"
        />
        <Button type="submit">Add Meal</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanRecipeModal;


==================== client\src\components\ui\Select.jsx ====================

// src/components/ui/Select.jsx
import React from 'react';

const Select = ({ label, value, onChange, required, options, defaultOption, disabled }) => {
  return (
    <label className="form-control">
      <div className="label">
        <span className="label-text">{label}</span>
      </div>
      <select
        className="select select-bordered"
        value={value}
        onChange={onChange}
        required={required}
        disabled={disabled}
      >
        <option value="" disabled>{defaultOption}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value} disabled={option.disabled}>
            {option.label}
          </option>
        ))}
      </select>
    </label>
  );
};

export default Select;


==================== client\src\components\Calendar.jsx ====================

// src/components/Calendar.jsx
import React from 'react';
import Button from './ui/Button';
import { format, eachDayOfInterval, parseISO } from 'date-fns';

const Calendar = ({ mealPlan, mealPlanRecipes, recipes, onAddMeal, onModifyMeal }) => {
  const days = eachDayOfInterval({
    start: parseISO(mealPlan.StartDate),
    end: parseISO(mealPlan.EndDate),
  });

  const getMealForDay = (date, mealType) => {
    return mealPlanRecipes.find(
      (mpr) => mpr.Date === format(date, 'yyyy-MM-dd') && mpr.MealType === mealType
    );
  };

  const getRecipeName = (recipeId) => {
    const recipe = recipes.find(r => r.RecipeID === recipeId);
    return recipe ? recipe.RecipeName : 'Unknown Recipe';
  };

  return (
    <div className="grid grid-cols-7 gap-4">
      {days.map((day) => (
        <div key={day} className="border p-2">
          <h3 className="font-bold">{format(day, 'eee, MMM d')}</h3>
          {['Breakfast', 'Lunch', 'Dinner'].map((mealType) => {
            const meal = getMealForDay(day, mealType);
            return (
              <div key={mealType} className="my-2">
                <h4 className="font-semibold">{mealType}</h4>
                {meal ? (
                  <div>
                    <div>{getRecipeName(meal.RecipeID)}</div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="secondary"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID)}
                      >
                        Modify
                      </Button>
                      <Button
                        size="sm"
                        variant="error"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID, true)}
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                ) : (
                  <Button
                    size="sm"
                    variant="secondary"
                    outline
                    onClick={() => onAddMeal(day, mealType)}
                  >
                    Add {mealType}
                  </Button>
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
};

export default Calendar;


==================== C:\Code\recipe-app\combine.py ====================

import os

def combine_files(directory, output_file):
    """
    Combines text files from a specified directory into a single output file,
    excluding certain directories, file extensions, and specific filenames.
    """
    excluded_dirs = {'node_modules', '.git', 'migrations', '__pycache__'}
    excluded_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.sqlite', '.sqlite3', '.log'}
    excluded_files = {'package.json', 'package-lock.json', 'yarn.lock', '.gitignore', '.npmrc'}
    
    with open(output_file, 'a', encoding='utf-8') as outfile:
        for root, dirs, files in os.walk(directory):
            dirs[:] = [d for d in dirs if d not in excluded_dirs]
            for file in files:
                if any(file.endswith(ext) for ext in excluded_extensions) or file in excluded_files:
                    continue
                file_path = os.path.join(root, file)
                outfile.write(f"\n\n{'='*20} {file_path} {'='*20}\n\n")
                try:
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        content = infile.read()
                        outfile.write(content)
                except UnicodeDecodeError:
                    with open(file_path, 'r', encoding='latin-1') as infile:
                        content = infile.read()
                        outfile.write(content)

base_dir = os.path.dirname(os.path.abspath(__file__))
client_dir = os.path.join(base_dir, 'client')
backend_dir = os.path.join(base_dir, 'backend')
frontend_dir = os.path.join(base_dir, 'frontend')
server_dir = os.path.join(base_dir, 'server')

client_output = os.path.join(base_dir, 'output_client.txt')
backend_output = os.path.join(base_dir, 'output_backend.txt')
frontend_output = os.path.join(base_dir, 'output_frontend.txt')
server_output = os.path.join(base_dir, 'output_server.txt')
all_output = os.path.join(base_dir, 'output_all.txt')

# Clear or create the output files
open(client_output, 'w', encoding='utf-8').close()
open(backend_output, 'w', encoding='utf-8').close()
open(frontend_output, 'w', encoding='utf-8').close()
open(server_output, 'w', encoding='utf-8').close()
open(all_output, 'w', encoding='utf-8').close()

# Combine client files
combine_files(client_dir, client_output)

# Combine backend files
combine_files(backend_dir, backend_output)

# Combine frontend files
combine_files(frontend_dir, frontend_output)

# Combine server files
combine_files(server_dir, server_output)

# Combine all files
combine_files(base_dir, all_output)

==================== C:\Code\recipe-app\combined_project_files.txt ====================



==================== C:\Code\recipe-app\client/src\App.css ====================



==================== C:\Code\recipe-app\client/src\App.jsx ====================

import React from 'react';
import AppRoutes from './routes';
import NavBar from './components/NavBar';
import { useAuth } from './context/AuthContext';
import SideBar from './components/SideBar';

function App() {
  const { isAuthenticated } = useAuth();

  return (
    <div className="flex flex-col min-h-screen">
      <NavBar />
      <div className="flex grow">
        {isAuthenticated && <SideBar />}
        <AppRoutes />
      </div>
    </div>
  );
}

export default App;


==================== C:\Code\recipe-app\client/src\index.css ====================

@tailwind base;
@tailwind components;
@tailwind utilities;


==================== C:\Code\recipe-app\client/src\main.jsx ====================

import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';
import { AuthProvider } from './context/AuthContext';
import { DataProvider } from './context/DataContext';

const rootElement = document.getElementById('root');
const root = createRoot(rootElement);

root.render(
  <BrowserRouter>
    <AuthProvider>
      <DataProvider>
        <App />
      </DataProvider>
    </AuthProvider>
  </BrowserRouter>
);


==================== C:\Code\recipe-app\client/src\routes.jsx ====================

// src/routes.jsx
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Login from './pages/Login';
import Home from './pages/Home';
import Register from './pages/Register';
import ManageCategories from './pages/ManageCategories';
import ManageSubCategories from './pages/ManageSubCategories';
import ManageIngredients from './pages/ManageIngredients';
import ManageRecipes from './pages/ManageRecipes';
import ManageAuthors from './pages/ManageAuthors';
import ManageRecipeBooks from './pages/ManageRecipeBooks'; // Import the new page
import PrivateRoute from './components/PrivateRoute';

function AppRoutes() {
  return (
    <Routes>
      <Route path="/login" element={<Login />} />
      <Route path="/register" element={<Register />} />
      <Route path="/manage-categories" element={<PrivateRoute><ManageCategories /></PrivateRoute>} />
      <Route path="/manage-sub-categories" element={<PrivateRoute><ManageSubCategories /></PrivateRoute>} />
      <Route path="/manage-ingredients" element={<PrivateRoute><ManageIngredients /></PrivateRoute>} />
      <Route path="/manage-recipes" element={<PrivateRoute><ManageRecipes /></PrivateRoute>} />
      <Route path="/manage-authors" element={<PrivateRoute><ManageAuthors /></PrivateRoute>} />
      <Route path="/manage-recipe-books" element={<PrivateRoute><ManageRecipeBooks /></PrivateRoute>} /> {/* Add route */}
      <Route path="/" element={<PrivateRoute><Home /></PrivateRoute>} />
      {/* Add other routes here */}
    </Routes>
  );
}

export default AppRoutes;


==================== C:\Code\recipe-app\client/src\assets\react.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

==================== C:\Code\recipe-app\client/src\components\AddAuthorModal.jsx ====================

// src/components/AddAuthorModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';

function AddAuthorModal() {
  const [authorName, setAuthorName] = useState('');
  const [authorImageURL, setAuthorImageURL] = useState('');
  const { createAuthor } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createAuthor(authorName, authorImageURL);
      document.getElementById('add_author_modal').close();
    } catch (error) {
      alert('Failed to add author');
    }
  };

  return (
    <Modal id="add_author_modal" title="Add Author">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Author Name"
          value={authorName}
          onChange={(e) => setAuthorName(e.target.value)}
          required
        />
        <TextInput
          label="Author Image URL"
          value={authorImageURL}
          onChange={(e) => setAuthorImageURL(e.target.value)}
        />
        <Button>Add Author</Button>
      </form>
    </Modal>
  );
}

export default AddAuthorModal;


==================== C:\Code\recipe-app\client/src\components\AddCategoryModal.jsx ====================

// src/components/AddCategoryModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Button from './ui/Button';

function AddCategoryModal() {
  const [categoryName, setCategoryName] = useState('');
  const { createCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createCategory(categoryName);
      document.getElementById('add_category_modal').close();
    } catch (error) {
      alert('Failed to add category');
    }
  };

  return (
    <Modal id="add_category_modal" title="Add Category">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Category Name"
          value={categoryName}
          onChange={(e) => setCategoryName(e.target.value)}
          required
        />
        <Button>Add Category</Button>
      </form>
    </Modal>
  );
}

export default AddCategoryModal;


==================== C:\Code\recipe-app\client/src\components\AddIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Select from './ui/Select';
import Button from './ui/Button';

function AddIngredientModal({ onIngredientAdded = () => {} }) {
  const [ingredientName, setIngredientName] = useState('');
  const [purchaseWeightVolume, setPurchaseWeightVolume] = useState('');
  const [purchaseUnitId, setPurchaseUnitId] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const [subCategoryId, setSubCategoryId] = useState('');
  const [purchaseWeightUnitId, setPurchaseWeightUnitId] = useState('');

  const { categories, subCategories, units, createIngredient } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const ingredient = {
      IngredientName: ingredientName,
      PurchaseWeightVolume: purchaseWeightVolume,
      PurchaseUnitID: purchaseUnitId,
      SubCategoryID: subCategoryId,
      PurchaseWeightUnitID: purchaseWeightUnitId,
    };

    try {
      const newIngredient = await createIngredient(ingredient);
      onIngredientAdded(newIngredient);
      document.getElementById('add_ingredient_modal').close();
    } catch (error) {
      alert('Failed to add ingredient');
    }
  };

  const filteredSubCategories = subCategories.filter(
    (subCategory) => subCategory.CategoryID === parseInt(categoryId)
  );

  const unitOptions = units.map((unit) => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  const subCategoryOptions = filteredSubCategories.map((subCategory) => ({
    value: subCategory.SubCategoryID,
    label: subCategory.SubCategoryName,
  }));

  return (
    <Modal id="add_ingredient_modal" title="Add Ingredient" className="modal modal-bottom sm:modal-middle">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Ingredient Name"
          value={ingredientName}
          onChange={(e) => setIngredientName(e.target.value)}
          required
        />
        <TextInput
          label="Purchase Weight Volume"
          value={purchaseWeightVolume}
          onChange={(e) => setPurchaseWeightVolume(e.target.value)}
          required
        />
        <Select
          label="Purchase Unit"
          value={purchaseUnitId}
          onChange={(e) => setPurchaseUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Select
          label="Sub-Category"
          value={subCategoryId}
          onChange={(e) => setSubCategoryId(e.target.value)}
          required
          options={subCategoryOptions}
          defaultOption="Select a sub-category"
          disabled={!categoryId} // Disable until a category is selected
        />
        <Select
          label="Purchase Weight Unit"
          value={purchaseWeightUnitId}
          onChange={(e) => setPurchaseWeightUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Button>Add Ingredient</Button>
      </form>
    </Modal>
  );
}

export default AddIngredientModal;


==================== C:\Code\recipe-app\client/src\components\AddRecipeBookModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeBookModal() {
  const [bookName, setBookName] = useState('');
  const [authorID, setAuthorID] = useState('');
  const [coverArtURL, setCoverArtURL] = useState('');

  const { authors, createRecipeBook } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const recipeBook = {
      AuthorID: authorID,
      BookName: bookName,
      CoverArtURL: coverArtURL
    };

    try {
      await createRecipeBook(recipeBook);
      document.getElementById('add_recipe_book_modal').close();
    } catch (error) {
      alert('Failed to add book');
    }
  };

  const authorOptions = authors.map(author => ({
    value: author.AuthorID,
    label: author.AuthorName,
  }));

  return (
    <Modal id="add_recipe_book_modal" title="Add Recipe Book">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Book Name"
          value={bookName}
          onChange={(e) => setBookName(e.target.value)}
          required
        />
        <Select
          label="Author"
          value={authorID}
          onChange={(e) => setAuthorID(e.target.value)}
          required
          options={authorOptions}
          defaultOption="Select an author"
        />
        <TextInput
          label="Cover Art URL"
          value={coverArtURL}
          onChange={(e) => setCoverArtURL(e.target.value)}
        />
        <Button>Add Book</Button>
      </form>
    </Modal>
  );
}

export default AddRecipeBookModal;


==================== C:\Code\recipe-app\client/src\components\AddRecipeIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import Fuse from 'fuse.js';
import { useData } from '../context/DataContext';
import AddIngredientModal from './AddIngredientModal';
import Table from './ui/Table';
import Button from './ui/Button';
import Modal from './ui/Modal';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeIngredientModal({ recipeId }) {
  const [selectedIngredientId, setSelectedIngredientId] = useState('');
  const [quantity, setQuantity] = useState('');
  const [selectedUnitId, setSelectedUnitId] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredIngredients, setFilteredIngredients] = useState([]);
  const [defaultUnitId, setDefaultUnitId] = useState('');

  const { ingredients, units, categories, subCategories, createRecipeIngredient } = useData();

  useEffect(() => {
    if (ingredients.length && categories.length && subCategories.length) {
      const updatedIngredients = ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      });
      setFilteredIngredients(updatedIngredients);
    }
  }, [ingredients, categories, subCategories]);

  const handleSearch = (e) => {
    const term = e.target.value;
    setSearchTerm(term);

    if (term === '') {
      setFilteredIngredients(ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      }));
    } else {
      const fuse = new Fuse(filteredIngredients, {
        keys: ['IngredientName', 'CategoryName', 'SubCategoryName'],
        threshold: 0.3, // Adjust the threshold as needed
      });

      const result = fuse.search(term);
      setFilteredIngredients(result.map((r) => r.item));
    }
  };

  const handleAddClick = (ingredientId) => {
    const ingredient = ingredients.find((ing) => ing.IngredientID === ingredientId);
    if (ingredient) {
      setSelectedIngredientId(ingredientId);
      setDefaultUnitId(ingredient.PurchaseUnitID || ''); // Handle missing PurchaseUnitID
      setSelectedUnitId(ingredient.PurchaseUnitID || ''); // Set the default unit id
      document.getElementById('quantity_unit_modal').showModal();
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = {
      RecipeID: recipeId,
      IngredientID: selectedIngredientId,
      Quantity: parseFloat(quantity),
      UnitID: selectedUnitId || defaultUnitId,
    };

    try {
      await createRecipeIngredient(data);
      window.location.reload(); // Refresh the page to show the new ingredient
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add ingredient');
    }
  };

  const handleAddNewIngredient = () => {
    document.getElementById('add_ingredient_modal').showModal();
  };

  const handleNewIngredientAdded = (newIngredient) => {
    if (newIngredient && newIngredient.PurchaseUnitID) {
      setFilteredIngredients((prevIngredients) => [
        ...prevIngredients,
        {
          ...newIngredient,
          CategoryName: '',
          SubCategoryName: '',
        },
      ]);

      // Automatically select the newly added ingredient and open the quantity/unit modal
      setSelectedIngredientId(newIngredient.IngredientID);
      setDefaultUnitId(newIngredient.PurchaseUnitID);
      setSelectedUnitId(newIngredient.PurchaseUnitID);
      setQuantity(''); // Reset the quantity
      document.getElementById('quantity_unit_modal').showModal();
    } else {
      alert('New ingredient does not have a PurchaseUnitID');
    }
  };

  const headers = ['Ingredient', 'Category', 'Sub-Category', 'Action'];
  const data = filteredIngredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientName,
      ingredient.CategoryName,
      ingredient.SubCategoryName,
      <Button
        size="sm"
        variant="primary"
        outline={true}
        onClick={() => handleAddClick(ingredient.IngredientID)}
      >
        Add
      </Button>
    ],
  }));

  const unitOptions = units.map(unit => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  return (
    <div>
      <Modal id="add_recipe_ingredient_modal" title="Add Ingredient to Recipe" wide={true}>
        <div className='flex flex-col gap-4 mb-8'>
          <TextInput
            label="Search Ingredient"
            value={searchTerm}
            onChange={handleSearch}
            placeholder="Type to search ingredients..."
          />

          <Button
            outline={true}
            size='sm'
            onClick={handleAddNewIngredient}
          >Add New Ingredient</Button>
        </div>
        <Table headers={headers} data={data} />
      </Modal>

      <Modal id="quantity_unit_modal" title="Enter Quantity and Unit">
        <form onSubmit={handleSubmit} className="flex gap-4 flex-col mt-4">
          <TextInput
            label="Quantity"
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
            required
          />

          <Select
            label="Unit"
            value={selectedUnitId || defaultUnitId}
            onChange={(e) => setSelectedUnitId(e.target.value)}
            required
            options={unitOptions}
            defaultOption="Select a unit"
          />
          <Button>Add Ingredient</Button>
        </form>
      </Modal>

      <AddIngredientModal onIngredientAdded={handleNewIngredientAdded} />
    </div>
  );
}

export default AddRecipeIngredientModal;


==================== C:\Code\recipe-app\client/src\components\AddRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeModal() {
    const [recipeName, setRecipeName] = useState('');
    const [authorID, setAuthorID] = useState('');
    const [bookID, setBookID] = useState('');
    const [pageNumber, setPageNumber] = useState('');
    const [onlineURL, setOnlineURL] = useState('');
    const [cookTime, setCookTime] = useState('');
    const [difficulty, setDifficulty] = useState('');
    const [type, setType] = useState('');
    const [imageURL, setImageURL] = useState('');
    const [servings, setServings] = useState('');
    const [cuisine, setCuisine] = useState('');
    const [filteredBooks, setFilteredBooks] = useState([]);

    const { authors, recipeBooks, createRecipe } = useData();

    useEffect(() => {
        if (authorID) {
            setFilteredBooks(recipeBooks.filter(book => book.AuthorID === parseInt(authorID)));
        } else {
            setFilteredBooks([]);
        }
    }, [authorID, recipeBooks]);

    const handleAuthorChange = (e) => {
        setAuthorID(e.target.value);
        setBookID(''); // Reset book selection when author changes
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        const recipe = {
            RecipeName: recipeName,
            AuthorID: parseInt(authorID) || null,
            BookID: parseInt(bookID) || null,
            PageNumber: parseInt(pageNumber) || null,
            OnlineURL: onlineURL,
            CookTime: parseInt(cookTime) || null,
            Difficulty: difficulty,
            Type: type,
            ImageURL: imageURL,
            Servings: parseInt(servings) || null,
            Cuisine: cuisine,
        };

        try {
            await createRecipe(recipe);
            document.getElementById('add_recipe_modal').close();
        } catch (error) {
            alert('Failed to add recipe');
        }
    };

    const authorOptions = authors.map(author => ({
        value: author.AuthorID,
        label: author.AuthorName
    }));

    const bookOptions = filteredBooks.map(book => ({
        value: book.BookID,
        label: book.BookName
    }));

    return (
        <Modal id="add_recipe_modal" title="Add Recipe">
            <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
                <TextInput
                    label="Recipe Name"
                    value={recipeName}
                    onChange={(e) => setRecipeName(e.target.value)}
                    required
                />
                <Select
                    label="Author"
                    value={authorID}
                    onChange={handleAuthorChange}
                    required
                    options={authorOptions}
                    defaultOption="Select an author"
                />
                <Select
                    label="Book"
                    value={bookID}
                    onChange={(e) => setBookID(e.target.value)}
                    options={bookOptions}
                    defaultOption="Select a book"
                    disabled={!authorID}
                />
                <TextInput
                    label="Page Number"
                    type="number"
                    value={pageNumber}
                    onChange={(e) => setPageNumber(e.target.value)}
                    disabled={!bookID}
                />
                <TextInput
                    label="Online URL"
                    type="url"
                    value={onlineURL}
                    onChange={(e) => setOnlineURL(e.target.value)}
                />
                <TextInput
                    label="Cook Time (minutes)"
                    type="number"
                    value={cookTime}
                    onChange={(e) => setCookTime(e.target.value)}
                    required
                />
                <TextInput
                    label="Difficulty"
                    value={difficulty}
                    onChange={(e) => setDifficulty(e.target.value)}
                />
                <TextInput
                    label="Type"
                    value={type}
                    onChange={(e) => setType(e.target.value)}
                />
                <TextInput
                    label="Image URL"
                    type="url"
                    value={imageURL}
                    onChange={(e) => setImageURL(e.target.value)}
                />
                <TextInput
                    label="Servings"
                    type="number"
                    value={servings}
                    onChange={(e) => setServings(e.target.value)}
                    required
                />
                <TextInput
                    label="Cuisine"
                    value={cuisine}
                    onChange={(e) => setCuisine(e.target.value)}
                />
                <Button>Add Recipe</Button>
            </form>
        </Modal>
    );
}

export default AddRecipeModal;


==================== C:\Code\recipe-app\client/src\components\AddSubCategoryModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddSubCategoryModal() {
  const [subCategoryName, setSubCategoryName] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const { categories, createSubCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const subCategory = {
      SubCategoryName: subCategoryName,
      CategoryID: categoryId,
    };

    try {
      await createSubCategory(subCategory);
      document.getElementById('add_sub_category_modal').close();
    } catch (error) {
      console.error('Error adding sub-category:', error);
      alert('Failed to add sub-category');
    }
  };

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  return (
    <Modal id="add_sub_category_modal" title="Add Sub-Category">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Sub-Category Name"
          value={subCategoryName}
          onChange={(e) => setSubCategoryName(e.target.value)}
          required
        />        
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Button>Add Sub-Category</Button>
      </form>
    </Modal>
  );
}

export default AddSubCategoryModal;


==================== C:\Code\recipe-app\client/src\components\AuthorTable.jsx ====================

// src/components/AuthorTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import Table from './ui/Table';
import DeleteButton from './ui/DeleteButton';

function AuthorTable() {
  const { authors, deleteAuthor } = useData();

  const handleDelete = async (authorId) => {
    if (window.confirm('Are you sure you want to delete this author?')) {
      await deleteAuthor(authorId);
    }
  };

  const headers = ['#', 'Author Name', 'Actions'];

  const data = authors.map((author, index) => ({
    id: author.AuthorID,
    cells: [
      index + 1,
      author.AuthorName,
      <DeleteButton onClick={() => handleDelete(author.AuthorID)} />      
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default AuthorTable;


==================== C:\Code\recipe-app\client/src\components\CategoryTable.jsx ====================

// src/components/CategoryTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function CategoryTable() {
  const { categories, subCategories, deleteCategory } = useData();

  const handleDelete = async (categoryId) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      await deleteCategory(categoryId);
    }
  };

  const headers = ['ID', 'Category Name', 'Sub-Categories', 'Actions'];

  const data = categories.map((category, index) => {
    const categorySubCategories = subCategories.filter(sub => sub.CategoryID === category.CategoryID).map(sub => sub.SubCategoryName).join(', ');

    return {
      id: category.CategoryID,
      cells: [
        category.CategoryID,
        category.CategoryName,
        categorySubCategories || 'None',
        <DeleteButton onClick={() => handleDelete(category.CategoryID)} />
      ],
    };
  });

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default CategoryTable;


==================== C:\Code\recipe-app\client/src\components\IngredientTable.jsx ====================

// src/components/IngredientTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function IngredientTable() {
  const { ingredients, categories, subCategories, units, deleteIngredient } = useData();

  const handleDelete = async (ingredientId) => {
    if (window.confirm('Are you sure you want to delete this ingredient?')) {
      try {
        await deleteIngredient(ingredientId);
      } catch (error) {
        alert('Failed to delete ingredient');
      }
    }
  };

  const getSubCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    return subCategory ? subCategory.SubCategoryName : 'Unknown';
  };

  const getCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    if (subCategory) {
      const category = categories.find(category => category.CategoryID === subCategory.CategoryID);
      return category ? category.CategoryName : 'Unknown';
    }
    return 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const headers = ['ID', 'Ingredient Name', 'Purchase Weight Volume', 'Purchase Unit', 'Category', 'Subcategory', 'Purchase Weight Unit', 'Actions'];

  const data = ingredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientID,
      ingredient.IngredientName,
      ingredient.PurchaseWeightVolume,
      getUnitName(ingredient.PurchaseUnitID),
      getCategoryName(ingredient.SubCategoryID),
      getSubCategoryName(ingredient.SubCategoryID),
      getUnitName(ingredient.PurchaseWeightUnitID),
      <DeleteButton onClick={() => handleDelete(ingredient.IngredientID)} />
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default IngredientTable;


==================== C:\Code\recipe-app\client/src\components\NavBar.jsx ====================

// src/components/NavBar.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ThemeSwitcher from './ThemeSwitcher';
import { useAuth } from '../context/AuthContext';

const NavBar = () => {
  const { isAuthenticated, logout } = useAuth();

  return (
    <nav className="navbar justify-between bg-base-300">
      <a className="btn btn-ghost text-lg">
        <img alt="Logo" src="../vite.svg" className="w-4" />
        Recipe App
      </a>
      <div className="dropdown dropdown-end sm:hidden">
        <button className="btn btn-ghost">
          <i className="fa-solid fa-bars text-lg"></i>
        </button>

        <ul tabIndex="0" className="dropdown-content menu z-[1] bg-base-200 p-6 rounded-box shadow w-56 gap-2">
          <li><a>About</a></li>
          <li><a>Pricing</a></li>
          <li><a>Blog</a></li>
          <li><a>Contact</a></li>
          <a className="btn btn-sm btn-primary">Log in</a>
        </ul>
      </div>
      <div className="hidden sm:flex gap-2">
        <ThemeSwitcher />       
        {isAuthenticated ? (
          <button
            onClick={logout}
            className="btn btn-primary btn-sm"
          >
            Logout
          </button>
        ) : (
          <>
            <Link to="/register" className="btn btn-ghost btn-sm">Register</Link>
            <Link to="/login" className="btn btn-primary btn-sm">Login</Link>
          </>
        )}
      </div>
    </nav>
  );
};

export default NavBar;


==================== C:\Code\recipe-app\client/src\components\PrivateRoute.jsx ====================

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import SideBar from './SideBar';

const PrivateRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  return (
    <div className="flex grow">     
      <div className="flex flex-col px-8 py-6 grow">
        {children}
      </div>
    </div>
  );
};

export default PrivateRoute;


==================== C:\Code\recipe-app\client/src\components\RecipeBookTable.jsx ====================

// src/components/RecipeBookTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';

function RecipeBookTable() {
  const { recipeBooks, authors, deleteRecipeBook } = useData();

  const handleDelete = async (bookId) => {
    if (window.confirm('Are you sure you want to delete this book?')) {
      try {
        await deleteRecipeBook(bookId);
      } catch (error) {
        alert('Failed to delete book');
      }
    }
  };

  const getAuthorName = (authorId) => {
    const author = authors.find(author => author.AuthorID === authorId);
    return author ? author.AuthorName : 'Unknown';
  };

  const headers = ['#', 'Book Name', 'Author Name', 'Actions'];

  const data = useMemo(() => 
    recipeBooks.map((book, index) => ({
      id: book.BookID,
      cells: [
        index + 1,
        book.BookName,
        getAuthorName(book.AuthorID),
        <DeleteButton onClick={() => handleDelete(book.BookID)} />,
      ],
    })),
    [recipeBooks, authors]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeBookTable;


==================== C:\Code\recipe-app\client/src\components\RecipeTable.jsx ====================

// src/components/RecipeTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function RecipeTable({ onAddIngredients }) {
  const { recipes, ingredients, units, recipeIngredients, deleteRecipe } = useData();

  const handleDelete = async (recipeId) => {
    if (window.confirm('Are you sure you want to delete this recipe?')) {
      try {
        await deleteRecipe(recipeId);
      } catch (error) {
        alert('Failed to delete recipe');
      }
    }
  };

  const getIngredientName = (ingredientId) => {
    const ingredient = ingredients.find(ingredient => ingredient.IngredientID === ingredientId);
    return ingredient ? ingredient.IngredientName : 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const renderIngredients = (recipeId) => {
    const filteredIngredients = recipeIngredients.filter(ri => ri.RecipeID === recipeId);
    return filteredIngredients.map(ingredient => (
      <li key={ingredient.RecipeIngredientID}>
        {ingredient.Quantity} {getUnitName(ingredient.UnitID)} of {getIngredientName(ingredient.IngredientID)}
      </li>
    ));
  };

  const headers = ['#', 'Recipe Name', 'Author ID', 'Ingredients', 'Actions'];

  const data = useMemo(() =>
    recipes.map((recipe, index) => ({
      id: recipe.RecipeID,
      cells: [
        index + 1,
        recipe.RecipeName,
        recipe.AuthorID,
        <ul className='list-disc ml-4'>
          {renderIngredients(recipe.RecipeID)}
        </ul>,
        <div className='flex gap-2'>
          <Button
            size="sm"
            variant="primary"
            outline={true}
            onClick={() => onAddIngredients(recipe.RecipeID)}
          >
            Add Ingredients
          </Button>
          <DeleteButton onClick={() => handleDelete(recipe.RecipeID)} />
        </div>
      ],
    })),
    [recipes, recipeIngredients, ingredients, units]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeTable;


==================== C:\Code\recipe-app\client/src\components\SideBar.jsx ====================

// src/components/SideBar.jsx
import React from "react";
import { NavLink } from "react-router-dom";
import { FaTachometerAlt, FaList, FaSitemap, FaLeaf, FaBook, FaUser, FaUtensils } from "react-icons/fa";

const menuItems = [
  { title: "Dashboard", link: "/", Icon: FaTachometerAlt },
  { title: "Ingredients", isTitle: true },
  { title: "Categories", link: "/manage-categories", Icon: FaList },
  { title: "Sub-categories", link: "/manage-sub-categories", Icon: FaSitemap },
  { title: "Ingredients", link: "/manage-ingredients", Icon: FaLeaf },
  { title: "Recipes", isTitle: true },
  { title: "Recipes", link: "/manage-recipes", Icon: FaUtensils },
  { title: "Authors", link: "/manage-authors", Icon: FaUser },
  { title: "Recipe books", link: "/manage-recipe-books", Icon: FaBook },
];

const MenuItem = ({ item }) => {
  if (item.isTitle) {
    return <li className="menu-title">{item.title}</li>;
  }

  const { Icon } = item;

  return (
    <li>
      <NavLink to={item.link} className={({ isActive }) => (isActive ? "active" : "")}>
        <Icon className="inline mr-2" />
        {item.title}
      </NavLink>
    </li>
  );
};

export default function SideBar() {
  return (
    <aside className="sticky top-0 overflow-y-auto w-60 bg-base-200 p-4 min-w-60">
      <ul className="menu px-0 gap-1">
        {menuItems.map((item, index) => (
          <MenuItem key={index} item={item} />
        ))}
      </ul>
    </aside>
  );
}

==================== C:\Code\recipe-app\client/src\components\SubCategoryTable.jsx ====================

// src/components/SubCategoryTable.jsx
import React, { useState, useMemo } from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function SubCategoryTable() {
  const [selectedCategories, setSelectedCategories] = useState([]);
  const { categories, subCategories, deleteSubCategory } = useData();

  const handleDelete = async (subCategoryId) => {
    if (window.confirm('Are you sure you want to delete this sub-category?')) {
      try {
        await deleteSubCategory(subCategoryId);
      } catch (error) {
        alert('Failed to delete sub-category');
      }
    }
  };

  const getCategoryName = (categoryId) => {
    const category = categories.find(category => category.CategoryID === categoryId);
    return category ? category.CategoryName : 'Unknown';
  };

  const handleCategoryChange = (e) => {
    const selectedValue = parseInt(e.target.value);
    setSelectedCategories(prevSelected =>
      prevSelected.includes(selectedValue)
        ? prevSelected.filter(id => id !== selectedValue)
        : [...prevSelected, selectedValue]
    );
  };

  const filteredSubCategories = useMemo(() => 
    selectedCategories.length > 0
      ? subCategories.filter(subCategory => selectedCategories.includes(subCategory.CategoryID))
      : subCategories,
    [subCategories, selectedCategories]
  );

  const headers = ['#', 'Sub-Category Name', 'Category Name', 'Actions'];

  const data = useMemo(() =>
    filteredSubCategories.map((subCategory, index) => ({
      id: subCategory.SubCategoryID,
      cells: [
        index + 1,
        subCategory.SubCategoryName,
        getCategoryName(subCategory.CategoryID),
        <DeleteButton key={subCategory.SubCategoryID} onClick={() => handleDelete(subCategory.SubCategoryID)} />
      ],
    })),
    [filteredSubCategories, categories]
  );

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center mb-4">
        <label className="mr-2">Filter by Category:</label>
        <select
          className="select select-bordered"
          value=""
          onChange={handleCategoryChange}
        >
          <option value="" disabled>Select Categories</option>
          {categories.map(category => (
            <option
              key={category.CategoryID}
              value={category.CategoryID}
              disabled={selectedCategories.includes(category.CategoryID)}
            >
              {category.CategoryName}
            </option>
          ))}
        </select>
      </div>
      <div className="mb-4">
        {selectedCategories.map(categoryId => (
          <div key={categoryId} className="badge badge-primary mr-2">
            {getCategoryName(categoryId)}
            <button
              type="button"
              className="ml-1"
              onClick={() => setSelectedCategories(selectedCategories.filter(id => id !== categoryId))}
            >
              ✕
            </button>
          </div>
        ))}
      </div>
      <Table headers={headers} data={data} />
    </div>
  );
}

export default SubCategoryTable;


==================== C:\Code\recipe-app\client/src\components\ThemeSwitcher.jsx ====================

import React, { useEffect, useState } from 'react';

const ThemeSwitcher = () => {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
      setTheme(savedTheme);
    }
  }, []);

  const handleThemeChange = (event) => {
    const selectedTheme = event.target.value;
    document.documentElement.setAttribute('data-theme', selectedTheme);
    localStorage.setItem('theme', selectedTheme);
    setTheme(selectedTheme);
  };

  return (   
    <div className="dropdown dropdown-end">
      <select className="btn btn-ghost btn-sm" value={theme} onChange={handleThemeChange}>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
        <option value="cupcake">Cupcake</option>
        <option value="bumblebee">Bumblebee</option>
        <option value="emerald">Emerald</option>
        <option value="corporate">Corporate</option>
        <option value="synthwave">Synthwave</option>
        <option value="retro">Retro</option>
        <option value="cyberpunk">Cyberpunk</option>
        <option value="valentine">Valentine</option>
        <option value="halloween">Halloween</option>
        <option value="garden">Garden</option>
        <option value="forest">Forest</option>
        <option value="aqua">Aqua</option>
        <option value="lofi">Lofi</option>
        <option value="pastel">Pastel</option>
        <option value="fantasy">Fantasy</option>
        <option value="wireframe">Wireframe</option>
        <option value="black">Black</option>
        <option value="luxury">Luxury</option>
        <option value="dracula">Dracula</option>
        <option value="cmyk">CMYK</option>
        <option value="autumn">Autumn</option>
        <option value="business">Business</option>
        <option value="acid">Acid</option>
        <option value="lemonade">Lemonade</option>
        <option value="night">Night</option>
        <option value="coffee">Coffee</option>
        <option value="winter">Winter</option>
      </select>
    </div>
  );
};

export default ThemeSwitcher;


==================== C:\Code\recipe-app\client/src\components\ui\Button.jsx ====================

// src/components/ui/Button.jsx
import React from 'react';

const Button = ({ type, variant = 'primary', size = 'md', outline = false, block = false, circle = false, square = false, className = '', onClick, children }) => {
  const baseClass = 'btn';
  const variantClass = `btn-${variant}`;
  const sizeClass = `btn-${size}`;
  const outlineClass = outline ? 'btn-outline' : '';
  const blockClass = block ? 'btn-block' : '';
  const circleClass = circle ? 'btn-circle' : '';
  const squareClass = square ? 'btn-square' : '';

  const classes = `${baseClass} ${variantClass} ${sizeClass} ${outlineClass} ${blockClass} ${circleClass} ${squareClass} ${className}`;

  return (
    <button type={type} className={classes} onClick={onClick}>
      {children}
    </button>
  );
};

export default Button;


==================== C:\Code\recipe-app\client/src\components\ui\Card.jsx ====================

// src/components/ui/Card.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import Button from './Button';

const Card = ({ title, count, link }) => {
    return (
        <div className="card bg-base-100 w-96 shadow-xl">
            <div className="card-body">
                <h2 className="card-title">{title}</h2>
                <p className="text-2xl font-bold">{count}</p>
                <div className="card-actions justify-end">
                    <Link to={link}>
                        <Button
                            variant='secondary'
                            outline={true}
                            >
                            Manage
                        </Button>
                    </Link>
                </div>
            </div>
        </div>
    );
};

export default Card;


==================== C:\Code\recipe-app\client/src\components\ui\DeleteButton.jsx ====================

// src/components/ui/DeleteButton.jsx
import React from 'react';
import Button from './Button';

const DeleteButton = ({ onClick }) => (
  <Button
    size="sm"
    variant="error"
    outline={true}
    onClick={onClick}
  >
    Delete
  </Button>
);

export default DeleteButton;


==================== C:\Code\recipe-app\client/src\components\ui\Modal.jsx ====================

import React from 'react';

const Modal = ({ id, title, children, wide }) => {
    const modalBoxClass = wide ? 'modal-box w-11/12 max-w-5xl' : 'modal-box';
    const modalClass = wide ? 'modal' : 'modal modal-bottom sm:modal-middle';

    return (
        <dialog id={id} className={modalClass}>
            <div className={modalBoxClass}>
                <form method="dialog">
                    <button className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <h3 className="font-bold text-lg">{title}</h3>
                {children}
            </div>
        </dialog>
    );
};

export default Modal;


==================== C:\Code\recipe-app\client/src\components\ui\Select.jsx ====================

// src/components/ui/Select.jsx
import React from 'react';

const Select = ({ label, value, onChange, required, options, defaultOption, disabled }) => {
  return (
    <label className="form-control">
      <div className="label">
        <span className="label-text">{label}</span>
      </div>
      <select
        className="select select-bordered"
        value={value}
        onChange={onChange}
        required={required}
        disabled={disabled}
      >
        <option value="" disabled>{defaultOption}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
    </label>
  );
};

export default Select;


==================== C:\Code\recipe-app\client/src\components\ui\Table.jsx ====================

// src/components/ui/Table.jsx
import React, { useState } from 'react';
import { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';

const Table = ({ headers, data }) => {
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'ascending' });

  const sortedData = React.useMemo(() => {
    let sortableData = [...data];
    if (sortConfig.key) {
      sortableData.sort((a, b) => {
        const aKey = a.cells[headers.indexOf(sortConfig.key)];
        const bKey = b.cells[headers.indexOf(sortConfig.key)];

        if (aKey < bKey) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aKey > bKey) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableData;
  }, [data, sortConfig, headers]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (header) => {
    if (sortConfig.key === header) {
      return sortConfig.direction === 'ascending' ? <FaSortUp /> : <FaSortDown />;
    }
    return <FaSort />;
  };

  return (
    <div className="overflow-x-auto">
      <table className="table table-zebra">
        <thead>
          <tr>
            {headers.map((header, index) => (
              <th key={index} onClick={() => requestSort(header)} className="cursor-pointer">
                <div className="flex items-center">
                  {header}
                  <span className="ml-2">{getSortIcon(header)}</span>
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row, rowIndex) => (
            <tr key={row.id || rowIndex}>
              {row.cells.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Table;


==================== C:\Code\recipe-app\client/src\components\ui\TextInput.jsx ====================

// src/components/ui/TextInput.jsx
import React from 'react';

const TextInput = ({ label, type = 'text', value, onChange, required = false, placeholder = '', className = 'input input-bordered' }) => {
  return (
    <label className="form-control">
      {label && (
        <div className="label">
          <span className="label-text">{label}</span>
        </div>
      )}
      <input
        type={type}
        className={className}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
      />
    </label>
  );
};

export default TextInput;


==================== C:\Code\recipe-app\client/src\context\AuthContext.jsx ====================

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const storedAuth = localStorage.getItem('isAuthenticated');
    if (storedAuth === 'true') {
      setIsAuthenticated(true);
    }
    setLoading(false); // Indicate that the auth status has been checked
  }, []);

  const login = async (username, password) => {
    const response = await fetch('http://localhost:8000/api/users/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Password: password }),
    });

    if (response.ok) {
      setIsAuthenticated(true);
      localStorage.setItem('isAuthenticated', 'true');
      navigate('/');
    } else {
      alert('Login failed');
    }
  };

  const logout = () => {
    setIsAuthenticated(false);
    localStorage.removeItem('isAuthenticated');
    navigate('/login');
  };

  if (loading) {
    return <div>Loading...</div>; // Display a loading message or spinner while checking auth status
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


==================== C:\Code\recipe-app\client/src\context\DataContext.jsx ====================

// src/context/DataContext.jsx

import React, { createContext, useContext, useEffect, useState } from 'react';
import * as apiService from '../services/apiService';

const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [authors, setAuthors] = useState([]);
  const [recipeBooks, setRecipeBooks] = useState([]);
  const [recipes, setRecipes] = useState([]);
  const [units, setUnits] = useState([]);
  const [recipeIngredients, setRecipeIngredients] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [
          categoriesData,
          subCategoriesData,
          ingredientsData,
          authorsData,
          recipeBooksData,
          recipesData,
          unitsData,
          recipeIngredientsData,
        ] = await Promise.all([
          apiService.getCategories(),
          apiService.getSubCategories(),
          apiService.getIngredients(),
          apiService.getAuthors(),
          apiService.getRecipeBooks(),
          apiService.getRecipes(),
          apiService.getUnits(),
          apiService.getRecipeIngredients(),
        ]);

        setCategories(categoriesData);
        setSubCategories(subCategoriesData);
        setIngredients(ingredientsData);
        setAuthors(authorsData);
        setRecipeBooks(recipeBooksData);
        setRecipes(recipesData);
        setUnits(unitsData);
        setRecipeIngredients(recipeIngredientsData);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  // Categories CRUD
  const createCategory = async (categoryName) => {
    const newCategory = await apiService.addCategory(categoryName);
    setCategories([...categories, newCategory]);
  };

  const updateCategory = async (categoryId, categoryName) => {
    await apiService.updateCategory(categoryId, categoryName);
    setCategories(categories.map(cat => (cat.CategoryID === categoryId ? { ...cat, CategoryName: categoryName } : cat)));
  };

  const deleteCategory = async (categoryId) => {
    await apiService.deleteCategory(categoryId);
    setCategories(categories.filter(cat => cat.CategoryID !== categoryId));
  };

  // SubCategories CRUD
  const createSubCategory = async (subCategory) => {
    const newSubCategory = await apiService.addSubCategory(subCategory);
    setSubCategories([...subCategories, newSubCategory]);
  };

  const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    await apiService.updateSubCategory(subCategoryId, subCategoryName, categoryId);
    setSubCategories(subCategories.map(sub => (sub.SubCategoryID === subCategoryId ? { ...sub, SubCategoryName: subCategoryName, CategoryID: categoryId } : sub)));
  };

  const deleteSubCategory = async (subCategoryId) => {
    await apiService.deleteSubCategory(subCategoryId);
    setSubCategories(subCategories.filter(sub => sub.SubCategoryID !== subCategoryId));
  };

  // Ingredients CRUD
  const createIngredient = async (ingredient) => {
    const newIngredient = await apiService.addIngredient(ingredient);
    setIngredients([...ingredients, newIngredient]);
  };

  const updateIngredient = async (ingredientId, ingredient) => {
    await apiService.updateIngredient(ingredientId, ingredient);
    setIngredients(ingredients.map(ing => (ing.IngredientID === ingredientId ? { ...ing, ...ingredient } : ing)));
  };

  const deleteIngredient = async (ingredientId) => {
    await apiService.deleteIngredient(ingredientId);
    setIngredients(ingredients.filter(ing => ing.IngredientID !== ingredientId));
  };

  // Authors CRUD
  const createAuthor = async (authorName, authorImageURL) => {
    const newAuthor = await apiService.addAuthor(authorName, authorImageURL);
    setAuthors([...authors, newAuthor]);
  };

  const updateAuthor = async (authorId, author) => {
    await apiService.updateAuthor(authorId, author);
    setAuthors(authors.map(auth => (auth.AuthorID === authorId ? { ...auth, ...author } : auth)));
  };

  const deleteAuthor = async (authorId) => {
    await apiService.deleteAuthor(authorId);
    setAuthors(authors.filter(auth => auth.AuthorID !== authorId));
  };

  // Recipe Books CRUD
  const createRecipeBook = async (recipeBook) => {
    const newRecipeBook = await apiService.addRecipeBook(recipeBook);
    setRecipeBooks([...recipeBooks, newRecipeBook]);
  };

  const updateRecipeBook = async (recipeBookId, recipeBook) => {
    await apiService.updateRecipeBook(recipeBookId, recipeBook);
    setRecipeBooks(recipeBooks.map(book => (book.BookID === recipeBookId ? { ...book, ...recipeBook } : book)));
  };

  const deleteRecipeBook = async (recipeBookId) => {
    await apiService.deleteRecipeBook(recipeBookId);
    setRecipeBooks(recipeBooks.filter(book => book.BookID !== recipeBookId));
  };

  // Recipes CRUD
  const createRecipe = async (recipe) => {
    const newRecipe = await apiService.addRecipe(recipe);
    setRecipes([...recipes, newRecipe]);
  };

  const updateRecipe = async (recipeId, recipe) => {
    await apiService.updateRecipe(recipeId, recipe);
    setRecipes(recipes.map(rec => (rec.RecipeID === recipeId ? { ...rec, ...recipe } : rec)));
  };

  const deleteRecipe = async (recipeId) => {
    await apiService.deleteRecipe(recipeId);
    setRecipes(recipes.filter(rec => rec.RecipeID !== recipeId));
  };

  const createRecipeIngredient = async (recipeIngredient) => {
    const newRecipeIngredient = await apiService.addRecipeIngredient(recipeIngredient);
    setRecipeIngredients([...recipeIngredients, newRecipeIngredient]);
  };

  return (
    <DataContext.Provider
      value={{
        categories, createCategory, updateCategory, deleteCategory,
        subCategories, createSubCategory, updateSubCategory, deleteSubCategory,
        ingredients, createIngredient, updateIngredient, deleteIngredient,
        authors, createAuthor, updateAuthor, deleteAuthor,
        recipeBooks, createRecipeBook, updateRecipeBook, deleteRecipeBook,
        recipes, createRecipe, updateRecipe, deleteRecipe,
        units, recipeIngredients, createRecipeIngredient
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => useContext(DataContext);


==================== C:\Code\recipe-app\client/src\pages\Home.jsx ====================

// src/pages/Home.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';

function Home() {
  const { categories, subCategories, ingredients, authors, recipeBooks, recipes } = useData();

  const items = [
    { name: 'Categories', count: categories.length, link: '/manage-categories' },
    { name: 'Subcategories', count: subCategories.length, link: '/manage-sub-categories' },
    { name: 'Ingredients', count: ingredients.length, link: '/manage-ingredients' },
    { name: 'Authors', count: authors.length, link: '/manage-authors' },
    { name: 'Recipe Books', count: recipeBooks.length, link: '/manage-recipe-books' },
    { name: 'Recipes', count: recipes.length, link: '/manage-recipes' },
  ];

  return (
    <div className="flex flex-wrap gap-4 p-6">
      {items.map((item, index) => (
        <Card key={index} title={item.name} count={item.count} link={item.link} />
      ))}
    </div>
  );
}

export default Home;


==================== C:\Code\recipe-app\client/src\pages\Login.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import TextInput from '../components/ui/TextInput';
import Button from '../components/ui/Button';

function Login() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const { login } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        await login(username, password);
    };

    return (
        <div className="flex items-start p-8 justify-center w-full">
            <div className="flex flex-col w-96 rounded-box bg-base-200 p-6 gap-4">
                <h1 className="text-3xl font-bold self-center">Log in</h1>
                {/* <span className="self-center flex gap-2">
                    Don't have an account?
                    <a className="link link-secondary" onClick={() => navigate('/register')}>Register</a>
                </span>
                <a className="btn btn-neutral">
                    <i className="fa-brands fa-google text-primary"></i>
                    Log in with Google
                </a>
                <div className="divider">OR</div> */}
                <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
                    <TextInput
                        label="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                    />
                    <label className="form-control w-full">
                        <div className="label">
                            <span className="label-text">Password</span>
                            <a className="label-text link link-accent">Forgot password?</a>
                        </div>
                        <TextInput
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </label>
                    <div className="form-control">
                        <label className="cursor-pointer label self-start gap-2">
                            <input type="checkbox" className="checkbox" />
                            <span className="label-text">Remember me</span>
                        </label>
                    </div>
                    <Button type="submit">Log in</Button>
                </form>
            </div>
        </div>
    );
}

export default Login;


==================== C:\Code\recipe-app\client/src\pages\ManageAuthors.jsx ====================

// src/pages/ManageAuthors.jsx
import React from 'react';
import AuthorTable from '../components/AuthorTable';
import AddAuthorModal from '../components/AddAuthorModal';

function ManageAuthors() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Authors</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_author_modal').showModal()}>Add Author</button>
      </div>
      <AuthorTable />
      <AddAuthorModal />
    </div>
  );
}

export default ManageAuthors;


==================== C:\Code\recipe-app\client/src\pages\ManageCategories.jsx ====================

// src/pages/ManageCategories.jsx
import React from 'react';
import CategoryTable from '../components/CategoryTable';
import AddCategoryModal from '../components/AddCategoryModal';

function ManageCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_category_modal').showModal()}>Add Category</button>
      </div>
      <CategoryTable />
      <AddCategoryModal />
    </div>
  );
}

export default ManageCategories;


==================== C:\Code\recipe-app\client/src\pages\ManageIngredients.jsx ====================

// src/pages/ManageIngredients.jsx
import React from 'react';
import IngredientTable from '../components/IngredientTable';
import AddIngredientModal from '../components/AddIngredientModal';

function ManageIngredients() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Ingredients</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_ingredient_modal').showModal()}>Add Ingredient</button>
      </div>
      <IngredientTable />
      <AddIngredientModal />
    </div>
  );
}

export default ManageIngredients;


==================== C:\Code\recipe-app\client/src\pages\ManageRecipeBooks.jsx ====================

// src/pages/ManageRecipeBooks.jsx
import React from 'react';
import RecipeBookTable from '../components/RecipeBookTable';
import AddRecipeBookModal from '../components/AddRecipeBookModal';

function ManageRecipeBooks() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipe Books</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_recipe_book_modal').showModal()}>Add Recipe Book</button>
      </div>
      <RecipeBookTable />
      <AddRecipeBookModal />
    </div>
  );
}

export default ManageRecipeBooks;


==================== C:\Code\recipe-app\client/src\pages\ManageRecipes.jsx ====================

// src/pages/ManageRecipes.jsx
import React, { useState } from 'react';
import RecipeTable from '../components/RecipeTable';
import AddRecipeModal from '../components/AddRecipeModal';
import AddRecipeIngredientModal from '../components/AddRecipeIngredientModal';
import Button from '../components/ui/Button';

function ManageRecipes() {
  const [selectedRecipeId, setSelectedRecipeId] = useState(null);

  const handleAddIngredients = (recipeId) => {
    setSelectedRecipeId(recipeId);
    document.getElementById('add_recipe_ingredient_modal').showModal();
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipes</h1>
      <div>
        <Button
          size='sm'
          variant='secondary'
          outline={true}
          onClick={() => document.getElementById('add_recipe_modal').showModal()}
        >
          Add Recipe
        </Button>       
      </div>
      <RecipeTable onAddIngredients={handleAddIngredients} />
      <AddRecipeModal />
      <AddRecipeIngredientModal recipeId={selectedRecipeId} />
    </div>
  );
}

export default ManageRecipes;


==================== C:\Code\recipe-app\client/src\pages\ManageSubCategories.jsx ====================

// src/pages/ManageSubCategories.jsx
import React from 'react';
import SubCategoryTable from '../components/SubCategoryTable';
import AddSubCategoryModal from '../components/AddSubCategoryModal';

function ManageSubCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Sub-Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_sub_category_modal').showModal()}>Add Sub-Category</button>
      </div>
      <SubCategoryTable />
      <AddSubCategoryModal />
    </div>
  );
}

export default ManageSubCategories;


==================== C:\Code\recipe-app\client/src\pages\Register.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';

function Register() {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await fetch('http://localhost:8000/api/users/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Email: email, Password: password }),
    });

    if (response.ok) {
      await login(username, password);
    } else {
      alert('Registration failed');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="p-8 bg-white rounded shadow-md w-96">
        <h2 className="mb-4 text-2xl font-bold text-center">Register</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block mb-1">Username</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <button type="submit" className="w-full py-2 text-white bg-green-500 rounded hover:bg-green-600">
            Register
          </button>
        </form>
      </div>
    </div>
  );
}

export default Register;


==================== C:\Code\recipe-app\client/src\services\apiService.js ====================

// src/services/apiService.js
import cache from '../utils/cache';

const API_BASE_URL = 'http://localhost:8000/api';

const fetchData = async (endpoint, options = {}, useCache = true) => {
    const cacheKey = endpoint;

    if (useCache) {
        const cachedData = cache.get(cacheKey);
        if (cachedData) {
            return cachedData;
        }
    }

    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        headers: { 'Content-Type': 'application/json' },
        ...options,
    });
    if (!response.ok) {
        throw new Error('Failed to fetch data');
    }
    const data = await response.json();

    if (useCache) {
        cache.set(cacheKey, data);
    }

    return data;
};

// Categories
export const getCategories = () => fetchData('/ingredient-categories/');
export const addCategory = async (categoryName) => {
    const newCategory = await fetchData('/ingredient-categories/', {
        method: 'POST',
        body: JSON.stringify({ CategoryName: categoryName }),
    }, false);
    cache.invalidate('/ingredient-categories/');
    return newCategory;
};
export const updateCategory = async (categoryId, categoryName) => {
    const updatedCategory = await fetchData(`/ingredient-categories/${categoryId}`, {
        method: 'PUT',
        body: JSON.stringify({ CategoryName: categoryName }),
    }, false);
    cache.invalidate('/ingredient-categories/');
    return updatedCategory;
};
export const deleteCategory = async (categoryId) => {
    await fetchData(`/ingredient-categories/${categoryId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/ingredient-categories/');
};

// SubCategories
export const getSubCategories = () => fetchData('/ingredient-sub-categories/');
export const addSubCategory = async (subCategory) => {
    const newSubCategory = await fetchData('/ingredient-sub-categories/', {
        method: 'POST',
        body: JSON.stringify(subCategory),
    }, false);
    cache.invalidate('/ingredient-sub-categories/');
    return newSubCategory;
};
export const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    const updatedSubCategory = await fetchData(`/ingredient-sub-categories/${subCategoryId}`, {
        method: 'PUT',
        body: JSON.stringify({ SubCategoryName: subCategoryName, CategoryID: categoryId }),
    }, false);
    cache.invalidate('/ingredient-sub-categories/');
    return updatedSubCategory;
};
export const deleteSubCategory = async (subCategoryId) => {
    await fetchData(`/ingredient-sub-categories/${subCategoryId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/ingredient-sub-categories/');
};

// Ingredients
export const getIngredients = () => fetchData('/ingredients/');
export const addIngredient = async (ingredient) => {
    const newIngredient = await fetchData('/ingredients/', {
        method: 'POST',
        body: JSON.stringify(ingredient),
    }, false);
    cache.invalidate('/ingredients/');
    return newIngredient;
};
export const updateIngredient = async (ingredientId, ingredient) => {
    const updatedIngredient = await fetchData(`/ingredients/${ingredientId}`, {
        method: 'PUT',
        body: JSON.stringify(ingredient),
    }, false);
    cache.invalidate('/ingredients/');
    return updatedIngredient;
};
export const deleteIngredient = async (ingredientId) => {
    await fetchData(`/ingredients/${ingredientId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/ingredients/');
};

// Authors
export const getAuthors = () => fetchData('/recipe-authors/');
export const addAuthor = async (authorName, authorImageURL) => {
    const newAuthor = await fetchData('/recipe-authors/', {
        method: 'POST',
        body: JSON.stringify({ AuthorName: authorName, AuthorImageURL: authorImageURL }),
    }, false);
    cache.invalidate('/recipe-authors/');
    return newAuthor;
};
export const updateAuthor = async (authorId, author) => {
    const updatedAuthor = await fetchData(`/recipe-authors/${authorId}`, {
        method: 'PUT',
        body: JSON.stringify(author),
    }, false);
    cache.invalidate('/recipe-authors/');
    return updatedAuthor;
};
export const deleteAuthor = async (authorId) => {
    await fetchData(`/recipe-authors/${authorId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/recipe-authors/');
};

// Recipe Books
export const getRecipeBooks = () => fetchData('/recipe-books/');
export const addRecipeBook = async (recipeBook) => {
    const newRecipeBook = await fetchData('/recipe-books/', {
        method: 'POST',
        body: JSON.stringify(recipeBook),
    }, false);
    cache.invalidate('/recipe-books/');
    return newRecipeBook;
};
export const updateRecipeBook = async (recipeBookId, recipeBook) => {
    const updatedRecipeBook = await fetchData(`/recipe-books/${recipeBookId}`, {
        method: 'PUT',
        body: JSON.stringify(recipeBook),
    }, false);
    cache.invalidate('/recipe-books/');
    return updatedRecipeBook;
};
export const deleteRecipeBook = async (recipeBookId) => {
    await fetchData(`/recipe-books/${recipeBookId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/recipe-books/');
};

// Recipes
export const getRecipes = () => fetchData('/recipes/');
export const addRecipe = async (recipe) => {
    const newRecipe = await fetchData('/recipes/', {
        method: 'POST',
        body: JSON.stringify(recipe),
    }, false);
    cache.invalidate('/recipes/');
    return newRecipe;
};
export const updateRecipe = async (recipeId, recipe) => {
    const updatedRecipe = await fetchData(`/recipes/${recipeId}`, {
        method: 'PUT',
        body: JSON.stringify(recipe),
    }, false);
    cache.invalidate('/recipes/');
    return updatedRecipe;
};
export const deleteRecipe = async (recipeId) => {
    await fetchData(`/recipes/${recipeId}`, {
        method: 'DELETE',
    }, false);
    cache.invalidate('/recipes/');
};

// Units
export const getUnits = () => fetchData('/units/');

// Recipe Ingredients
export const getRecipeIngredients = () => fetchData('/recipe-ingredients/');

export const addRecipeIngredient = async (recipeIngredient) => {
  const newRecipeIngredient = await fetchData('/recipe-ingredients/', {
    method: 'POST',
    body: JSON.stringify(recipeIngredient),
  }, false);
  cache.invalidate('/recipe-ingredients/');
  return newRecipeIngredient;
};

==================== C:\Code\recipe-app\client/src\utils\cache.js ====================

// src/utils/cache.js

class Cache {
    constructor() {
      this.cache = {};
    }
  
    set(key, data) {
      this.cache[key] = {
        data,
        timestamp: new Date().getTime(),
      };
    }
  
    get(key, expiryTime = 180000) { // default expiry time is 180 seconds
      const cachedItem = this.cache[key];
      if (cachedItem && (new Date().getTime() - cachedItem.timestamp < expiryTime)) {
        return cachedItem.data;
      }
      return null;
    }
  
    invalidate(key) {
      delete this.cache[key];
    }
  }
  
  const cache = new Cache();
  export default cache;
  

==================== C:\Code\recipe-app\create_db.py ====================

from sqlalchemy import create_engine, Column, Integer, String, Float, Text, ForeignKey, Date, Boolean, TIMESTAMP, CheckConstraint
from sqlalchemy.orm import relationship, sessionmaker, declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = 'Users'
    UserID = Column(Integer, primary_key=True, autoincrement=True)
    Username = Column(String, nullable=False, unique=True)
    PasswordHash = Column(String, nullable=False)
    Email = Column(String, nullable=False, unique=True)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class IngredientCategory(Base):
    __tablename__ = 'IngredientCategories'
    CategoryID = Column(Integer, primary_key=True, autoincrement=True)
    CategoryName = Column(String, nullable=False, unique=True)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class IngredientSubCategory(Base):
    __tablename__ = 'IngredientSubCategories'
    SubCategoryID = Column(Integer, primary_key=True, autoincrement=True)
    CategoryID = Column(Integer, ForeignKey('IngredientCategories.CategoryID'), nullable=False)
    SubCategoryName = Column(String, nullable=False)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class Unit(Base):
    __tablename__ = 'Units'
    UnitID = Column(Integer, primary_key=True, autoincrement=True)
    UnitName = Column(String, nullable=False, unique=True)
    Abbreviation = Column(String, nullable=False, unique=True)

class UnitConversion(Base):
    __tablename__ = 'UnitConversions'
    FromUnitID = Column(Integer, ForeignKey('Units.UnitID'), primary_key=True)
    ToUnitID = Column(Integer, ForeignKey('Units.UnitID'), primary_key=True)
    ConversionFactor = Column(Float, nullable=False)

class Ingredient(Base):
    __tablename__ = 'Ingredients'
    IngredientID = Column(Integer, primary_key=True, autoincrement=True)
    SubCategoryID = Column(Integer, ForeignKey('IngredientSubCategories.SubCategoryID'), nullable=False)
    IngredientName = Column(String, nullable=False)
    PurchaseUnitID = Column(Integer, ForeignKey('Units.UnitID'))
    PurchaseWeightVolume = Column(Float)
    PurchaseWeightUnitID = Column(Integer, ForeignKey('Units.UnitID'))
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class RecipeAuthor(Base):
    __tablename__ = 'RecipeAuthors'
    AuthorID = Column(Integer, primary_key=True, autoincrement=True)
    AuthorName = Column(String, nullable=False)
    AuthorImageURL = Column(String)

class RecipeBook(Base):
    __tablename__ = 'RecipeBooks'
    BookID = Column(Integer, primary_key=True, autoincrement=True)
    AuthorID = Column(Integer, ForeignKey('RecipeAuthors.AuthorID'), nullable=False)
    BookName = Column(String, nullable=False)
    CoverArtURL = Column(String)

class Recipe(Base):
    __tablename__ = 'Recipes'
    RecipeID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'))
    RecipeName = Column(String, nullable=False)
    AuthorID = Column(Integer, ForeignKey('RecipeAuthors.AuthorID'))
    BookID = Column(Integer, ForeignKey('RecipeBooks.BookID'))
    PageNumber = Column(Integer)
    OnlineURL = Column(String)
    CookTime = Column(Integer)
    Difficulty = Column(String)
    Type = Column(String)
    ImageURL = Column(String)
    Servings = Column(Integer)
    Cuisine = Column(String)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class RecipeStep(Base):
    __tablename__ = 'RecipeSteps'
    StepID = Column(Integer, primary_key=True, autoincrement=True)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    StepNumber = Column(Integer, nullable=False)
    Description = Column(Text, nullable=False)

class RecipeIngredientSection(Base):
    __tablename__ = 'RecipeIngredientSections'
    SectionID = Column(Integer, primary_key=True, autoincrement=True)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    SectionName = Column(String, nullable=False)

class RecipeIngredient(Base):
    __tablename__ = 'RecipeIngredients'
    RecipeIngredientID = Column(Integer, primary_key=True, autoincrement=True)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    IngredientID = Column(Integer, ForeignKey('Ingredients.IngredientID'), nullable=False)
    SectionID = Column(Integer, ForeignKey('RecipeIngredientSections.SectionID'))
    Quantity = Column(Float)
    UnitID = Column(Integer, ForeignKey('Units.UnitID'))

class MealPlan(Base):
    __tablename__ = 'MealPlans'
    MealPlanID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'), nullable=False)
    PlanName = Column(String)
    StartDate = Column(Date)
    EndDate = Column(Date)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class MealPlanRecipe(Base):
    __tablename__ = 'MealPlanRecipes'
    MealPlanRecipeID = Column(Integer, primary_key=True, autoincrement=True)
    MealPlanID = Column(Integer, ForeignKey('MealPlans.MealPlanID'), nullable=False)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    MealType = Column(String)
    Date = Column(Date, nullable=False)

class ShoppingList(Base):
    __tablename__ = 'ShoppingLists'
    ShoppingListID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'), nullable=False)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    UpdatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class ShoppingListIngredient(Base):
    __tablename__ = 'ShoppingListIngredients'
    ShoppingListIngredientID = Column(Integer, primary_key=True, autoincrement=True)
    ShoppingListID = Column(Integer, ForeignKey('ShoppingLists.ShoppingListID'), nullable=False)
    MealPlanRecipeID = Column(Integer, ForeignKey('MealPlanRecipes.MealPlanRecipeID'))
    IngredientID = Column(Integer, ForeignKey('Ingredients.IngredientID'), nullable=False)
    Quantity = Column(Float)
    UnitID = Column(Integer, ForeignKey('Units.UnitID'))
    IsManual = Column(Boolean, default=False)
    AlreadyHave = Column(Boolean, default=False)
    Purchased = Column(Boolean, default=False)

class Tag(Base):
    __tablename__ = 'Tags'
    TagID = Column(Integer, primary_key=True, autoincrement=True)
    TagName = Column(String, nullable=False, unique=True)

class RecipeTag(Base):
    __tablename__ = 'RecipeTags'
    RecipeTagID = Column(Integer, primary_key=True, autoincrement=True)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    TagID = Column(Integer, ForeignKey('Tags.TagID'), nullable=False)

class UserFavorite(Base):
    __tablename__ = 'UserFavorites'
    FavoriteID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'), nullable=False)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

class RecipeReview(Base):
    __tablename__ = 'RecipeReviews'
    ReviewID = Column(Integer, primary_key=True, autoincrement=True)
    UserID = Column(Integer, ForeignKey('Users.UserID'), nullable=False)
    RecipeID = Column(Integer, ForeignKey('Recipes.RecipeID'), nullable=False)
    Rating = Column(Float, nullable=False)
    ReviewText = Column(Text)
    CreatedAt = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

    __table_args__ = (
        CheckConstraint('Rating >= 0.5 AND Rating <= 5', name='check_rating_range'),
    )

# Define your database URI (in this case, a SQLite database)
engine = create_engine('sqlite:///mydatabase2.db')

# Create all tables
Base.metadata.create_all(engine)

# Optional: Create a session to interact with the database
Session = sessionmaker(bind=engine)
session = Session()


==================== C:\Code\recipe-app\frontend.py ====================

import os
import re

BASE_PATH = 'client/src'

def list_files_and_dirs(path):
    """List all files and directories in the given path."""
    items = os.listdir(path)
    files = [item for item in items if os.path.isfile(os.path.join(path, item))]
    dirs = [item for item in items if os.path.isdir(os.path.join(path, item))]
    return files, dirs

def display_menu(files, dirs):
    """Display a menu of files and directories."""
    for i, dir_name in enumerate(dirs):
        print(f"{i + 1}. [DIR] {dir_name}")
    for i, file_name in enumerate(files):
        print(f"{i + 1 + len(dirs)}. {file_name}")

def get_choice(files, dirs):
    """Get the user's choice from the menu."""
    while True:
        try:
            choice = int(input("\nEnter the number of your choice: ")) - 1
            if 0 <= choice < len(dirs):
                return 'DIR', dirs[choice]
            elif len(dirs) <= choice < len(files) + len(dirs):
                return 'FILE', files[choice - len(dirs)]
            else:
                print("Invalid choice. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def navigate_to_file():
    """Navigate through directories to select a file."""
    current_path = BASE_PATH

    while True:
        print(f"\nCurrent path: {current_path}")
        files, dirs = list_files_and_dirs(current_path)
        display_menu(files, dirs)

        choice_type, choice_name = get_choice(files, dirs)

        if choice_type == 'DIR':
            current_path = os.path.join(current_path, choice_name)
        elif choice_type == 'FILE':
            return os.path.join(current_path, choice_name)

def get_imports(file_path):
    """Extract the import statements from a file and return the paths of the imported files."""
    with open(file_path, 'r') as file:
        content = file.read()

    imports = re.findall(r"import\s.*\sfrom\s*['\"](.*)['\"]", content)
    return imports

def resolve_import_path(import_path, base_path):
    """Resolve the absolute path of an import statement."""
    if import_path.startswith('.'):
        return os.path.normpath(os.path.join(base_path, import_path + '.jsx'))  # Assuming .jsx files, you might need to adjust this
    else:
        # Assuming all non-relative imports are from 'client/src'
        return os.path.normpath(os.path.join(BASE_PATH, import_path + '.jsx'))

def collate_file(file_path, visited, base_path, output):
    """Recursively collate the contents of the file and its imports."""
    if file_path in visited:
        return

    visited.add(file_path)

    with open(file_path, 'r') as file:
        content = file.read()
        output.write(f"\n\n==================== {file_path} ====================\n\n")
        output.write(content)
    
    imports = get_imports(file_path)
    for imp in imports:
        import_path = resolve_import_path(imp, base_path)
        if os.path.exists(import_path):
            collate_file(import_path, visited, os.path.dirname(import_path), output)
        else:
            print(f"Warning: Import {imp} not found at {import_path}")

def main():
    output_file = 'collated_output.txt'
    visited = set()

    start_file_path = navigate_to_file()

    if not os.path.exists(start_file_path):
        print(f"Error: {start_file_path} does not exist.")
        return

    with open(output_file, 'w') as output:
        collate_file(start_file_path, visited, os.path.dirname(start_file_path), output)

    print(f"Collation complete. See {output_file}")

if __name__ == "__main__":
    main()


==================== C:\Code\recipe-app\mydatabase2 - Copy.db ====================

SQLite format 3   @     '                                                               ' .n¹   û    û
+7ú
 Õ:
{		yÊf)Ûø                                                                                                                                                                                                                                                                                                                                         6##3tableIngredientsIngredientsCREATE TABLE "Ingredients" (
	"IngredientID" INTEGER NOT NULL, 
	"SubCategoryID" INTEGER NOT NULL, 
	"IngredientName" VARCHAR NOT NULL, 
	"PurchaseUnitID" INTEGER, 
	"PurchaseWeightVolume" FLOAT, 
	"PurchaseWeightUnitID" INTEGER, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("IngredientID"), 
	FOREIGN KEY("SubCategoryID") REFERENCES "IngredientSubCategories" ("SubCategoryID"), 
	FOREIGN KEY("PurchaseUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("PurchaseWeightUnitID") REFERENCES "Units" ("UnitID")
)''ctableShoppingListsShoppingListsCREATE TABLE "ShoppingLists" (
	"ShoppingListID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("ShoppingListID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
):CtableMealPlansMealPlansCREATE TABLE "MealPlans" (
	"MealPlanID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"PlanName" VARCHAR, 
	"StartDate" DATE, 
	"EndDate" DATE, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("MealPlanID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
)##gtableRecipeBooksRecipeBooksCREATE TABLE "RecipeBooks" (
	"BookID" INTEGER NOT NULL, 
	"AuthorID" INTEGER NOT NULL, 
	"BookName" VARCHAR NOT NULL, 
	"CoverArtURL" VARCHAR, 
	PRIMARY KEY ("BookID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID")
)N
++StableUnitConversionsUnitConversionsCREATE TABLE "UnitConversions" (
	"FromUnitID" INTEGER NOT NULL, 
	"ToUnitID" INTEGER NOT NULL, 
	"ConversionFactor" FLOAT NOT NULL, 
	PRIMARY KEY ("FromUnitID", "ToUnitID"), 
	FOREIGN KEY("FromUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("ToUnitID") REFERENCES "Units" ("UnitID")
)=Q+ indexsqlite_autoindex_UnitConversions_1UnitConversionso;;utableIngredientSubCategoriesIngredientSubCategories
CREATE TABLE "IngredientSubCategories" (
	"SubCategoryID" INTEGER NOT NULL, 
	"CategoryID" INTEGER NOT NULL, 
	"SubCategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("SubCategoryID"), 
	FOREIGN KEY("CategoryID") REFERENCES "IngredientCategories" ("CategoryID")
)
	tableTagsTagsCREATE TABLE "Tags" (
	"TagID" INTEGER NOT NULL, 
	"TagName" VARCHAR NOT NULL, 
	PRIMARY KEY ("TagID"), 
	UNIQUE ("TagName")
)'; indexsqlite_autoindex_Tags_1Tags=	''9tableRecipeAuthorsRecipeAuthors
CREATE TABLE "RecipeAuthors" (
	"AuthorID" INTEGER NOT NULL, 
	"AuthorName" VARCHAR NOT NULL, 
	"AuthorImageURL" VARCHAR, 
	PRIMARY KEY ("AuthorID")
)XtableUnitsUnitsCREATE TABLE "Units" (
	"UnitID" INTEGER NOT NULL, 
	"UnitName" VARCHAR NOT NULL, 
	"Abbreviation" VARCHAR NOT NULL, 
	PRIMARY KEY ("UnitID"), 
	UNIQUE ("UnitName"), 
	UNIQUE ("Abbreviation")
))= indexsqlite_autoindex_Units_2Units	)= indexsqlite_autoindex_Units_1Units	555tableIngredientCategoriesIngredientCategoriesCREATE TABLE "IngredientCategories" (
	"CategoryID" INTEGER NOT NULL, 
	"CategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("CategoryID"), 
	UNIQUE ("CategoryName")
)G[5 indexsqlite_autoindex_IngredientCategories_1IngredientCategoriestableUsersUsersCREATE TABLE "Users" (
	"UserID" INTEGER NOT NULL, 
	"Username" VARCHAR NOT NULL, 
	"PasswordHash" VARCHAR NOT NULL, 
	"Email" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("UserID"), 
	UNIQUE ("Username"), 
	UNIQUE ("Email")
))= indexsqlite_autoindex_Users_2Users)= indexsqlite_autoindex_Users_1Users      
   
Ö ©s
Ö                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       #;AAuniqueuser5$2b$12$lNeLnAWfpicHRFB7bvU.heTGqViRKbp3NGvXATXilNM2U3mJ8UJiWuniqueuser5@example.com2024-06-17 11:40:05.0389152024-06-17 11:40:05.038915 #;AAuniqueuser4$2b$12$nGEFLwgtQuvfUwKEoc3hq.D5MmOHUXC0RhRoJmxLZ3FVHYrv9KW9quniqueuser4@example.com2024-06-17 11:38:12.0036062024-06-17 11:38:12.003606 7AAtestuser2$2b$12$cftdrhDGVJIAfS8KLdFQEOdhIpsBUfu6VUMFqf7N5g4iVtYRrwvnqtestuser3@example.com2024-06-17 11:33:43.1961722024-06-17 11:33:43.196172U %533testuserpasswordhashtestuser@example.com2024-06-15 18:14:332024-06-15 18:14:33
   Æ ôæÖÆ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      #uniqueuser5#uniqueuser4
testuser2	testuser
    Îè²                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ;uniqueuser5@example.com;uniqueuser4@example.com7testuser3@example.com5	testuser@example.com
    É                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          1 33Fruits2024-06-15 18:14:332024-06-15 18:14:335 !33Vegetables2024-06-15 18:14:332024-06-15 18:14:33
   ç çò                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           
Fruits
!	Vegetables
   Ç ðåÙÇ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        !MillilitermL
 LiterL	 Gramg Kilogramkg
   Ò ëôáÒ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  !Milliliter	LiterGram	Kilogram
   ç îôúç                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       mLLg	kg
   @ Ô¤n@                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                , KBob Brownhttp://example.com/bobbrown.jpg4 'SAlice Johnsonhttp://example.com/alicejohnson.jpg. !MJane Smithhttp://example.com/janesmith.jpg* IJohn Doehttp://example.com/johndoe.jpg
   æ öæ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #Gluten-Free Vegan
   ç ç÷                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           #Gluten-Free	Vegan
   T ÆT                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      3 33Citrus2024-06-15 18:14:332024-06-15 18:14:33; 	+33Root Vegetables2024-06-15 18:14:332024-06-15 18:14:338 	%33Leafy Greens2024-06-15 18:14:332024-06-15 18:14:33
   í ÷í                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 è	è
   ò úò                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      		
    ÄP                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 = -[Gourmet Delightshttp://example.com/gourmet_delights.jpg= -[Family Favoriteshttp://example.com/family_favorites.jpg3 #QQuick Mealshttp://example.com/quick_meals.jpg: 	+YHealthy Cookinghttp://example.com/healthy_cooking.jpg
   ± ±                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       M 	#!!33Weekly Plan2024-06-102024-06-172024-06-15 18:14:332024-06-15 18:14:33
   Ó Ó                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         + 	332024-06-15 18:14:332024-06-15 18:14:33
   ï ÈOÙ[
Ý

U
 ß i+ïQ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      O			AABroccoli?ø      2024-06-15 18:38:12.5317182024-06-15 18:38:12.S	 	)		AAGreen Broccoli?ø      2024-06-15 18:36:48.4101192024-06-15 18:43:30.643991:	 			33Egg?©2024-06-15 18:18:232024-06-15 18:18:23<	 			33Flour?à      2024-06-15 18:18:232024-06-15 18:18:235	 		33Milk2024-06-15 18:18:232024-06-15 18:18:23=	 			33Cheese?É2024-06-15 18:18:232024-06-15 18:18:23?
	 			33Tortilla?Ó3333332024-06-15 18:18:232024-06-15 18:18:233	 				33Beef2024-06-15 18:18:232024-06-15 18:18:23B	 	33Soy Sauce?É2024-06-15 18:18:232024-06-15 18:18:23B
	 	#		33Bell Pepper?à      2024-06-15 18:18:232024-06-15 18:18:23=		 	)			33Chicken Breast2024-06-15 18:18:232024-06-15 18:18:23=	 			33Carrot?Ó3333332024-06-15 18:18:232024-06-15 18:18:23=	 			33Tomato?à      2024-06-15 18:18:232024-06-15 18:18:23=	 			33Garlic?©2024-06-15 18:18:232024-06-15 18:18:23<	 			33Onion?à      2024-06-15 18:18:232024-06-15 18:18:236	 				33Lentils2024-06-15 18:18:232024-06-15 18:18:237	 		33Orange2024-06-15 18:14:332024-06-15 18:14:33>	 		33Carrot?à      2024-06-15 18:14:332024-06-15 18:14:336	 				33Spinach2024-06-15 18:14:332024-06-15 18:14:33
   
½ «5®2
½                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      2 	3O#U3AUpdated Recipe Namehttp://example.com/updated_recipe#MediumMain Courseht« W	'     33Carrot Soup 1EasySoupAmerican2024-06-15 18:14:332024-06-15 18:14:33s 	C 33Pancakeshttp://example.com/pancakesEasyBreakfastAmerican2024-06-15 18:18:232024-06-15 18:18:23z 	!G# 33Beef Tacos#http://example.com/beef_tacos(MediumMain CourseMexican2024-06-15 18:18:232024-06-15 18:18:23 	-S# 33Chicken Stir Fryhttp://example.com/chicken_stir_fryEasyMain CourseChinese2024-06-15 18:18:232024-06-15 18:18:23t 	#I 33Lentil Soup
http://example.com/lentil_soup-MediumSoupIndian2024-06-15 18:18:232024-06-15 18:18:23S 	#     33Carrot SoupEasySoupAmerican2024-06-15 18:14:332024-06-15 18:14:33
ø Û Í¢
+7ú
 Õ:
{		yÊf)Ûø                                                                                                                                                                                                                                                                                                                                                                                                                                             6##3tableIngredientsIngredientsCREATE TABLE "Ingredients" (
	"IngredientID" INTEGER NOT NULL, 
	"SubCategoryID" INTEGER NOT NULL, 
	"IngredientName" VARCHAR NOT NULL, 
	"PurchaseUnitID" INTEGER, 
	"PurchaseWeightVolume" FLOAT, 
	"PurchaseWeightUnitID" INTEGER, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("IngredientID"), 
	FOREIGN KEY("SubCategoryID") REFERENCES "IngredientSubCategories" ("SubCategoryID"), 
	FOREIGN KEY("PurchaseUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("PurchaseWeightUnitID") REFERENCES "Units" ("UnitID")
)''ctableShoppingListsShoppingListsCREATE TABLE "ShoppingLists" (
	"ShoppingListID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("ShoppingListID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
):CtableMealPlansMealPlansCREATE TABLE "MealPlans" (
	"MealPlanID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"PlanName" VARCHAR, 
	"StartDate" DATE, 
	"EndDate" DATE, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("MealPlanID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
)##gtableRecipeBooksRecipeBooksCREATE TABLE "RecipeBooks" (
	"BookID" INTEGER NOT NULL, 
	"AuthorID" INTEGER NOT NULL, 
	"BookName" VARCHAR NOT NULL, 
	"CoverArtURL" VARCHAR, 
	PRIMARY KEY ("BookID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID")
)N
++StableUnitConversionsUnitConversionsCREATE TABLE "UnitConversions" (
	"FromUnitID" INTEGER NOT NULL, 
	"ToUnitID" INTEGER NOT NULL, 
	"ConversionFactor" FLOAT NOT NULL, 
	PRIMARY KEY ("FromUnitID", "ToUnitID"), 
	FOREIGN KEY("FromUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("ToUnitID") REFERENCES "Units" ("UnitID")
)=Q+ indexsqlite_autoindex_UnitConversions_1UnitConversionso;;utableIngredientSubCategoriesIngredientSubCategories
CREATE TABLE "IngredientSubCategories" (
	"SubCategoryID" INTEGER NOT NULL, 
	"CategoryID" INTEGER NOT NULL, 
	"SubCategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("SubCategoryID"), 
	FOREIGN KEY("CategoryID") REFERENCES "IngredientCategories" ("CategoryID")
)
	tableTagsTagsCREATE TABLE "Tags" (
	"TagID" INTEGER NOT NULL, 
	"TagName" VARCHAR NOT NULL, 
	PRIMARY KEY ("TagID"), 
	UNIQUE ("TagName")
)'; indexsqlite_autoindex_Tags_1Tags=	''9tableRecipeAuthorsRecipeAuthors
CREATE TABLE "RecipeAuthors" (
	"AuthorID" INTEGER NOT NULL, 
	"AuthorName" VARCHAR NOT NULL, 
	"AuthorImageURL" VARCHAR, 
	PRIMARY KEY ("AuthorID")
)XtableUnitsUnitsCREATE TABLE "Units" (
	"UnitID" INTEGER NOT NULL, 
	"UnitName" VARCHAR NOT NULL, 
	"Abbreviation" VARCHAR NOT NULL, 
	PRIMARY KEY ("UnitID"), 
	UNIQUE ("UnitName"), 
	UNIQUE ("Abbreviation")
))= indexsqlite_autoindex_Units_2Units	)= indexsqlite_autoindex_Units_1Units	555tableIngredientCategoriesIngredientCategoriesCREATE TABLE "IngredientCategories" (
	"CategoryID" INTEGER NOT NULL, 
	"CategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("CategoryID"), 
	UNIQUE ("CategoryName")
)G[5 indexsqlite_autoindex_IngredientCategories_1IngredientCategoriestableUsersUsersCREATE TABLE "Users" (
	"UserID" INTEGER NOT NULL, 
	"Username" VARCHAR NOT NULL, 
	"PasswordHash" VARCHAR NOT NULL, 
	"Email" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("UserID"), 
	UNIQUE ("Username"), 
	UNIQUE ("Email")
))= indexsqlite_autoindex_Users_2Users)= indexsqlite_autoindex_Users_1Users       
   	 ® 	£jã·g= ®                                                                                                                                                    6;;tableShoppingListIngredientsShoppingListIngredientsCREATE TABLE "ShoppingListIngredients" (
	"ShoppingListIngredientID" INTEGER NOT NULL, 
	"ShoppingListID" INTEGER NOT NULL, 
	"MealPlanRecipeID" INTEGER, 
	"IngredientID" INTEGER NOT NULL, 
	"Quantity" FLOAT, 
	"UnitID" INTEGER, 
	"IsManual" BOOLEAN, 
	"AlreadyHave" BOOLEAN, 
	"Purchased" BOOLEAN, 
	PRIMARY KEY ("ShoppingListIngredientID"), 
	FOREIGN KEY("ShoppingListID") REFERENCES "ShoppingLists" ("ShoppingListID"), 
	FOREIGN KEY("MealPlanRecipeID") REFERENCES "MealPlanRecipes" ("MealPlanRecipeID"), 
	FOREIGN KEY("IngredientID") REFERENCES "Ingredients" ("IngredientID"), 
	FOREIGN KEY("UnitID") REFERENCES "Units" ("UnitID")
)M''YtableUserFavoritesUserFavoritesCREATE TABLE "UserFavorites" (
	"FavoriteID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	PRIMARY KEY ("FavoriteID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
))!!tableRecipeTagsRecipeTagsCREATE TABLE "RecipeTags" (
	"RecipeTagID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"TagID" INTEGER NOT NULL, 
	PRIMARY KEY ("RecipeTagID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID"), 
	FOREIGN KEY("TagID") REFERENCES "Tags" ("TagID")
)++?tableMealPlanRecipesMealPlanRecipesCREATE TABLE "MealPlanRecipes" (
	"MealPlanRecipeID" INTEGER NOT NULL, 
	"MealPlanID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"MealType" VARCHAR, 
	"Date" DATE NOT NULL, 
	PRIMARY KEY ("MealPlanRecipeID"), 
	FOREIGN KEY("MealPlanID") REFERENCES "MealPlans" ("MealPlanID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)!==UtableRecipeIngredientSectionsRecipeIngredientSectionsCREATE TABLE "RecipeIngredientSections" (
	"SectionID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"SectionName" VARCHAR NOT NULL, 
	PRIMARY KEY ("SectionID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)##ktableRecipeStepsRecipeStepsCREATE TABLE "RecipeSteps" (
	"StepID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"StepNumber" INTEGER NOT NULL, 
	"Description" TEXT NOT NULL, 
	PRIMARY KEY ("StepID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)f#tableRecipesRecipesCREATE TABLE "Recipes" (
	"RecipeID" INTEGER NOT NULL, 
	"UserID" INTEGER, 
	"RecipeName" VARCHAR NOT NULL, 
	"AuthorID" INTEGER, 
	"BookID" INTEGER, 
	"PageNumber" INTEGER, 
	"OnlineURL" VARCHAR, 
	"CookTime" INTEGER, 
	"Difficulty" VARCHAR, 
	"Type" VARCHAR, 
	"ImageURL" VARCHAR, 
	"Servings" INTEGER, 
	"Cuisine" VARCHAR, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("RecipeID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID"), 
	FOREIGN KEY("BookID") REFERENCES "RecipeBooks" ("BookID")
).//tableRecipeIngredientsRecipeIngredientsCREATE TABLE "RecipeIngredients" (
	"RecipeIngredientID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"IngredientID" INTEGER NOT NULL, 
	"SectionID" INTEGER, 
	"Quantity" FLOAT, 
	"UnitID" INTEGER, 
	PRIMARY KEY ("RecipeIngredientID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID"), 
	FOREIGN KEY("IngredientID") REFERENCES "Ingredients" ("IngredientID"), 
	FOREIGN KEY("SectionID") REFERENCES "RecipeIngredientSections" ("SectionID"), 
	FOREIGN KEY("UnitID") REFERENCES "Units" ("UnitID")
)@''?tableRecipeReviewsRecipeReviewsCREATE TABLE "RecipeReviews" (
	"ReviewID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"Rating" FLOAT NOT NULL, 
	"ReviewText" TEXT, 
	"CreatedAt" TIMESTAMP, 
	PRIMARY KEY ("ReviewID"), 
	CONSTRAINT check_rating_range CHECK (Rating >= 0.5 AND Rating <= 5), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)
   +
¾ ßºa<üÒ«sS9
×
´

y
T
;

åÉ­rS2ðÐ¯uS2
ö
Ü
¾                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                + 7
Garnish with berries.* /	Serve with syrup.) =Cook until golden brown.( 1Flip the pancakes.' =Cook until bubbles form. & ?Pour batter onto the pan.% 7Heat a non-stick pan.$ 3Whisk until smooth.# =Add the wet ingredients." 	=Mix the dry ingredients.! 7
Serve with guacamole."  C	Enjoy with a side of beans. =Squeeze lime over tacos. 9Garnish with cilantro. /Serve with salsa. =Add cheese and toppings. 3Assemble the tacos. 3Warm the tortillas. 5Chop the vegetables. 	)Cook the beef.! A
Garnish with sesame seeds. -	Serve with rice.# ESeason with salt and pepper. ;Stir fry for 5 minutes. 1Pour in soy sauce.! AAdd vegetables to the pan.( OAdd chicken and cook until brown. 1Heat oil in a pan. 5Chop the vegetables. 	1Slice the chicken.
 ;
Garnish with coriander. !	Serve hot.# ESeason with salt and pepper.%
 ISimmer for another 15 minutes.(	 OAdd chopped tomatoes and carrots. 5Cook for 20 minutes.! AAdd the lentils and water.# ESaute the onions and garlic." CChop the onions and garlic. 	1Rinse the lentils. 	3Blend until smooth.# 	GBoil in water for 20 minutes. 		APeel and chop the carrots.
   ê ê                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 	-Main Ingredients
    éÐ¸                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  	!Breakfast2024-06-15 	!Dinner2024-06-14 	!Lunch2024-06-13 	!Dinner2024-06-12 		!Lunch2024-06-11
   ú ú                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 		
   æ æ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             		32024-06-15 18:14:33
   Á Á                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       = 		C3@      Delicious and easy to make!2024-06-15 18:14:33
   )
è óåØË½¯¢{n`SF9,øìÞÑÄ·ªvj\OB5(
ô
è                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
) 		2( 	2' 	d& 	d% 	d$ 	
# 	d" 	2! 	d  	 È
 		2 	d 	d 	
d 	
 	d 	d 	2 	
 	ô
 		2 	2 	d 	d 	d 	2 	
d 	

 	d 		ô 	
d
 		 È
	 		2 	d 	d 	  	 È 	
 	d 	 È 	  È
   ª ðßÏ¿®|l\L;+ûëÚÊºª                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
 	d
 	2
 	d
 	 È
 	

 	d
 	d
 	2
 	

 	ô
 	2

 	
d	
 	

 	d
 		ô
 	 
 	 È
 	

 	d
 	 È
 		 È

==================== C:\Code\recipe-app\mydatabase2.db ====================

SQLite format 3   @    <                                                              < .fê   û    û
ã
U[0
	Ö
ldQÿoÀ6
Û                                                                                                                                                                  6##3tableIngredientsIngredientsCREATE TABLE "Ingredients" (
	"IngredientID" INTEGER NOT NULL, 
	"SubCategoryID" INTEGER NOT NULL, 
	"IngredientName" VARCHAR NOT NULL, 
	"PurchaseUnitID" INTEGER, 
	"PurchaseWeightVolume" FLOAT, 
	"PurchaseWeightUnitID" INTEGER, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("IngredientID"), 
	FOREIGN KEY("SubCategoryID") REFERENCES "IngredientSubCategories" ("SubCategoryID"), 
	FOREIGN KEY("PurchaseUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("PurchaseWeightUnitID") REFERENCES "Units" ("UnitID")
)N++StableUnitConversionsUnitConversionsCREATE TABLE "UnitConversions" (
	"FromUnitID" INTEGER NOT NULL, 
	"ToUnitID" INTEGER NOT NULL, 
	"ConversionFactor" FLOAT NOT NULL, 
	PRIMARY KEY ("FromUnitID", "ToUnitID"), 
	FOREIGN KEY("FromUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("ToUnitID") REFERENCES "Units" ("UnitID")
)=Q+ indexsqlite_autoindex_UnitConversions_1UnitConversions''ctableShoppingListsShoppingListsCREATE TABLE "ShoppingLists" (
	"ShoppingListID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("ShoppingListID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
):CtableMealPlansMealPlansCREATE TABLE "MealPlans" (
	"MealPlanID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"PlanName" VARCHAR, 
	"StartDate" DATE, 
	"EndDate" DATE, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("MealPlanID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
)##gtableRecipeBooksRecipeBooksCREATE TABLE "RecipeBooks" (
	"BookID" INTEGER NOT NULL, 
	"AuthorID" INTEGER NOT NULL, 
	"BookName" VARCHAR NOT NULL, 
	"CoverArtURL" VARCHAR, 
	PRIMARY KEY ("BookID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID")
)o
;;utableIngredientSubCategoriesIngredientSubCategoriesCREATE TABLE "IngredientSubCategories" (
	"SubCategoryID" INTEGER NOT NULL, 
	"CategoryID" INTEGER NOT NULL, 
	"SubCategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("SubCategoryID"), 
	FOREIGN KEY("CategoryID") REFERENCES "IngredientCategories" ("CategoryID")
)	tableTagsTagsCREATE TABLE "Tags" (
	"TagID" INTEGER NOT NULL, 
	"TagName" VARCHAR NOT NULL, 
	PRIMARY KEY ("TagID"), 
	UNIQUE ("TagName")
)'; indexsqlite_autoindex_Tags_1Tags
=
''9tableRecipeAuthorsRecipeAuthorsCREATE TABLE "RecipeAuthors" (
	"AuthorID" INTEGER NOT NULL, 
	"AuthorName" VARCHAR NOT NULL, 
	"AuthorImageURL" VARCHAR, 
	PRIMARY KEY ("AuthorID")
)XtableUnitsUnitsCREATE TABLE "Units" (
	"UnitID" INTEGER NOT NULL, 
	"UnitName" VARCHAR NOT NULL, 
	"Abbreviation" VARCHAR NOT NULL, 
	PRIMARY KEY ("UnitID"), 
	UNIQUE ("UnitName"), 
	UNIQUE ("Abbreviation")
))	= indexsqlite_autoindex_Units_2Units
)= indexsqlite_autoindex_Units_1Units		555tableIngredientCategoriesIngredientCategoriesCREATE TABLE "IngredientCategories" (
	"CategoryID" INTEGER NOT NULL, 
	"CategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("CategoryID"), 
	UNIQUE ("CategoryName")
)G[5 indexsqlite_autoindex_IngredientCategories_1IngredientCategories       b/indexix_Users_UsernameUsersCREATE UNIQUE INDEX "ix_Users_Username" ON "Users" ("Username")T+uindexix_Users_UserIDUsersCREATE INDEX "ix_Users_UserID" ON "Users" ("UserID")X)indexix_Users_EmailUsersCREATE UNIQUE INDEX "ix_Users_Email" ON "Users" ("Email")ktableUsersUsersCREATE TABLE "Users" (
	"UserID" INTEGER NOT NULL, 
	"Username" VARCHAR NOT NULL, 
	"PasswordHash" VARCHAR NOT NULL, 
	"Email" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP NOT NULL, 
	"UpdatedAt" TIMESTAMP NOT NULL, 
	PRIMARY KEY ("UserI   
   
/ cj
Ó
743
/                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        #Q=AAuniqueuse2rscrypt:32768:8:1$82ZqKERCL4HIE4fs$da3b402bb11282642875226a14dac3103bf1a1372f65d1fa38dfb84300ee32ec6cdec81ae8e9525ad88f3de6371137fd21eb3dda093e76e8369fe5e7629b01ebuniqueuser22@example.com2024-06-26 17:34:09.7328852024-06-26 17:34:09.732885~ !Q9AAuniqueuserscrypt:32768:8:1$QouazhGh6I7jJrW9$8f0564382d7aa8a58a3c5c531c283575c97355eaada016491417c031680e4e0469cadd4951ad2241e2eea58271e3537483b8a7fc1da224e0882dd262e298d92funiqueuser@example.com2024-06-26 00:00:00.0000002024-06-26 00:00:00.000000  #Q;AAanotheruserscrypt:32768:8:1$l7Sgtxp6ZbNVEGEl$e372f532dc397d2ea16fa2d5850b945870b87bceaee20a9850df85b4d8a45aadb8ed191972b602e1d5eff110af643bc7a1ff534d679af7ed016b82f333685958anotheruser@example.com2024-06-26 00:00:00.0000002024-06-26 00:00:00.000000 CAAwarren$2b$12$RqI1lGpQQHXACvxLMNADHuS0as5lyn2rOFmRjdzYQCAl1OtRiJLmGwarrencoffey@googlemail.com2024-06-17 15:46:44.4549782024-06-17 15:46:44.454978 5AAtestuser$2b$12$MuMNqvqrCcYoOgHD7zAp3.UWlx5LOmyI9Btf3/yxJRfQ3S8hqrYw.testuser@example.com2024-06-17 15:22:24.5445602024-06-17 15:22:24.544560 5AAnewuser2$2b$12$QdbIT8Lam5crtKgAfIAZhu4wF9THV5w58rowxiMEJDaXbAnHTTGjCnewuser2@example.com2024-06-17 14:26:17.1787482024-06-17 14:26:17.178748` #3AAnewuserpassword123newuser@example.com2024-06-17 14:22:53.3912712024-06-17 14:22:53.391271 #;AAuniqueuser5$2b$12$cQeSnEd5COtni8E3BZTY5eaVVEgoJ8heZiXmqhkHJ1npT4zZ1Vq5muniqueuser5@example.com2024-06-17 11:40:54.8169422024-06-17 11:40:54.816942
   ' _´Í'åD{                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               =uniqueuser22@example.com9uniqueuser@example.com;anotheruser@example.comCwarrencoffey@googlemail.com5testuser@example.com5newuser2@example.com3newuser@example.com;	uniqueuser5@example.com
   Ò üöðêäÞØÒ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          		
    °åØË¡ñÀ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         #uniqueuse2r!uniqueuser#anotheruser
warrentestusernewuser2newuser#	uniqueuser5
¹ 	
x3òªd
Ù½

W                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           > AATest22024-06-17 19:27:45.2242172024-06-17 19:27:45.224217@	=
 AATest2024-06-20 12:23:42.6068152024-06-20 12:23:42.606815B AAHousehold2024-06-17 14:58:21.8378052024-06-17 14:58:21.837805E %AAChilled Food2024-06-17 14:58:21.7533962024-06-17 14:58:21.753396D #AAFrozen Food2024-06-17 14:58:21.7078052024-06-17 14:58:21.707805F 'AAFood Cupboard2024-06-17 14:58:21.6708882024-06-17 14:58:21.670888? AADrinks2024-06-17 14:58:21.6274662024-06-17 14:58:21.627466C !AAFresh Food2024-06-17 14:58:21.5865132024-06-17 14:58:21.586513? AABakery2024-06-17 14:58:21.5357592024-06-17 14:58:21.535759   @	 AAAlcohol2024-06-20 11:25:16.9946082024-06-20 11:25:16.9946084
ð 	 ôåË¹Ö©t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        	Test2Test

Household%Chilled Food#Frozen Food'Food Cupboard
Drinks!Fresh Food
Bakery   Alcohol	
   Ø óèØ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           Kilogramkg	 Gramg Piecepc
   á îá÷                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   KilogramGram	Piece
   í ôíú                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               kgg	pc
   ³ îÜÆ³¤                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
Ruth
 
warrennnn '
Warren Coffey -
The Hairy Bikers %
Jamie Oliver % Pinch of Nom
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

 x ¾v4åT
Å

B¿x3ì¤\
Ì
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         A AAWoahhh2024-06-20 10:42:56.0744742024-06-20 10:42:56.074474F #AAWarren test2024-06-20 10:42:32.5470962024-06-20 10:42:32.547096F #AAWarren test2024-06-20 10:42:28.2960762024-06-20 10:42:28.296076F #AAWarren test2024-06-20 10:41:57.5976072024-06-20 10:41:57.597607F #AAWarren test2024-06-20 10:41:09.5820862024-06-20 10:41:09.582086E !AAcleaninggg2024-06-20 10:39:32.7306692024-06-20 10:39:32.730669E !AAcleaninggg2024-06-20 10:38:44.6812372024-06-20 10:38:44.6812E
 !AATestBakery2024-06-20 12:29:00.9217622024-06-20 12:29:00.921762@ AAPasta2024-06-18 13:54:43.1794962024-06-18 13:54:43.179496   AAAWine2024-06-17 15:07:40.9926192024-06-17 15:07:40.992619>
 AATea2024-06-17 15:07:40.9410742024-06-17 15:07:40.941074A	 AACoffee2024-06-17 15:07:40.8882622024-06-17 15:07:40.888262@ AAWater2024-06-17 15:07:40.7910132024-06-17 15:07:40.791013K -AAFresh Vegetables2024-06-17 15:07:40.7312842024-06-17 15:07:40.731284F #AAFresh Fruit2024-06-17 15:07:40.6916962024-06-17 15:07:40.691696G %AASweet Treats2024-06-17 15:07:40.6044782024-06-17 15:07:40.604478M 1AABreakfast Pastries2024-06-17 15:07:40.5530532024-06-17 15:07:40.553053@ AACakes2024-06-17 15:07:40.5093422024-06-17 15:07:40.509342F #AABread Rolls2024-06-17 15:07:40.4770762024-06-17 15:07:40.477076@ AABread2024-06-17 15:07:40.4299402024-06-17 15:07:40.429940
   Ä ìÕÄ®                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           !
Ruth's fud )
Warren's scran 
Easy food +
60 Minute Meals 	' Fast and easy
   ¥ ¥L÷                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         S 	!!AAnew2024-06-272024-07-062024-06-24 19:45:19.8794012024-06-24 19:45:19.879401W 	!!AACaravan2024-06-282024-06-302024-06-24 19:15:17.9979232024-06-24 19:15:17.997923Y 	!!AATest plan2024-06-242024-06-272024-06-24 19:13:44.9647852024-06-24 19:13:44.964785
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
 Ò ¶fÏ5
ì

X

p#ÚC
÷
¬
e
	Í	ÒÒÒÒÒÒ>>å                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               M	 	)	AANew York Bagel2024-06-20 08:10:57.9873752024-06-20 08:10:57.987375M	 	)	AC	 		AATest2024-06-20 10:11:42.0814882024-06-20 10:11:42.081488M	 	)	AANew York Bagel2024-06-20 08:07:35.5981062024-06-20 08:07:35.598106J	 AANew Test È2024-06-19 17:11:35.0900682024-06-19 17:11:35.090068½f	AATest222024-06-19 17:09:00.9344562024-06-19 17:09:00.934456B	 		AAPie2024-06-19 17:08:41.8414082024-06-19 17:08:41.841408B	 		AAPie2024-06-19 17:06:43.5075392024-06-19 17:06:43.507539D	 AAPie2024-06-19 17:06:30.8402082024-06-19 17:06:30.840208N	 )		AATestIngredientô2024-06-19 17:05:21.8808182024-06-19 17:05:21.880818G	 AAPenneô2024-06-18 13:55:00.0616542024-06-18 13:55:00.061654O	 )AA	Coffee sachets2024-06-18 13:44:18.0321872024-06-18 13:44:18.032187E	 			AACarrots2024-06-17 15:14:32.0359732024-06-17 15:14:32.035973E	 			AALettuce2024-06-17 15:14:32.0026602024-06-17 15:14:32.002660I	 #			AABlueberries2024-06-17 15:14:31.9695472024-06-17 15:14:31.969547J	 %			AAStrawberries2024-06-17 15:14:31.9026852024-06-17 15:14:31.902685J	 %			AAOrange Juice2024-06-17 15:14:31.8766642024-06-17 15:14:31.876664I	 #			AAApple Juice2024-06-17 15:14:31.8361712024-06-17 15:14:31.836171G	 			AA
Green Tea2024-06-17 15:14:31.7763472024-06-17 15:14:31.776347K
	 '			AA	Ground Coffee2024-06-17 15:14:31.7526132024-06-17 15:14:31.752613K	 '			AABottled Water2024-06-17 15:14:31.6753592024-06-17 15:14:31.675359   P-			AAMixed Vegetables2024-06-17 15:14:31.6363402024-06-17 15:14:31.636340I
	 #			AAFruit Salad2024-06-17 15:14:31.6139852024-06-17 15:14:31.613985E		 			AABrownie2024-06-17 15:14:31.5746812024-06-17 15:14:31.574681K	 '			AADanish Pastry2024-06-17 15:14:31.5360602024-06-17 15:14:31.536060G	 			AACroissant2024-06-17 15:14:31.4736442024-06-17 15:14:31.473644J	 %			AAVanilla Cake2024-06-17 15:14:31.4363922024-06-17 15:14:31.436392L	 )			AAChocolate Cake2024-06-17 15:14:31.3857272024-06-17 15:14:31.385727J	 %			AADinner Rolls2024-06-17 15:14:31.3540872024-06-17 15:14:31.354087I	 #			AABurger Buns2024-06-17 15:14:31.3128722024-06-17 15:14:31.312872N	 	/			AAWhole Grain Bread2024-06-17 15:14:31.2687022024-06-17 15:14:31.268702H	 	#			AAWhite Bread2024-06-17 15:14:31.2338302024-06-17 15:14:31.233830
      è                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  R  




AATest nowC"2024-06-26 17:45:03.69109220    	         Test

Û 6 ÷G
ã
U[0
	Ö
ldQÿ®o6
Û                                                                                                                                                                                                                                                                      6##3tableIngredientsIngredientsCREATE TABLE "Ingredients" (
	"IngredientID" INTEGER NOT NULL, 
	"SubCategoryID" INTEGER NOT NULL, 
	"IngredientName" VARCHAR NOT NULL, 
	"PurchaseUnitID" INTEGER, 
	"PurchaseWeightVolume" FLOAT, 
	"PurchaseWeightUnitID" INTEGER, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("IngredientID"), 
	FOREIGN KEY("SubCategoryID") REFERENCES "IngredientSubCategories" ("SubCategoryID"), 
	FOREIGN KEY("PurchaseUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("PurchaseWeightUnitID") REFERENCES "Units" ("UnitID")
)=Q+ indexsqlite_autoindex_UnitConversions_1UnitConversionsN++StableUnitConversionsUnitConversionsCREATE TABLE "UnitConversions" (
	"FromUnitID" INTEGER NOT NULL, 
	"ToUnitID" INTEGER NOT NULL, 
	"ConversionFactor" FLOAT NOT NULL, 
	PRIMARY KEY ("FromUnitID", "ToUnitID"), 
	FOREIGN KEY("FromUnitID") REFERENCES "Units" ("UnitID"), 
	FOREIGN KEY("ToUnitID") REFERENCES "Units" ("UnitID")
)''ctableShoppingListsShoppingListsCREATE TABLE "ShoppingLists" (
	"ShoppingListID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("ShoppingListID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
):CtableMealPlansMealPlansCREATE TABLE "MealPlans" (
	"MealPlanID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"PlanName" VARCHAR, 
	"StartDate" DATE, 
	"EndDate" DATE, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("MealPlanID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID")
)##gtableRecipeBooksRecipeBooksCREATE TABLE "RecipeBooks" (
	"BookID" INTEGER NOT NULL, 
	"AuthorID" INTEGER NOT NULL, 
	"BookName" VARCHAR NOT NULL, 
	"CoverArtURL" VARCHAR, 
	PRIMARY KEY ("BookID"), 
	FOREIGN KEY("AuthorID") REFERENCES "RecipeAuthors" ("AuthorID")
)o
;;utableIngredientSubCategoriesIngredientSubCategoriesCREATE TABLE "IngredientSubCategories" (
	"SubCategoryID" INTEGER NOT NULL, 
	"CategoryID" INTEGER NOT NULL, 
	"SubCategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("SubCategoryID"), 
	FOREIGN KEY("CategoryID") REFERENCES "IngredientCategories" ("CategoryID")
)	tableTagsTagsCREATE TABLE "Tags" (
	"TagID" INTEGER NOT NULL, 
	"TagName" VARCHAR NOT NULL, 
	PRIMARY KEY ("TagID"), 
	UNIQUE ("TagName")
)'; indexsqlite_autoindex_Tags_1Tags
=
''9tableRecipeAuthorsRecipeAuthorsCREATE TABLE "RecipeAuthors" (
	"AuthorID" INTEGER NOT NULL, 
	"AuthorName" VARCHAR NOT NULL, 
	"AuthorImageURL" VARCHAR, 
	PRIMARY KEY ("AuthorID")
)XtableUnitsUnitsCREATE TABLE "Units" (
	"UnitID" INTEGER NOT NULL, 
	"UnitName" VARCHAR NOT NULL, 
	"Abbreviation" VARCHAR NOT NULL, 
	PRIMARY KEY ("UnitID"), 
	UNIQUE ("UnitName"), 
	UNIQUE ("Abbreviation")
))	= indexsqlite_autoindex_Units_2Units
)= indexsqlite_autoindex_Units_1Units		555tableIngredientCategoriesIngredientCategoriesCREATE TABLE "IngredientCategories" (
	"CategoryID" INTEGER NOT NULL, 
	"CategoryName" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP, 
	"UpdatedAt" TIMESTAMP, 
	PRIMARY KEY ("CategoryID"), 
	UNIQUE ("CategoryName")
)G[5 indexsqlite_autoindex_IngredientCategories_1IngredientCategories       b/indexix_Users_UsernameUsersCREATE UNIQUE INDEX "ix_Users_Username" ON "Users" ("Username")T+uindexix_Users_UserIDUsersCREATE INDEX "ix_Users_UserID" ON "Users" ("UserID")X)indexix_Users_EmailUsersCREATE UNIQUE INDEX "ix_Users_Email" ON "Users" ("Email")ktableUsersUsersCREATE TABLE "Users" (
	"UserID" INTEGER NOT NULL, 
	"Username" VARCHAR NOT NULL, 
	"PasswordHash" VARCHAR NOT NULL, 
	"Email" VARCHAR NOT NULL, 
	"CreatedAt" TIMESTAMP NOT NULL, 
	"UpdatedAt" TIMESTAMP NOT NULL, 
	PRIMARY KEY ("UserID")
)
| õÑR:¯
Ï                                                                                                                                                                                                                                                 )!!tableRecipeTagsRecipeTagsCREATE TABLE "RecipeTags" (
	"RecipeTagID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"TagID" INTEGER NOT NULL, 
	PRIMARY KEY ("RecipeTagID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID"), 
	FOREIGN KEY("TagID") REFERENCES "Tags" ("TagID")
)##qtableRecipeStepsRecipeStepsCREATE TABLE "RecipeSteps" (
	"StepID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"StepNumber" INTEGER NOT NULL, 
	"Description" VARCHAR NOT NULL, 
	PRIMARY KEY ("StepID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)|''7tableRecipeReviewsRecipeReviewsCREATE TABLE "RecipeReviews" (
	"ReviewID" INTEGER NOT NULL, 
	"UserID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"Rating" FLOAT NOT NULL, 
	"ReviewText" VARCHAR, 
	"CreatedAt" TIMESTAMP, 
	PRIMARY KEY ("ReviewID"), 
	FOREIGN KEY("UserID") REFERENCES "Users" ("UserID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)!==UtableRecipeIngredientSectionsRecipeIngredientSectionsCREATE TABLE "RecipeIngredientSections" (
	"SectionID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"SectionName" VARCHAR NOT NULL, 
	PRIMARY KEY ("SectionID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)++?tableMealPlanRecipesMealPlanRecipesCREATE TABLE "MealPlanRecipes" (
	"MealPlanRecipeID" INTEGER NOT NULL, 
	"MealPlanID" INTEGER NOT NULL, 
	"RecipeID" INTEGER NOT NULL, 
	"MealType" VARCHAR, 
	"Date" DATE NOT NULL, 
	PRIMARY KEY ("MealPlanRecipeID"), 
	FOREIGN KEY("MealPlanID") REFERENCES "MealPlans" ("MealPlanID"), 
	FOREIGN KEY("RecipeID") REFERENCES "Recipes" ("RecipeID")
)  3#tableRecipesRecipesCREATE TABLE "Recipes" (
	"RecipeID" INTEGER NOT NULL, 
	"UserID" INTEGER, 
	"RecipeName" VARCHAR NOT NULL, 
	"AuthorID" INTEGER, 
	"BookID" INTEGER, 
	"PageNumber" INTEGER, 
	"OnlineURL" VARCHAR, 
	"CookTime" INTEGER, 
	"Difficulty" VARCHAR, 
	"Type" VARCHAR, 
	"Image     dtableRecipesRecipesCREATE TABLE Recipes (
    RecipeID INTEGER PRIMARY KEY,
    UserID INTEGER,
    RecipeName TEXT NOT NULL,
    AuthorID INTEGER,
    BookID INTEGER,
    PageNumber INTEGER,
    OnlineURL TEXT,
    CookTime INTEGER,
    Difficulty TEXT,
    Type TEXT,
    ImageURL TEXT,
    Servings INTEGER,
    Cuisine TEXT,
    CreatedAt TIMESTAMP,
    UpdatedAt TIMESTAMP,
    FOREIGN KEY(UserID) REFERENCES Users(UserID) ON DELETE SET NULL,
    FOREIGN KEY(AuthorID) REFERENCES RecipeAuthors(AuthorID) ON DELETE SET NULL,
    FOREIGN KEY(BookID) REFERENCES RecipeBooks(BookID) ON DELETE SET NULL
)6;;tableShoppingListIngredientsShoppingListIngredientsCREATE TABLE "ShoppingListIngredients" (
	"ShoppingListIngredientID" INTEGER NOT NULL, 
	"ShoppingListID" INTEGER NOT NULL, 
	"MealPlanRecipeID" INTEGER, 
	"IngredientID" INTEGER NOT NULL, 
	"Quantity" FLOAT, 
	"UnitID" INTEGER, 
	"IsManual" BOOLEAN, 
	"AlreadyHave" BOOLEAN, 
	"Purchased" BOOLEAN, 
	PRIMARY KEY ("ShoppingListIngredientID"), 
	FOREIGN KEY("ShoppingListID") REFERENCES "ShoppingLists" ("ShoppingListID"), 
	FOREIGN KEY("MealPlanRecipeID") REFERENCES "MealPlanRecipes" ("MealPlanRecipeID"), 
	FOREIGN KEY("IngredientID") REFERENCES "Ingredients" ("IngredientID"), 
	FOREIGN KEY("UnitID") REFERENCES "Units" ("UnitID")
)-//	tableRecipeIngredientsRecipeIngredientsCREATE TABLE RecipeIngredients (
    RecipeIngredientID INTEGER PRIMARY KEY,
    RecipeID INTEGER,
    IngredientID INTEGER,
    SectionID INTEGER,
    Quantity FLOAT,
    UnitID INTEGER,
    FOREIGN KEY(RecipeID) REFERENCES Recipes(RecipeID) ON DELETE CASCADE,
    FOREIGN KEY(IngredientID) REFERENCES Ingredients(IngredientID) ON DELETE CASCADE,
    FOREIGN KEY(SectionID) REFERENCES RecipeIngredientSections(SectionID) ON DELETE CASCADE,
    FOREIGN KEY(UnitID) REFERENCES Units(UnitID) ON DELETE SET NULL
))
      ÌGGG,,,,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 !Breakfast2024-06-30õ 	!Breakfast2024-06-27 	!Breakfast2024-06-27 	!Lunch2024-06-25õ P	 	!Dinner2024-06-25õ 2	!Dinner2024-0 !Breakfast2024-06-30 	!Breakfast2024-06-23  	!Breakfast2024-06-26d 	!Breakfast2024 	 		!Breakfast2024-06-26 	!Breakfast2024-06-27ä i	!Lunch2024-06-26ä Q	!Breakfast2024-06-25ä 5	!Breakfast2024-06-24ä 	!Dinner2024-06-24 	!Lunch2024-06-27   		!Dinner2024-06-27-244
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
      ö ÞÒÄº®£}reZNC                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           	 	 	
  	d	 	 	
{
 	  Ý	 	 	  
  d
	  		 	 	
  	 	 		   È
  	

 	 

 	 
   
		 	!
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

==================== C:\Code\recipe-app\output_backend.txt ====================



==================== C:\Code\recipe-app\backend\mydatabase2.db ====================



==================== C:\Code\recipe-app\backend\run.py ====================

from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)


==================== C:\Code\recipe-app\backend\app\base.py ====================

from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class TimestampMixin(object):
    CreatedAt = db.Column(db.DateTime, default=datetime.utcnow)
    UpdatedAt = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


==================== C:\Code\recipe-app\backend\app\extensions.py ====================

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


==================== C:\Code\recipe-app\backend\app\generic_crud.py ====================

from flask import Blueprint
from .utils import get_all, get_by_id, create_record, update_record, delete_record
from . import db

def create_crud_blueprint(model, url_prefix):
    bp = Blueprint(model.__tablename__, __name__, url_prefix=url_prefix)

    @bp.route('/', methods=['GET'])
    def get_records():
        return get_all(model)

    @bp.route('/<int:id>', methods=['GET'])
    def get_record(id):
        return get_by_id(model, id)

    @bp.route('/', methods=['POST'])
    def create():
        return create_record(model)

    @bp.route('/<int:id>', methods=['PUT'])
    def update(id):
        return update_record(model, id)

    @bp.route('/<int:id>', methods=['DELETE'])
    def delete(id):
        return delete_record(model, id)

    return bp


==================== C:\Code\recipe-app\backend\app\models.py ====================

from werkzeug.security import generate_password_hash, check_password_hash
from .extensions import db
from .base import TimestampMixin

class IngredientCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientCategories'
    CategoryID = db.Column(db.Integer, primary_key=True)
    CategoryName = db.Column(db.String, unique=True, nullable=False)

    def to_dict(self):
        return {
            'CategoryID': self.CategoryID,
            'CategoryName': self.CategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Ingredient(db.Model, TimestampMixin):
    __tablename__ = 'Ingredients'
    IngredientID = db.Column(db.Integer, primary_key=True)
    SubCategoryID = db.Column(db.Integer, db.ForeignKey('IngredientSubCategories.SubCategoryID'), nullable=False)
    IngredientName = db.Column(db.String, nullable=False)
    PurchaseUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))
    PurchaseWeightVolume = db.Column(db.Float)
    PurchaseWeightUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))

    def to_dict(self):
        return {
            'IngredientID': self.IngredientID,
            'SubCategoryID': self.SubCategoryID,
            'IngredientName': self.IngredientName,
            'PurchaseUnitID': self.PurchaseUnitID,
            'PurchaseWeightVolume': self.PurchaseWeightVolume,
            'PurchaseWeightUnitID': self.PurchaseWeightUnitID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class IngredientSubCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientSubCategories'
    SubCategoryID = db.Column(db.Integer, primary_key=True)
    CategoryID = db.Column(db.Integer, db.ForeignKey('IngredientCategories.CategoryID'), nullable=False)
    SubCategoryName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SubCategoryID': self.SubCategoryID,
            'CategoryID': self.CategoryID,
            'SubCategoryName': self.SubCategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class MealPlanRecipe(db.Model):
    __tablename__ = 'MealPlanRecipes'
    MealPlanRecipeID = db.Column(db.Integer, primary_key=True)
    MealPlanID = db.Column(db.Integer, db.ForeignKey('MealPlans.MealPlanID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    MealType = db.Column(db.String)
    Date = db.Column(db.Date, nullable=False)

    def to_dict(self):
        return {
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'MealPlanID': self.MealPlanID,
            'RecipeID': self.RecipeID,
            'MealType': self.MealType,
            'Date': self.Date
        }

class MealPlan(db.Model, TimestampMixin):
    __tablename__ = 'MealPlans'
    MealPlanID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    PlanName = db.Column(db.String)
    StartDate = db.Column(db.Date)
    EndDate = db.Column(db.Date)

    def to_dict(self):
        return {
            'MealPlanID': self.MealPlanID,
            'UserID': self.UserID,
            'PlanName': self.PlanName,
            'StartDate': self.StartDate,
            'EndDate': self.EndDate,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeAuthor(db.Model):
    __tablename__ = 'RecipeAuthors'
    AuthorID = db.Column(db.Integer, primary_key=True)
    AuthorName = db.Column(db.String, nullable=False)
    AuthorImageURL = db.Column(db.String)

    def to_dict(self):
        return {
            'AuthorID': self.AuthorID,
            'AuthorName': self.AuthorName,
            'AuthorImageURL': self.AuthorImageURL
        }

class RecipeBook(db.Model):
    __tablename__ = 'RecipeBooks'
    BookID = db.Column(db.Integer, primary_key=True)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='CASCADE'), nullable=False)
    BookName = db.Column(db.String, nullable=False)
    CoverArtURL = db.Column(db.String)

    def to_dict(self):
        return {
            'BookID': self.BookID,
            'AuthorID': self.AuthorID,
            'BookName': self.BookName,
            'CoverArtURL': self.CoverArtURL
        }

class RecipeIngredient(db.Model):
    __tablename__ = 'RecipeIngredients'
    RecipeIngredientID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    SectionID = db.Column(db.Integer, db.ForeignKey('RecipeIngredientSections.SectionID', ondelete='CASCADE'))
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))

    def to_dict(self):
        return {
            'RecipeIngredientID': self.RecipeIngredientID,
            'RecipeID': self.RecipeID,
            'IngredientID': self.IngredientID,
            'SectionID': self.SectionID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID
        }

class RecipeIngredientSection(db.Model):
    __tablename__ = 'RecipeIngredientSections'
    SectionID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    SectionName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SectionID': self.SectionID,
            'RecipeID': self.RecipeID,
            'SectionName': self.SectionName
        }

class RecipeReview(db.Model):
    __tablename__ = 'RecipeReviews'
    ReviewID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    Rating = db.Column(db.Float, nullable=False)
    ReviewText = db.Column(db.String)

    def to_dict(self):
        return {
            'ReviewID': self.ReviewID,
            'UserID': self.UserID,
            'RecipeID': self.RecipeID,
            'Rating': self.Rating,
            'ReviewText': self.ReviewText
        }

class Recipe(db.Model, TimestampMixin):
    __tablename__ = 'Recipes'
    RecipeID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='SET NULL'))
    RecipeName = db.Column(db.String, nullable=False)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='SET NULL'))
    BookID = db.Column(db.Integer, db.ForeignKey('RecipeBooks.BookID', ondelete='SET NULL'))
    PageNumber = db.Column(db.Integer)
    OnlineURL = db.Column(db.String)
    CookTime = db.Column(db.Integer)
    Difficulty = db.Column(db.String)
    Type = db.Column(db.String)
    ImageURL = db.Column(db.String)
    Servings = db.Column(db.Integer)
    Cuisine = db.Column(db.String)

    def to_dict(self):
        return {
            'RecipeID': self.RecipeID,
            'UserID': self.UserID,
            'RecipeName': self.RecipeName,
            'AuthorID': self.AuthorID,
            'BookID': self.BookID,
            'PageNumber': self.PageNumber,
            'OnlineURL': self.OnlineURL,
            'CookTime': self.CookTime,
            'Difficulty': self.Difficulty,
            'Type': self.Type,
            'ImageURL': self.ImageURL,
            'Servings': self.Servings,
            'Cuisine': self.Cuisine,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeStep(db.Model):
    __tablename__ = 'RecipeSteps'
    StepID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    StepNumber = db.Column(db.Integer, nullable=False)
    Description = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'StepID': self.StepID,
            'RecipeID': self.RecipeID,
            'StepNumber': self.StepNumber,
            'Description': self.Description
        }

class RecipeTag(db.Model):
    __tablename__ = 'RecipeTags'
    RecipeTagID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    TagID = db.Column(db.Integer, db.ForeignKey('Tags.TagID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'RecipeTagID': self.RecipeTagID,
            'RecipeID': self.RecipeID,
            'TagID': self.TagID
        }

class ShoppingListIngredient(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingListIngredients'
    ShoppingListIngredientID = db.Column(db.Integer, primary_key=True)
    ShoppingListID = db.Column(db.Integer, db.ForeignKey('ShoppingLists.ShoppingListID', ondelete='CASCADE'), nullable=False)
    MealPlanRecipeID = db.Column(db.Integer, db.ForeignKey('MealPlanRecipes.MealPlanRecipeID', ondelete='CASCADE'))
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))
    IsManual = db.Column(db.Boolean)
    AlreadyHave = db.Column(db.Boolean)
    Purchased = db.Column(db.Boolean)

    def to_dict(self):
        return {
            'ShoppingListIngredientID': self.ShoppingListIngredientID,
            'ShoppingListID': self.ShoppingListID,
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'IngredientID': self.IngredientID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID,
            'IsManual': self.IsManual,
            'AlreadyHave': self.AlreadyHave,
            'Purchased': self.Purchased,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class ShoppingList(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingLists'
    ShoppingListID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'ShoppingListID': self.ShoppingListID,
            'UserID': self.UserID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Tag(db.Model):
    __tablename__ = 'Tags'
    TagID = db.Column(db.Integer, primary_key=True)
    TagName = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'TagID': self.TagID,
            'TagName': self.TagName
        }

class UnitConversion(db.Model):
    __tablename__ = 'UnitConversions'
    FromUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ToUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ConversionFactor = db.Column(db.Float, nullable=False)

    def to_dict(self):
        return {
            'FromUnitID': self.FromUnitID,
            'ToUnitID': self.ToUnitID,
            'ConversionFactor': self.ConversionFactor
        }

class Unit(db.Model):
    __tablename__ = 'Units'
    UnitID = db.Column(db.Integer, primary_key=True)
    UnitName = db.Column(db.String, nullable=False, unique=True)
    Abbreviation = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'UnitID': self.UnitID,
            'UnitName': self.UnitName,
            'Abbreviation': self.Abbreviation
        }

class User(db.Model, TimestampMixin):
    __tablename__ = 'Users'
    UserID = db.Column(db.Integer, primary_key=True)
    Username = db.Column(db.String, nullable=False, unique=True)
    PasswordHash = db.Column(db.String, nullable=False)
    Email = db.Column(db.String, nullable=False, unique=True)

    def set_password(self, password):
        self.PasswordHash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.PasswordHash, password)

    def to_dict(self):
        return {
            'UserID': self.UserID,
            'Username': self.Username,
            'Email': self.Email,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }


==================== C:\Code\recipe-app\backend\app\utils.py ====================

from flask import request, jsonify
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from .extensions import db
from .models import User
from datetime import datetime

def get_all(model):
    try:
        records = model.query.all()
        return jsonify([record.to_dict() for record in records]), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def get_by_id(model, id):
    try:
        record = model.query.get_or_404(id)
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def create_record(model):
    try:
        data = request.get_json()
        if issubclass(model, TimestampMixin):
            if 'CreatedAt' not in data:
                data['CreatedAt'] = datetime.utcnow()
            if 'UpdatedAt' not in data:
                data['UpdatedAt'] = datetime.utcnow()

        if model == User:
            password = data.pop('Password')
            user = model(**data)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            return jsonify(user.to_dict()), 201
        else:
            record = model(**data)
            db.session.add(record)
            db.session.commit()
            return jsonify(record.to_dict()), 201
    except IntegrityError as e:
        db.session.rollback()
        return jsonify({'error': 'A record with that unique value already exists.'}), 400
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def update_record(model, id):
    try:
        data = request.get_json()
        record = model.query.get_or_404(id)
        for key, value in data.items():
            setattr(record, key, value)
        if issubclass(model, TimestampMixin):
            record.UpdatedAt = datetime.utcnow()
        db.session.commit()
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def delete_record(model, id):
    try:
        record = model.query.get_or_404(id)
        db.session.delete(record)
        db.session.commit()
        return '', 204
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500


==================== C:\Code\recipe-app\backend\app\__init__.py ====================

from flask import Flask
from .extensions import db
from .models import IngredientCategory, Ingredient, IngredientSubCategory, MealPlanRecipe, MealPlan, RecipeAuthor, RecipeBook, RecipeIngredient, RecipeIngredientSection, RecipeReview, Recipe, RecipeStep, RecipeTag, ShoppingListIngredient, ShoppingList, Tag, UnitConversion, Unit, User
from .generic_crud import create_crud_blueprint
from sqlalchemy import inspect

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../../mydatabase2.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    db.init_app(app)
    
    with app.app_context():
        # Print all tables in the database
        inspector = inspect(db.engine)
        print(inspector.get_table_names())

    # Register blueprints
    app.register_blueprint(create_crud_blueprint(IngredientCategory, '/ingredient_categories'))
    app.register_blueprint(create_crud_blueprint(Ingredient, '/ingredients'))
    app.register_blueprint(create_crud_blueprint(IngredientSubCategory, '/ingredient_subcategories'))
    app.register_blueprint(create_crud_blueprint(MealPlanRecipe, '/meal_plan_recipes'))
    app.register_blueprint(create_crud_blueprint(MealPlan, '/meal_plans'))
    app.register_blueprint(create_crud_blueprint(RecipeAuthor, '/recipe_authors'))
    app.register_blueprint(create_crud_blueprint(RecipeBook, '/recipe_books'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredient, '/recipe_ingredients'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredientSection, '/recipe_ingredient_sections'))
    app.register_blueprint(create_crud_blueprint(RecipeReview, '/recipe_reviews'))
    app.register_blueprint(create_crud_blueprint(Recipe, '/recipes'))
    app.register_blueprint(create_crud_blueprint(RecipeStep, '/recipe_steps'))
    app.register_blueprint(create_crud_blueprint(RecipeTag, '/recipe_tags'))
    app.register_blueprint(create_crud_blueprint(ShoppingListIngredient, '/shopping_list_ingredients'))
    app.register_blueprint(create_crud_blueprint(ShoppingList, '/shopping_lists'))
    app.register_blueprint(create_crud_blueprint(Tag, '/tags'))
    app.register_blueprint(create_crud_blueprint(UnitConversion, '/unit_conversions'))
    app.register_blueprint(create_crud_blueprint(Unit, '/units'))
    app.register_blueprint(create_crud_blueprint(User, '/users'))

    return app


==================== C:\Code\recipe-app\backend\instance\mydatabase2.db ====================



==================== C:\Code\recipe-app\output_client.txt ====================



==================== C:\Code\recipe-app\client\.eslintrc.cjs ====================

module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}


==================== C:\Code\recipe-app\client\index.html ====================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


==================== C:\Code\recipe-app\client\postcss.config.js ====================

export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };
  

==================== C:\Code\recipe-app\client\README.md ====================

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh


==================== C:\Code\recipe-app\client\tailwind.config.js ====================

/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [
      require('daisyui'),
    ],
    daisyui: {
      themes: ["light", "dark", "cupcake", "bumblebee", "emerald", "corporate", "synthwave", "retro", "cyberpunk", "valentine", "halloween", "garden", "forest", "aqua", "lofi", "pastel", "fantasy", "wireframe", "black", "luxury", "dracula", "cmyk", "autumn", "business", "acid", "lemonade", "night", "coffee", "winter"],
    },
  }
  

==================== C:\Code\recipe-app\client\vite.config.js ====================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ''),
      },
    },
  },
});


==================== C:\Code\recipe-app\client\public\vite.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

==================== C:\Code\recipe-app\client\src\App.css ====================



==================== C:\Code\recipe-app\client\src\App.jsx ====================

import React from 'react';
import AppRoutes from './routes';
import NavBar from './components/NavBar';
import { useAuth } from './context/AuthContext';
import SideBar from './components/SideBar';

function App() {
  const { isAuthenticated } = useAuth();

  return (
    <div className="flex flex-col min-h-screen">
      <NavBar />
      <div className="flex grow">
        {isAuthenticated && <SideBar />}
        <AppRoutes />
      </div>
    </div>
  );
}

export default App;


==================== C:\Code\recipe-app\client\src\index.css ====================

@tailwind base;
@tailwind components;
@tailwind utilities;


==================== C:\Code\recipe-app\client\src\main.jsx ====================

import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';
import { AuthProvider } from './context/AuthContext';
import { DataProvider } from './context/DataContext';

const rootElement = document.getElementById('root');
const root = createRoot(rootElement);

root.render(
  <BrowserRouter>
    <AuthProvider>
      <DataProvider>
        <App />
      </DataProvider>
    </AuthProvider>
  </BrowserRouter>
);


==================== C:\Code\recipe-app\client\src\routes.jsx ====================

// src/routes.jsx

import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import Register from './pages/Register';
import ManageCategories from './pages/ManageCategories';
import ManageSubCategories from './pages/ManageSubCategories';
import ManageIngredients from './pages/ManageIngredients';
import ManageRecipes from './pages/ManageRecipes';
import ManageAuthors from './pages/ManageAuthors';
import ManageRecipeBooks from './pages/ManageRecipeBooks';
import ManageMealPlans from './pages/ManageMealPlans';
import PrivateRoute from './components/PrivateRoute';
import MealPlanDetails from './pages/MealPlanDetails';

import Home from './pages/Home';

function AppRoutes() {
  return (
    <Routes>
      <Route path="login" element={<Login />} />
      <Route path="register" element={<Register />} />
      <Route path="/" element={<PrivateRoute><Home /></PrivateRoute>} />
      <Route path="/meal-plan/:mealPlanId" element={<PrivateRoute><MealPlanDetails /></PrivateRoute>} />
      <Route path="admin">
        <Route index element={<PrivateRoute><Dashboard /></PrivateRoute>} />
        <Route path="manage-categories" element={<PrivateRoute><ManageCategories /></PrivateRoute>} />
        <Route path="manage-sub-categories" element={<PrivateRoute><ManageSubCategories /></PrivateRoute>} />
        <Route path="manage-ingredients" element={<PrivateRoute><ManageIngredients /></PrivateRoute>} />
        <Route path="manage-recipes" element={<PrivateRoute><ManageRecipes /></PrivateRoute>} />
        <Route path="manage-authors" element={<PrivateRoute><ManageAuthors /></PrivateRoute>} />
        <Route path="manage-recipe-books" element={<PrivateRoute><ManageRecipeBooks /></PrivateRoute>} />
        <Route path="manage-meal-plans" element={<PrivateRoute><ManageMealPlans /></PrivateRoute>} />
      </Route>

    </Routes>
  );
}

export default AppRoutes;


==================== C:\Code\recipe-app\client\src\supabaseClient.js ====================

// src/supabaseClient.js

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://fovbbeeexjqmcivjaujs.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZvdmJiZWVleGpxbWNpdmphdWpzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTk1Nzg2NjksImV4cCI6MjAzNTE1NDY2OX0.F3M2b5cR9gKJo5muAZ45bgs8LKkf8znkMlixf7wN_88';

export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);


==================== C:\Code\recipe-app\client\src\assets\react.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

==================== C:\Code\recipe-app\client\src\components\AddAuthorModal.jsx ====================

// src/components/AddAuthorModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';

function AddAuthorModal() {
  const [authorName, setAuthorName] = useState('');
  const [authorImageURL, setAuthorImageURL] = useState('');
  const { createAuthor } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createAuthor(authorName, authorImageURL);
      document.getElementById('add_author_modal').close();
    } catch (error) {
      alert('Failed to add author');
    }
  };

  return (
    <Modal id="add_author_modal" title="Add Author">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Author Name"
          value={authorName}
          onChange={(e) => setAuthorName(e.target.value)}
          required
        />
        <TextInput
          label="Author Image URL"
          value={authorImageURL}
          onChange={(e) => setAuthorImageURL(e.target.value)}
        />
        <Button>Add Author</Button>
      </form>
    </Modal>
  );
}

export default AddAuthorModal;


==================== C:\Code\recipe-app\client\src\components\AddCategoryModal.jsx ====================

// src/components/AddCategoryModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Button from './ui/Button';

function AddCategoryModal() {
  const [categoryName, setCategoryName] = useState('');
  const { createCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createCategory(categoryName);
      document.getElementById('add_category_modal').close();
    } catch (error) {
      alert('Failed to add category');
    }
  };

  return (
    <Modal id="add_category_modal" title="Add Category">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Category Name"
          value={categoryName}
          onChange={(e) => setCategoryName(e.target.value)}
          required
        />
        <Button>Add Category</Button>
      </form>
    </Modal>
  );
}

export default AddCategoryModal;


==================== C:\Code\recipe-app\client\src\components\AddIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Select from './ui/Select';
import Button from './ui/Button';

function AddIngredientModal({ onIngredientAdded = () => {} }) {
  const [ingredientName, setIngredientName] = useState('');
  const [purchaseWeightVolume, setPurchaseWeightVolume] = useState('');
  const [purchaseUnitId, setPurchaseUnitId] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const [subCategoryId, setSubCategoryId] = useState('');
  const [purchaseWeightUnitId, setPurchaseWeightUnitId] = useState('');

  const { categories, subCategories, units, createIngredient } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const ingredient = {
      IngredientName: ingredientName,
      PurchaseWeightVolume: purchaseWeightVolume,
      PurchaseUnitID: purchaseUnitId,
      SubCategoryID: subCategoryId,
      PurchaseWeightUnitID: purchaseWeightUnitId,
    };

    try {
      const newIngredient = await createIngredient(ingredient);
      onIngredientAdded(newIngredient);
      document.getElementById('add_ingredient_modal').close();
    } catch (error) {
      alert('Failed to add ingredient');
    }
  };

  const filteredSubCategories = subCategories.filter(
    (subCategory) => subCategory.CategoryID === parseInt(categoryId)
  );

  const unitOptions = units.map((unit) => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  const subCategoryOptions = filteredSubCategories.map((subCategory) => ({
    value: subCategory.SubCategoryID,
    label: subCategory.SubCategoryName,
  }));

  return (
    <Modal id="add_ingredient_modal" title="Add Ingredient" className="modal modal-bottom sm:modal-middle">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Ingredient Name"
          value={ingredientName}
          onChange={(e) => setIngredientName(e.target.value)}
          required
        />
        <TextInput
          label="Purchase Weight Volume"
          value={purchaseWeightVolume}
          onChange={(e) => setPurchaseWeightVolume(e.target.value)}
          required
        />
        <Select
          label="Purchase Unit"
          value={purchaseUnitId}
          onChange={(e) => setPurchaseUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Select
          label="Sub-Category"
          value={subCategoryId}
          onChange={(e) => setSubCategoryId(e.target.value)}
          required
          options={subCategoryOptions}
          defaultOption="Select a sub-category"
          disabled={!categoryId} // Disable until a category is selected
        />
        <Select
          label="Purchase Weight Unit"
          value={purchaseWeightUnitId}
          onChange={(e) => setPurchaseWeightUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Button>Add Ingredient</Button>
      </form>
    </Modal>
  );
}

export default AddIngredientModal;


==================== C:\Code\recipe-app\client\src\components\AddMealPlanModal.jsx ====================

// src/components/AddMealPlanModal.jsx

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';

function AddMealPlanModal() {
  const [planName, setPlanName] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const { createMealPlan } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const mealPlan = {
      PlanName: planName,
      StartDate: startDate,
      EndDate: endDate,
      UserID: 1, // Adjust as needed
    };

    try {
      await createMealPlan(mealPlan);
      document.getElementById('add_meal_plan_modal').close();
    } catch (error) {
      alert('Failed to add meal plan');
    }
  };

  return (
    <Modal id="add_meal_plan_modal" title="Add Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Plan Name"
          value={planName}
          onChange={(e) => setPlanName(e.target.value)}
          required
        />
        <TextInput
          label="Start Date"
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          required
        />
        <TextInput
          label="End Date"
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          required
        />
        <Button>Add Meal Plan</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanModal;


==================== C:\Code\recipe-app\client\src\components\AddMealPlanRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import Select from './ui/Select';
import { format, isValid } from 'date-fns';
import TextInput from './ui/TextInput';

function AddMealPlanRecipeModal({ mealPlanId, defaultDate, defaultMealType, defaultRecipeId, mealPlanRecipeId }) {

  const [recipeId, setRecipeId] = useState('');
  const [date, setDate] = useState(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
  const [mealType, setMealType] = useState(defaultMealType || '');
  const [currentMealPlanRecipeId, setCurrentMealPlanRecipeId] = useState(mealPlanRecipeId);

  const { recipes, createMealPlanRecipe, updateMealPlanRecipe } = useData();

  useEffect(() => {
    setDate(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
    setMealType(defaultMealType || '');
    setRecipeId(defaultRecipeId || '');
    setCurrentMealPlanRecipeId(mealPlanRecipeId || '');
  }, [defaultDate, defaultMealType, defaultRecipeId, mealPlanRecipeId]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!mealPlanId || !recipeId || !mealType || !date) {
      alert('All fields are required.');
      return;
    }

    const mealPlanRecipe = {
      MealPlanID: mealPlanId,
      RecipeID: recipeId,
      MealType: mealType,
      Date: date,
    };

    console.log("Submitting mealPlanRecipeId:", currentMealPlanRecipeId);

    try {
      if (currentMealPlanRecipeId) {
        // Update the existing meal plan recipe
        await updateMealPlanRecipe(currentMealPlanRecipeId, mealPlanRecipe);
      } else {
        // Create a new meal plan recipe
        await createMealPlanRecipe(mealPlanRecipe);
      }
      document.getElementById('add_meal_plan_recipe_modal').close();
      setRecipeId('');
      setMealType('');
      setDate('');
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add/update meal plan recipe');
    }
  };

  const recipeOptions = recipes.map(recipe => ({
    value: recipe.RecipeID,
    label: recipe.RecipeName,
  }));

  return (
    <Modal id="add_meal_plan_recipe_modal" title="Add/Update Meal in Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <Select
          label="Recipe"
          value={recipeId}
          onChange={(e) => setRecipeId(e.target.value)}
          required
          options={recipeOptions}
          defaultOption="Select a recipe"
        />
        <TextInput
          label="Date"
          type="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          required
        />
        <Select
          label="Meal Type"
          value={mealType}
          onChange={(e) => setMealType(e.target.value)}
          required
          options={[
            { value: 'Breakfast', label: 'Breakfast' },
            { value: 'Lunch', label: 'Lunch' },
            { value: 'Dinner', label: 'Dinner' }
          ]}
          defaultOption="Select a meal type"
        />
        <Button type="submit">{currentMealPlanRecipeId ? 'Update Meal' : 'Add Meal'}</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanRecipeModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeBookModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeBookModal() {
  const [bookName, setBookName] = useState('');
  const [authorID, setAuthorID] = useState('');
  const [coverArtURL, setCoverArtURL] = useState('');

  const { authors, createRecipeBook } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const recipeBook = {
      AuthorID: authorID,
      BookName: bookName,
      CoverArtURL: coverArtURL
    };

    try {
      await createRecipeBook(recipeBook);
      document.getElementById('add_recipe_book_modal').close();
    } catch (error) {
      alert('Failed to add book');
    }
  };

  const authorOptions = authors.map(author => ({
    value: author.AuthorID,
    label: author.AuthorName,
  }));

  return (
    <Modal id="add_recipe_book_modal" title="Add Recipe Book">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Book Name"
          value={bookName}
          onChange={(e) => setBookName(e.target.value)}
          required
        />
        <Select
          label="Author"
          value={authorID}
          onChange={(e) => setAuthorID(e.target.value)}
          required
          options={authorOptions}
          defaultOption="Select an author"
        />
        <TextInput
          label="Cover Art URL"
          value={coverArtURL}
          onChange={(e) => setCoverArtURL(e.target.value)}
        />
        <Button>Add Book</Button>
      </form>
    </Modal>
  );
}

export default AddRecipeBookModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import Fuse from 'fuse.js';
import { useData } from '../context/DataContext';
import AddIngredientModal from './AddIngredientModal';
import Table from './ui/Table';
import Button from './ui/Button';
import Modal from './ui/Modal';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeIngredientModal({ recipeId }) {
  const [selectedIngredientId, setSelectedIngredientId] = useState('');
  const [quantity, setQuantity] = useState('');
  const [selectedUnitId, setSelectedUnitId] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredIngredients, setFilteredIngredients] = useState([]);
  const [defaultUnitId, setDefaultUnitId] = useState('');

  const { ingredients, units, categories, subCategories, createRecipeIngredient } = useData();

  useEffect(() => {
    if (ingredients.length && categories.length && subCategories.length) {
      const updatedIngredients = ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      });
      setFilteredIngredients(updatedIngredients);
    }
  }, [ingredients, categories, subCategories]);

  const handleSearch = (e) => {
    const term = e.target.value;
    setSearchTerm(term);

    if (term === '') {
      setFilteredIngredients(ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      }));
    } else {
      const fuse = new Fuse(filteredIngredients, {
        keys: ['IngredientName', 'CategoryName', 'SubCategoryName'],
        threshold: 0.3, // Adjust the threshold as needed
      });

      const result = fuse.search(term);
      setFilteredIngredients(result.map((r) => r.item));
    }
  };

  const handleAddClick = (ingredientId) => {
    const ingredient = ingredients.find((ing) => ing.IngredientID === ingredientId);
    if (ingredient) {
      setSelectedIngredientId(ingredientId);
      setDefaultUnitId(ingredient.PurchaseUnitID || ''); // Handle missing PurchaseUnitID
      setSelectedUnitId(ingredient.PurchaseUnitID || ''); // Set the default unit id
      document.getElementById('quantity_unit_modal').showModal();
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = {
      RecipeID: recipeId,
      IngredientID: selectedIngredientId,
      Quantity: parseFloat(quantity),
      UnitID: selectedUnitId || defaultUnitId,
    };

    try {
      await createRecipeIngredient(data);
      window.location.reload(); // Refresh the page to show the new ingredient
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add ingredient');
    }
  };

  const handleAddNewIngredient = () => {
    document.getElementById('add_ingredient_modal').showModal();
  };

  const handleNewIngredientAdded = (newIngredient) => {
    if (newIngredient && newIngredient.PurchaseUnitID) {
      setFilteredIngredients((prevIngredients) => [
        ...prevIngredients,
        {
          ...newIngredient,
          CategoryName: '',
          SubCategoryName: '',
        },
      ]);

      // Automatically select the newly added ingredient and open the quantity/unit modal
      setSelectedIngredientId(newIngredient.IngredientID);
      setDefaultUnitId(newIngredient.PurchaseUnitID);
      setSelectedUnitId(newIngredient.PurchaseUnitID);
      setQuantity(''); // Reset the quantity
      document.getElementById('quantity_unit_modal').showModal();
    } else {
      alert('New ingredient does not have a PurchaseUnitID');
    }
  };

  const headers = ['Ingredient', 'Category', 'Sub-Category', 'Action'];
  const data = filteredIngredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientName,
      ingredient.CategoryName,
      ingredient.SubCategoryName,
      <Button
        size="sm"
        variant="primary"
        outline={true}
        onClick={() => handleAddClick(ingredient.IngredientID)}
      >
        Add
      </Button>
    ],
  }));

  const unitOptions = units.map(unit => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  return (
    <div>
      <Modal id="add_recipe_ingredient_modal" title="Add Ingredient to Recipe" wide={true}>
        <div className='flex flex-col gap-4 mb-8'>
          <TextInput
            label="Search Ingredient"
            value={searchTerm}
            onChange={handleSearch}
            placeholder="Type to search ingredients..."
          />

          <Button
            outline={true}
            size='sm'
            onClick={handleAddNewIngredient}
          >Add New Ingredient</Button>
        </div>
        <Table headers={headers} data={data} />
      </Modal>

      <Modal id="quantity_unit_modal" title="Enter Quantity and Unit">
        <form onSubmit={handleSubmit} className="flex gap-4 flex-col mt-4">
          <TextInput
            label="Quantity"
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
            required
          />

          <Select
            label="Unit"
            value={selectedUnitId || defaultUnitId}
            onChange={(e) => setSelectedUnitId(e.target.value)}
            required
            options={unitOptions}
            defaultOption="Select a unit"
          />
          <Button>Add Ingredient</Button>
        </form>
      </Modal>

      <AddIngredientModal onIngredientAdded={handleNewIngredientAdded} />
    </div>
  );
}

export default AddRecipeIngredientModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeModal() {
    const [recipeName, setRecipeName] = useState('');
    const [authorID, setAuthorID] = useState('');
    const [bookID, setBookID] = useState('');
    const [pageNumber, setPageNumber] = useState('');
    const [onlineURL, setOnlineURL] = useState('');
    const [cookTime, setCookTime] = useState('');
    const [difficulty, setDifficulty] = useState('');
    const [type, setType] = useState('');
    const [imageURL, setImageURL] = useState('');
    const [servings, setServings] = useState('');
    const [cuisine, setCuisine] = useState('');
    const [filteredBooks, setFilteredBooks] = useState([]);

    const { authors, recipeBooks, createRecipe } = useData();

    useEffect(() => {
        if (authorID) {
            setFilteredBooks(recipeBooks.filter(book => book.AuthorID === parseInt(authorID)));
        } else {
            setFilteredBooks([]);
        }
    }, [authorID, recipeBooks]);

    const handleAuthorChange = (e) => {
        setAuthorID(e.target.value);
        setBookID(''); // Reset book selection when author changes
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        const recipe = {
            RecipeName: recipeName,
            AuthorID: parseInt(authorID) || null,
            BookID: parseInt(bookID) || null,
            PageNumber: parseInt(pageNumber) || null,
            OnlineURL: onlineURL,
            CookTime: parseInt(cookTime) || null,
            Difficulty: difficulty,
            Type: type,
            ImageURL: imageURL,
            Servings: parseInt(servings) || null,
            Cuisine: cuisine,
        };

        try {
            await createRecipe(recipe);
            document.getElementById('add_recipe_modal').close();
        } catch (error) {
            alert('Failed to add recipe');
        }
    };

    const authorOptions = authors.map(author => ({
        value: author.AuthorID,
        label: author.AuthorName
    }));

    const bookOptions = filteredBooks.map(book => ({
        value: book.BookID,
        label: book.BookName
    }));

    return (
        <Modal id="add_recipe_modal" title="Add Recipe">
            <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
                <TextInput
                    label="Recipe Name"
                    value={recipeName}
                    onChange={(e) => setRecipeName(e.target.value)}
                    required
                />
                <Select
                    label="Author"
                    value={authorID}
                    onChange={handleAuthorChange}
                    options={authorOptions}
                    defaultOption="Select an author"
                />
                <Select
                    label="Book"
                    value={bookID}
                    onChange={(e) => setBookID(e.target.value)}
                    options={bookOptions}
                    defaultOption="Select a book"
                    disabled={!authorID}
                />
                <TextInput
                    label="Page Number"
                    type="number"
                    value={pageNumber}
                    onChange={(e) => setPageNumber(e.target.value)}
                    disabled={!bookID}
                />
                <TextInput
                    label="Online URL"
                    type="url"
                    value={onlineURL}
                    onChange={(e) => setOnlineURL(e.target.value)}
                />
                <TextInput
                    label="Cook Time (minutes)"
                    type="number"
                    value={cookTime}
                    onChange={(e) => setCookTime(e.target.value)}
                    required
                />
                <TextInput
                    label="Difficulty"
                    value={difficulty}
                    onChange={(e) => setDifficulty(e.target.value)}
                />
                <TextInput
                    label="Type"
                    value={type}
                    onChange={(e) => setType(e.target.value)}
                />
                <TextInput
                    label="Image URL"
                    type="url"
                    value={imageURL}
                    onChange={(e) => setImageURL(e.target.value)}
                />
                <TextInput
                    label="Servings"
                    type="number"
                    value={servings}
                    onChange={(e) => setServings(e.target.value)}
                    required
                />
                <TextInput
                    label="Cuisine"
                    value={cuisine}
                    onChange={(e) => setCuisine(e.target.value)}
                />
                <Button>Add Recipe</Button>
            </form>
        </Modal>
    );
}

export default AddRecipeModal;


==================== C:\Code\recipe-app\client\src\components\AddSubCategoryModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddSubCategoryModal() {
  const [subCategoryName, setSubCategoryName] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const { categories, createSubCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const subCategory = {
      SubCategoryName: subCategoryName,
      CategoryID: categoryId,
    };

    try {
      await createSubCategory(subCategory);
      document.getElementById('add_sub_category_modal').close();
    } catch (error) {
      console.error('Error adding sub-category:', error);
      alert('Failed to add sub-category');
    }
  };

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  return (
    <Modal id="add_sub_category_modal" title="Add Sub-Category">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Sub-Category Name"
          value={subCategoryName}
          onChange={(e) => setSubCategoryName(e.target.value)}
          required
        />        
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Button>Add Sub-Category</Button>
      </form>
    </Modal>
  );
}

export default AddSubCategoryModal;


==================== C:\Code\recipe-app\client\src\components\AuthorTable.jsx ====================

// src/components/AuthorTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import Table from './ui/Table';
import DeleteButton from './ui/DeleteButton';

function AuthorTable() {
  const { authors, deleteAuthor } = useData();

  const handleDelete = async (authorId) => {
    if (window.confirm('Are you sure you want to delete this author?')) {
      await deleteAuthor(authorId);
    }
  };

  const headers = ['#', 'Author Name', 'Actions'];

  const data = authors.map((author, index) => ({
    id: author.AuthorID,
    cells: [
      index + 1,
      author.AuthorName,
      <DeleteButton onClick={() => handleDelete(author.AuthorID)} />      
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default AuthorTable;


==================== C:\Code\recipe-app\client\src\components\Calendar.jsx ====================

// src/components/Calendar.jsx
import React from 'react';
import Button from './ui/Button';
import { format, eachDayOfInterval, parseISO } from 'date-fns';

const Calendar = ({ mealPlan, mealPlanRecipes, recipes, onAddMeal, onModifyMeal }) => {
  const days = eachDayOfInterval({
    start: parseISO(mealPlan.StartDate),
    end: parseISO(mealPlan.EndDate),
  });

  const getMealForDay = (date, mealType) => {
    return mealPlanRecipes.find(
      (mpr) => mpr.Date === format(date, 'yyyy-MM-dd') && mpr.MealType === mealType
    );
  };

  const getRecipeName = (recipeId) => {
    const recipe = recipes.find(r => r.RecipeID === recipeId);
    return recipe ? recipe.RecipeName : 'Unknown Recipe';
  };

  return (
    <div className="grid grid-cols-1 gap-4">
      {days.map((day) => (
        <div key={day} className="border p-2">
          <h3 className="font-bold">{format(day, 'eee, MMM d')}</h3>
          {['Breakfast', 'Lunch', 'Dinner'].map((mealType) => {
            const meal = getMealForDay(day, mealType);
            return (
              <div key={mealType} className="my-2">
                <h4 className="font-semibold">{mealType}</h4>
                {meal ? (
                  <div>
                    <div>{getRecipeName(meal.RecipeID)}</div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="secondary"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID)}
                      >
                        Modify
                      </Button>
                      <Button
                        size="sm"
                        variant="error"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID, true)}
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                ) : (
                  <Button
                    size="sm"
                    variant="secondary"
                    outline
                    onClick={() => onAddMeal(day, mealType)}
                  >
                    Add {mealType}
                  </Button>
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
};

export default Calendar;


==================== C:\Code\recipe-app\client\src\components\CategoryTable.jsx ====================

// src/components/CategoryTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function CategoryTable() {
  const { categories, subCategories, deleteCategory } = useData();

  const handleDelete = async (categoryId) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      await deleteCategory(categoryId);
    }
  };

  const headers = ['ID', 'Category Name', 'Sub-Categories', 'Actions'];

  const data = categories.map((category, index) => {
    const categorySubCategories = subCategories.filter(sub => sub.CategoryID === category.CategoryID).map(sub => sub.SubCategoryName).join(', ');

    return {
      id: category.CategoryID,
      cells: [
        category.CategoryID,
        category.CategoryName,
        categorySubCategories || 'None',
        <DeleteButton onClick={() => handleDelete(category.CategoryID)} />
      ],
    };
  });

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default CategoryTable;


==================== C:\Code\recipe-app\client\src\components\IngredientTable.jsx ====================

// src/components/IngredientTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function IngredientTable() {
  const { ingredients, categories, subCategories, units, deleteIngredient } = useData();

  const handleDelete = async (ingredientId) => {
    if (window.confirm('Are you sure you want to delete this ingredient?')) {
      try {
        await deleteIngredient(ingredientId);
      } catch (error) {
        alert('Failed to delete ingredient');
      }
    }
  };

  const getSubCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    return subCategory ? subCategory.SubCategoryName : 'Unknown';
  };

  const getCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    if (subCategory) {
      const category = categories.find(category => category.CategoryID === subCategory.CategoryID);
      return category ? category.CategoryName : 'Unknown';
    }
    return 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const headers = ['ID', 'Ingredient Name', 'Purchase Weight Volume', 'Purchase Unit', 'Category', 'Subcategory', 'Purchase Weight Unit', 'Actions'];

  const data = ingredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientID,
      ingredient.IngredientName,
      ingredient.PurchaseWeightVolume,
      getUnitName(ingredient.PurchaseUnitID),
      getCategoryName(ingredient.SubCategoryID),
      getSubCategoryName(ingredient.SubCategoryID),
      getUnitName(ingredient.PurchaseWeightUnitID),
      <DeleteButton onClick={() => handleDelete(ingredient.IngredientID)} />
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default IngredientTable;


==================== C:\Code\recipe-app\client\src\components\MealPlanRecipeTable.jsx ====================

// src/components/MealPlanRecipeTable.jsx

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanRecipeTable({ mealPlanId }) {
    const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

    const handleDelete = async (mealPlanRecipeId) => {
        if (window.confirm('Are you sure you want to delete this meal?')) {
            try {
                await deleteMealPlanRecipe(mealPlanRecipeId);
            } catch (error) {
                alert('Failed to delete meal');
            }
        }
    };

    const getRecipeName = (recipeId) => {
        const recipe = recipes.find(recipe => recipe.RecipeID === recipeId);
        return recipe ? recipe.RecipeName : 'Unknown';
    };

    const headers = ['ID', 'Recipe', 'Meal Type', 'Date', 'Actions'];

    const data = mealPlanRecipes
        .filter(mpr => mpr.MealPlanID === mealPlanId)
        .map((mealPlanRecipe) => ({
            id: mealPlanRecipe.MealPlanRecipeID,
            cells: [
                mealPlanRecipe.MealPlanRecipeID,
                getRecipeName(mealPlanRecipe.RecipeID),
                mealPlanRecipe.MealType,
                mealPlanRecipe.Date,
                <DeleteButton onClick={() => handleDelete(mealPlanRecipe.MealPlanRecipeID)} />,
            ],
        }));

    function handleAddClick() {
        document.getElementById('add_meal_plan_recipe_modal').showModal();
    }

    return (
        <div className="overflow-x-auto">
            <Button size='sm' outline={true} variant='secondary' onClick={handleAddClick}>Add meal</Button>
            <Table headers={headers} data={data} />
        </div>
    );
}

export default MealPlanRecipeTable;


==================== C:\Code\recipe-app\client\src\components\MealPlanTable.jsx ====================

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanTable({ onManageMeals }) {
  const { mealPlans, deleteMealPlan } = useData();

  const handleDelete = async (mealPlanId) => {
    if (window.confirm('Are you sure you want to delete this meal plan?')) {
      try {
        await deleteMealPlan(mealPlanId);
      } catch (error) {
        alert('Failed to delete meal plan');
      }
    }
  };

  const headers = ['ID', 'Plan Name', 'Start Date', 'End Date', 'Actions'];

  const data = mealPlans.map((mealPlan) => ({
    id: mealPlan.MealPlanID,
    cells: [
      mealPlan.MealPlanID,
      mealPlan.PlanName,
      mealPlan.StartDate,
      mealPlan.EndDate,
      <div className="flex gap-2">
        <Button
          size="sm"
          variant="primary"
          outline={true}
          onClick={() => onManageMeals(mealPlan)}
        >
          Manage Meals
        </Button>
        <DeleteButton onClick={() => handleDelete(mealPlan.MealPlanID)} />
      </div>
    ],
  }));

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default MealPlanTable;


==================== C:\Code\recipe-app\client\src\components\NavBar.jsx ====================

// src/components/NavBar.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ThemeSwitcher from './ThemeSwitcher';
import { useAuth } from '../context/AuthContext';

const NavBar = () => {
  const { isAuthenticated, logout } = useAuth();

  return (
    <nav className="navbar justify-between bg-base-300">
      <a className="btn btn-ghost text-lg">
        <img alt="Logo" src="../vite.svg" className="w-4" />
        Recipe App
      </a>
      <div className="dropdown dropdown-end sm:hidden">
        <button className="btn btn-ghost">
          <i className="fa-solid fa-bars text-lg"></i>
        </button>

        <ul tabIndex="0" className="dropdown-content menu z-[1] bg-base-200 p-6 rounded-box shadow w-56 gap-2">
          <li><a>About</a></li>
          <li><a>Pricing</a></li>
          <li><a>Blog</a></li>
          <li><a>Contact</a></li>
          <a className="btn btn-sm btn-primary">Log in</a>
        </ul>
      </div>
      <div className="hidden sm:flex gap-2">
        <ThemeSwitcher />       
        {isAuthenticated ? (
          <button
            onClick={logout}
            className="btn btn-primary btn-sm"
          >
            Logout
          </button>
        ) : (
          <>
            <Link to="/register" className="btn btn-ghost btn-sm">Register</Link>
            <Link to="/login" className="btn btn-primary btn-sm">Login</Link>
          </>
        )}
      </div>
    </nav>
  );
};

export default NavBar;


==================== C:\Code\recipe-app\client\src\components\PrivateRoute.jsx ====================

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import SideBar from './SideBar';

const PrivateRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  return (
    <div className="flex grow">     
      <div className="flex flex-col px-8 py-6 grow">
        {children}
      </div>
    </div>
  );
};

export default PrivateRoute;


==================== C:\Code\recipe-app\client\src\components\RecipeBookTable.jsx ====================

// src/components/RecipeBookTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';

function RecipeBookTable() {
  const { recipeBooks, authors, deleteRecipeBook } = useData();

  const handleDelete = async (bookId) => {
    if (window.confirm('Are you sure you want to delete this book?')) {
      try {
        await deleteRecipeBook(bookId);
      } catch (error) {
        alert('Failed to delete book');
      }
    }
  };

  const getAuthorName = (authorId) => {
    const author = authors.find(author => author.AuthorID === authorId);
    return author ? author.AuthorName : 'Unknown';
  };

  const headers = ['#', 'Book Name', 'Author Name', 'Actions'];

  const data = useMemo(() => 
    recipeBooks.map((book, index) => ({
      id: book.BookID,
      cells: [
        index + 1,
        book.BookName,
        getAuthorName(book.AuthorID),
        <DeleteButton onClick={() => handleDelete(book.BookID)} />,
      ],
    })),
    [recipeBooks, authors]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeBookTable;


==================== C:\Code\recipe-app\client\src\components\RecipeTable.jsx ====================

// src/components/RecipeTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function RecipeTable({ onAddIngredients }) {
  const { recipes, ingredients, units, recipeIngredients, deleteRecipe } = useData();

  const handleDelete = async (recipeId) => {
    if (window.confirm('Are you sure you want to delete this recipe?')) {
      try {
        await deleteRecipe(recipeId);
      } catch (error) {
        alert('Failed to delete recipe');
      }
    }
  };

  const getIngredientName = (ingredientId) => {
    const ingredient = ingredients.find(ingredient => ingredient.IngredientID === ingredientId);
    return ingredient ? ingredient.IngredientName : 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const renderIngredients = (recipeId) => {
    const filteredIngredients = recipeIngredients.filter(ri => ri.RecipeID === recipeId);
    return filteredIngredients.map(ingredient => (
      <li key={ingredient.RecipeIngredientID}>
        {ingredient.Quantity} {getUnitName(ingredient.UnitID)} of {getIngredientName(ingredient.IngredientID)}
      </li>
    ));
  };

  const headers = ['#', 'Recipe Name', 'Author ID', 'Ingredients', 'Actions'];

  const data = useMemo(() =>
    recipes.map((recipe, index) => ({
      id: recipe.RecipeID,
      cells: [
        index + 1,
        recipe.RecipeName,
        recipe.AuthorID,
        <ul className='list-disc ml-4'>
          {renderIngredients(recipe.RecipeID)}
        </ul>,
        <div className='flex gap-2'>
          <Button
            size="sm"
            variant="primary"
            outline={true}
            onClick={() => onAddIngredients(recipe.RecipeID)}
          >
            Add Ingredients
          </Button>
          <DeleteButton onClick={() => handleDelete(recipe.RecipeID)} />
        </div>
      ],
    })),
    [recipes, recipeIngredients, ingredients, units]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeTable;


==================== C:\Code\recipe-app\client\src\components\ShoppingList.jsx ====================

// src/components/ShoppingList.jsx

import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';

function ShoppingList({ mealPlanId }) {
    const { getShoppingList } = useData();
    const shoppingList = getShoppingList(mealPlanId);

    const headers = ['Ingredient Name', 'Quantity', 'Unit'];

    const data = shoppingList.map((ingredient) => ({
        id: ingredient.IngredientID,
        cells: [
            ingredient.IngredientName,
            ingredient.Quantity,
            ingredient.unit ? ingredient.unit.UnitName : 'Unknown'
        ],
    }));

    return (
        <div className="overflow-x-auto">
            <Table headers={headers} data={data} />
        </div>
    );
}

export default ShoppingList;


==================== C:\Code\recipe-app\client\src\components\ShoppingListModal.jsx ====================

// src/components/ShoppingListModal.jsx

import React from 'react';
import Modal from './ui/Modal';

function ShoppingListModal({ shoppingList }) {
    return (
        <Modal id="shopping_list_modal" title="Generated Shopping List">
            {shoppingList ? (
                <ul className="list-disc ml-4">
                    {shoppingList.map((item, index) => (
                        <li key={index}>{item.Quantity} {item.UnitName} of {item.IngredientName}</li>
                    ))}
                </ul>
            ) : (
                <p>No items in the shopping list.</p>
            )}
        </Modal>
    );
}

export default ShoppingListModal;


==================== C:\Code\recipe-app\client\src\components\SideBar.jsx ====================

// src/components/SideBar.jsx

import React from "react";
import { NavLink } from "react-router-dom";
import { FaTachometerAlt, FaList, FaSitemap, FaLeaf, FaBook, FaUser, FaUtensils, FaCalendarAlt } from "react-icons/fa";

const menuItems = [
  { title: "Ingredients", isTitle: true },
  { title: "Categories", link: "/admin/manage-categories", Icon: FaList },
  { title: "Sub-categories", link: "/admin/manage-sub-categories", Icon: FaSitemap },
  { title: "Ingredients", link: "/admin/manage-ingredients", Icon: FaLeaf },
  { title: "Recipes", isTitle: true },
  { title: "Recipes", link: "/admin/manage-recipes", Icon: FaUtensils },
  { title: "Authors", link: "/admin/manage-authors", Icon: FaUser },
  { title: "Recipe books", link: "/admin/manage-recipe-books", Icon: FaBook },
  { title: "Meal Plans", link: "/admin/manage-meal-plans", Icon: FaCalendarAlt },
];

const MenuItem = ({ item }) => {
  if (item.isTitle) {
    return <li className="menu-title">{item.title}</li>;
  }

  const { Icon } = item;

  return (
    <li>
      <NavLink to={item.link} className={({ isActive }) => (isActive ? "active" : "")}>
        <Icon className="inline mr-2" />
        {item.title}
      </NavLink>
    </li>
  );
};

export default function SideBar() {
  return (
    <aside className="sticky top-0 overflow-y-auto w-60 bg-base-200 p-4 min-w-60">
      <ul className="menu px-0 gap-1">
        {menuItems.map((item, index) => (
          <MenuItem key={index} item={item} />
        ))}
      </ul>
    </aside>
  );
}


==================== C:\Code\recipe-app\client\src\components\SubCategoryTable.jsx ====================

// src/components/SubCategoryTable.jsx
import React, { useState, useMemo } from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function SubCategoryTable() {
  const [selectedCategories, setSelectedCategories] = useState([]);
  const { categories, subCategories, deleteSubCategory } = useData();

  const handleDelete = async (subCategoryId) => {
    if (window.confirm('Are you sure you want to delete this sub-category?')) {
      try {
        await deleteSubCategory(subCategoryId);
      } catch (error) {
        alert('Failed to delete sub-category');
      }
    }
  };

  const getCategoryName = (categoryId) => {
    const category = categories.find(category => category.CategoryID === categoryId);
    return category ? category.CategoryName : 'Unknown';
  };

  const handleCategoryChange = (e) => {
    const selectedValue = parseInt(e.target.value);
    setSelectedCategories(prevSelected =>
      prevSelected.includes(selectedValue)
        ? prevSelected.filter(id => id !== selectedValue)
        : [...prevSelected, selectedValue]
    );
  };

  const filteredSubCategories = useMemo(() => 
    selectedCategories.length > 0
      ? subCategories.filter(subCategory => selectedCategories.includes(subCategory.CategoryID))
      : subCategories,
    [subCategories, selectedCategories]
  );

  const headers = ['#', 'Sub-Category Name', 'Category Name', 'Actions'];

  const data = useMemo(() =>
    filteredSubCategories.map((subCategory, index) => ({
      id: subCategory.SubCategoryID,
      cells: [
        index + 1,
        subCategory.SubCategoryName,
        getCategoryName(subCategory.CategoryID),
        <DeleteButton key={subCategory.SubCategoryID} onClick={() => handleDelete(subCategory.SubCategoryID)} />
      ],
    })),
    [filteredSubCategories, categories]
  );

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center mb-4">
        <label className="mr-2">Filter by Category:</label>
        <select
          className="select select-bordered"
          value=""
          onChange={handleCategoryChange}
        >
          <option value="" disabled>Select Categories</option>
          {categories.map(category => (
            <option
              key={category.CategoryID}
              value={category.CategoryID}
              disabled={selectedCategories.includes(category.CategoryID)}
            >
              {category.CategoryName}
            </option>
          ))}
        </select>
      </div>
      <div className="mb-4">
        {selectedCategories.map(categoryId => (
          <div key={categoryId} className="badge badge-primary mr-2">
            {getCategoryName(categoryId)}
            <button
              type="button"
              className="ml-1"
              onClick={() => setSelectedCategories(selectedCategories.filter(id => id !== categoryId))}
            >
              ✕
            </button>
          </div>
        ))}
      </div>
      <Table headers={headers} data={data} />
    </div>
  );
}

export default SubCategoryTable;


==================== C:\Code\recipe-app\client\src\components\ThemeSwitcher.jsx ====================

import React, { useEffect, useState } from 'react';

const ThemeSwitcher = () => {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
      setTheme(savedTheme);
    }
  }, []);

  const handleThemeChange = (event) => {
    const selectedTheme = event.target.value;
    document.documentElement.setAttribute('data-theme', selectedTheme);
    localStorage.setItem('theme', selectedTheme);
    setTheme(selectedTheme);
  };

  return (   
    <div className="dropdown dropdown-end">
      <select className="btn btn-ghost btn-sm" value={theme} onChange={handleThemeChange}>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
        <option value="cupcake">Cupcake</option>
        <option value="bumblebee">Bumblebee</option>
        <option value="emerald">Emerald</option>
        <option value="corporate">Corporate</option>
        <option value="synthwave">Synthwave</option>
        <option value="retro">Retro</option>
        <option value="cyberpunk">Cyberpunk</option>
        <option value="valentine">Valentine</option>
        <option value="halloween">Halloween</option>
        <option value="garden">Garden</option>
        <option value="forest">Forest</option>
        <option value="aqua">Aqua</option>
        <option value="lofi">Lofi</option>
        <option value="pastel">Pastel</option>
        <option value="fantasy">Fantasy</option>
        <option value="wireframe">Wireframe</option>
        <option value="black">Black</option>
        <option value="luxury">Luxury</option>
        <option value="dracula">Dracula</option>
        <option value="cmyk">CMYK</option>
        <option value="autumn">Autumn</option>
        <option value="business">Business</option>
        <option value="acid">Acid</option>
        <option value="lemonade">Lemonade</option>
        <option value="night">Night</option>
        <option value="coffee">Coffee</option>
        <option value="winter">Winter</option>
      </select>
    </div>
  );
};

export default ThemeSwitcher;


==================== C:\Code\recipe-app\client\src\components\ui\Button.jsx ====================

// src/components/ui/Button.jsx
import React from 'react';

const Button = ({ type, variant = 'primary', size = 'md', outline = false, block = false, circle = false, square = false, className = '', onClick, children }) => {
  const baseClass = 'btn';
  const variantClass = `btn-${variant}`;
  const sizeClass = `btn-${size}`;
  const outlineClass = outline ? 'btn-outline' : '';
  const blockClass = block ? 'btn-block' : '';
  const circleClass = circle ? 'btn-circle' : '';
  const squareClass = square ? 'btn-square' : '';

  const classes = `${baseClass} ${variantClass} ${sizeClass} ${outlineClass} ${blockClass} ${circleClass} ${squareClass} ${className}`;

  return (
    <button type={type} className={classes} onClick={onClick}>
      {children}
    </button>
  );
};

export default Button;


==================== C:\Code\recipe-app\client\src\components\ui\Card.jsx ====================

// src/components/ui/Card.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import Button from './Button';

const Card = ({ title, count, link, children }) => {
    return (
        <div className="card bg-base-100 w-96 shadow-xl">
            <div className="card-body">
                <h2 className="card-title">{title}</h2>
                {count && <p className="text-2xl font-bold">{count}</p>}
                {children}
                <div className="card-actions justify-end">
                    <Link to={link}>
                        <Button
                            variant='secondary'
                            outline={true}
                        >
                            Manage
                        </Button>
                    </Link>
                </div>
            </div>
        </div>
    );
};

export default Card;


==================== C:\Code\recipe-app\client\src\components\ui\DeleteButton.jsx ====================

// src/components/ui/DeleteButton.jsx
import React from 'react';
import Button from './Button';

const DeleteButton = ({ onClick }) => (
  <Button
    size="sm"
    variant="error"
    outline={true}
    onClick={onClick}
  >
    Delete
  </Button>
);

export default DeleteButton;


==================== C:\Code\recipe-app\client\src\components\ui\Modal.jsx ====================

import React from 'react';

const Modal = ({ id, title, children, wide }) => {
    const modalBoxClass = wide ? 'modal-box w-11/12 max-w-5xl' : 'modal-box';
    const modalClass = wide ? 'modal' : 'modal modal-bottom sm:modal-middle';

    return (
        <dialog id={id} className={modalClass}>
            <div className={modalBoxClass}>
                <form method="dialog">
                    <button className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <h3 className="font-bold text-lg">{title}</h3>
                {children}
            </div>
        </dialog>
    );
};

export default Modal;


==================== C:\Code\recipe-app\client\src\components\ui\Select.jsx ====================

// src/components/ui/Select.jsx
import React from 'react';

const Select = ({ label, value, onChange, required, options, defaultOption, disabled }) => {
  return (
    <label className="form-control">
      <div className="label">
        <span className="label-text">{label}</span>
      </div>
      <select
        className="select select-bordered"
        value={value}
        onChange={onChange}
        required={required}
        disabled={disabled}
      >
        <option value="" disabled>{defaultOption}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value} disabled={option.disabled}>
            {option.label}
          </option>
        ))}
      </select>
    </label>
  );
};

export default Select;


==================== C:\Code\recipe-app\client\src\components\ui\Table.jsx ====================

// src/components/ui/Table.jsx
import React, { useState } from 'react';
import { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';

const Table = ({ headers, data }) => {
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'ascending' });

  const sortedData = React.useMemo(() => {
    let sortableData = [...data];
    if (sortConfig.key) {
      sortableData.sort((a, b) => {
        const aKey = a.cells[headers.indexOf(sortConfig.key)];
        const bKey = b.cells[headers.indexOf(sortConfig.key)];

        if (aKey < bKey) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aKey > bKey) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableData;
  }, [data, sortConfig, headers]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (header) => {
    if (sortConfig.key === header) {
      return sortConfig.direction === 'ascending' ? <FaSortUp /> : <FaSortDown />;
    }
    return <FaSort />;
  };

  return (
    <div className="overflow-x-auto">
      <table className="table table-zebra">
        <thead>
          <tr>
            {headers.map((header, index) => (
              <th key={index} onClick={() => requestSort(header)} className="cursor-pointer">
                <div className="flex items-center">
                  {header}
                  <span className="ml-2">{getSortIcon(header)}</span>
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row, rowIndex) => (
            <tr key={row.id || rowIndex}>
              {row.cells.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Table;


==================== C:\Code\recipe-app\client\src\components\ui\TextInput.jsx ====================

import React from 'react';

const TextInput = ({ label, type = 'text', value, onChange, required = false, placeholder = '', className = 'input input-bordered', min, max }) => {
  return (
    <label className="form-control">
      {label && (
        <div className="label">
          <span className="label-text">{label}</span>
        </div>
      )}
      <input
        type={type}
        className={className}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
        min={min}
        max={max}
      />
    </label>
  );
};

export default TextInput;


==================== C:\Code\recipe-app\client\src\context\AuthContext.jsx ====================

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const storedAuth = localStorage.getItem('isAuthenticated');
    if (storedAuth === 'true') {
      setIsAuthenticated(true);
    }
    setLoading(false); // Indicate that the auth status has been checked
  }, []);

  const login = async (username, password) => {
    const response = await fetch('http://localhost:8000/api/users/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Password: password }),
    });

    if (response.ok) {
      setIsAuthenticated(true);
      localStorage.setItem('isAuthenticated', 'true');
      navigate('/');
    } else {
      alert('Login failed');
    }
  };

  const logout = () => {
    setIsAuthenticated(false);
    localStorage.removeItem('isAuthenticated');
    navigate('/login');
  };

  if (loading) {
    return <div>Loading...</div>; // Display a loading message or spinner while checking auth status
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


==================== C:\Code\recipe-app\client\src\context\DataContext.jsx ====================

import React, { createContext, useContext, useEffect, useState } from 'react';
import * as apiService from '../services/apiService';

const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [authors, setAuthors] = useState([]);
  const [recipeBooks, setRecipeBooks] = useState([]);
  const [recipes, setRecipes] = useState([]);
  const [units, setUnits] = useState([]);
  const [recipeIngredients, setRecipeIngredients] = useState([]);
  const [mealPlans, setMealPlans] = useState([]);
  const [mealPlanRecipes, setMealPlanRecipes] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [
          categoriesData,
          subCategoriesData,
          ingredientsData,
          authorsData,
          recipeBooksData,
          recipesData,
          unitsData,
          recipeIngredientsData,
          mealPlansData,
          mealPlanRecipesData,
        ] = await Promise.all([
          apiService.getCategories(),
          apiService.getSubCategories(),
          apiService.getIngredients(),
          apiService.getAuthors(),
          apiService.getRecipeBooks(),
          apiService.getRecipes(),
          apiService.getUnits(),
          apiService.getRecipeIngredients(),
          apiService.getMealPlans(),
          apiService.getMealPlanRecipes(),
        ]);

        setCategories(categoriesData);
        setSubCategories(subCategoriesData);
        setIngredients(ingredientsData);
        setAuthors(authorsData);
        setRecipeBooks(recipeBooksData);
        setRecipes(recipesData);
        setUnits(unitsData);
        setRecipeIngredients(recipeIngredientsData);
        setMealPlans(mealPlansData);
        setMealPlanRecipes(mealPlanRecipesData);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  // Categories CRUD
  const createCategory = async (categoryName) => {
    try {
      const newCategory = await apiService.addCategory(categoryName);
      setCategories([...categories, newCategory]);
    } catch (error) {
      console.error('Error adding category:', error);
    }
  };

  const updateCategory = async (categoryId, categoryName) => {
    try {
      const updatedCategory = await apiService.updateCategory(categoryId, categoryName);
      setCategories(categories.map(cat => (cat.CategoryID === categoryId ? updatedCategory : cat)));
    } catch (error) {
      console.error('Error updating category:', error);
    }
  };

  const deleteCategory = async (categoryId) => {
    try {
      await apiService.deleteCategory(categoryId);
      setCategories(categories.filter(cat => cat.CategoryID !== categoryId));
    } catch (error) {
      console.error('Error deleting category:', error);
    }
  };

  // SubCategories CRUD
  const createSubCategory = async (subCategory) => {
    try {
      const newSubCategory = await apiService.addSubCategory(subCategory);
      setSubCategories([...subCategories, newSubCategory]);
    } catch (error) {
      console.error('Error adding subcategory:', error);
    }
  };

  const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    try {
      const updatedSubCategory = await apiService.updateSubCategory(subCategoryId, subCategoryName, categoryId);
      setSubCategories(subCategories.map(sub => (sub.SubCategoryID === subCategoryId ? updatedSubCategory : sub)));
    } catch (error) {
      console.error('Error updating subcategory:', error);
    }
  };

  const deleteSubCategory = async (subCategoryId) => {
    try {
      await apiService.deleteSubCategory(subCategoryId);
      setSubCategories(subCategories.filter(sub => sub.SubCategoryID !== subCategoryId));
    } catch (error) {
      console.error('Error deleting subcategory:', error);
    }
  };

  // Ingredients CRUD
  const createIngredient = async (ingredient) => {
    try {
      const newIngredient = await apiService.addIngredient(ingredient);
      setIngredients([...ingredients, newIngredient]);
    } catch (error) {
      console.error('Error adding ingredient:', error);
    }
  };

  const updateIngredient = async (ingredientId, ingredient) => {
    try {
      const updatedIngredient = await apiService.updateIngredient(ingredientId, ingredient);
      setIngredients(ingredients.map(ing => (ing.IngredientID === ingredientId ? updatedIngredient : ing)));
    } catch (error) {
      console.error('Error updating ingredient:', error);
    }
  };

  const deleteIngredient = async (ingredientId) => {
    try {
      await apiService.deleteIngredient(ingredientId);
      setIngredients(ingredients.filter(ing => ing.IngredientID !== ingredientId));
    } catch (error) {
      console.error('Error deleting ingredient:', error);
    }
  };

  // Authors CRUD
  const createAuthor = async (authorName, authorImageURL) => {
    try {
      const newAuthor = await apiService.addAuthor(authorName, authorImageURL);
      setAuthors([...authors, newAuthor]);
    } catch (error) {
      console.error('Error adding author:', error);
    }
  };

  const updateAuthor = async (authorId, author) => {
    try {
      const updatedAuthor = await apiService.updateAuthor(authorId, author);
      setAuthors(authors.map(auth => (auth.AuthorID === authorId ? updatedAuthor : auth)));
    } catch (error) {
      console.error('Error updating author:', error);
    }
  };

  const deleteAuthor = async (authorId) => {
    try {
      await apiService.deleteAuthor(authorId);
      setAuthors(authors.filter(auth => auth.AuthorID !== authorId));
    } catch (error) {
      console.error('Error deleting author:', error);
    }
  };

  // Recipe Books CRUD
  const createRecipeBook = async (recipeBook) => {
    try {
      const newRecipeBook = await apiService.addRecipeBook(recipeBook);
      setRecipeBooks([...recipeBooks, newRecipeBook]);
    } catch (error) {
      console.error('Error adding recipe book:', error);
    }
  };

  const updateRecipeBook = async (recipeBookId, recipeBook) => {
    try {
      const updatedRecipeBook = await apiService.updateRecipeBook(recipeBookId, recipeBook);
      setRecipeBooks(recipeBooks.map(book => (book.BookID === recipeBookId ? updatedRecipeBook : book)));
    } catch (error) {
      console.error('Error updating recipe book:', error);
    }
  };

  const deleteRecipeBook = async (recipeBookId) => {
    try {
      await apiService.deleteRecipeBook(recipeBookId);
      setRecipeBooks(recipeBooks.filter(book => book.BookID !== recipeBookId));
    } catch (error) {
      console.error('Error deleting recipe book:', error);
    }
  };

  // Recipes CRUD
  const createRecipe = async (recipe) => {
    try {
      const newRecipe = await apiService.addRecipe(recipe);
      setRecipes([...recipes, newRecipe]);
    } catch (error) {
      console.error('Error adding recipe:', error);
      throw error; // Ensure to rethrow the error to be caught in the component
    }
  };

  const updateRecipe = async (recipeId, recipe) => {
    try {
      const updatedRecipe = await apiService.updateRecipe(recipeId, recipe);
      setRecipes(recipes.map(rec => (rec.RecipeID === recipeId ? updatedRecipe : rec)));
    } catch (error) {
      console.error('Error updating recipe:', error);
    }
  };

  const deleteRecipe = async (recipeId) => {
    try {
      await apiService.deleteRecipe(recipeId);
      setRecipes(recipes.filter(rec => rec.RecipeID !== recipeId));
    } catch (error) {
      console.error('Error deleting recipe:', error);
    }
  };

  const createRecipeIngredient = async (recipeIngredient) => {
    try {
      const newRecipeIngredient = await apiService.addRecipeIngredient(recipeIngredient);
      setRecipeIngredients([...recipeIngredients, newRecipeIngredient]);
    } catch (error) {
      console.error('Error adding recipe ingredient:', error);
    }
  };

  // Meal Plans CRUD
  const createMealPlan = async (mealPlan) => {
    try {
      const newMealPlan = await apiService.addMealPlan(mealPlan);
      setMealPlans([...mealPlans, newMealPlan]);
    } catch (error) {
      console.error('Error adding meal plan:', error);
    }
  };

  const updateMealPlan = async (mealPlanId, mealPlan) => {
    try {
      const updatedMealPlan = await apiService.updateMealPlan(mealPlanId, mealPlan);
      setMealPlans(mealPlans.map(mp => (mp.MealPlanID === mealPlanId ? updatedMealPlan : mp)));
    } catch (error) {
      console.error('Error updating meal plan:', error);
    }
  };

  const deleteMealPlan = async (mealPlanId) => {
    try {
      await apiService.deleteMealPlan(mealPlanId);
      setMealPlans(mealPlans.filter(mp => mp.MealPlanID !== mealPlanId));
    } catch (error) {
      console.error('Error deleting meal plan:', error);
    }
  };

  // Meal Plan Recipes CRUD
  const createMealPlanRecipe = async (mealPlanRecipe) => {
    try {
      const newMealPlanRecipe = await apiService.addMealPlanRecipe(mealPlanRecipe);
      setMealPlanRecipes([...mealPlanRecipes, newMealPlanRecipe]);
    } catch (error) {
      console.error('Error adding meal plan recipe:', error);
    }
  };

  const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    try {
      const updatedMealPlanRecipe = await apiService.updateMealPlanRecipe(mealPlanRecipeId, mealPlanRecipe);
      setMealPlanRecipes(prev => prev.map(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId ? updatedMealPlanRecipe : mpr));
    } catch (error) {
      console.error('Error updating meal plan recipe:', error);
    }
  };

  const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    try {
      await apiService.deleteMealPlanRecipe(mealPlanRecipeId);
      setMealPlanRecipes(mealPlanRecipes.filter(mpr => mpr.MealPlanRecipeID !== mealPlanRecipeId));
    } catch (error) {
      console.error('Error deleting meal plan recipe:', error);
    }
  };

  const getShoppingList = (mealPlanId) => {
    const filteredMealPlanRecipes = mealPlanRecipes.filter(mpr => mpr.MealPlanID === mealPlanId);

    const ingredientMap = new Map();

    filteredMealPlanRecipes.forEach(mpr => {
      const recipeId = mpr.RecipeID;
      const recipeIngredientsForRecipe = recipeIngredients.filter(ri => ri.RecipeID === recipeId);

      recipeIngredientsForRecipe.forEach(ri => {
        const ingredient = ingredients.find(ing => ing.IngredientID === ri.IngredientID);
        const unit = units.find(unit => unit.UnitID === ri.UnitID);
        if (ingredient) {
          const existing = ingredientMap.get(ingredient.IngredientID);
          if (existing) {
            existing.Quantity += ri.Quantity;
          } else {
            ingredientMap.set(ingredient.IngredientID, {
              ...ingredient,
              Quantity: ri.Quantity,
              unit: unit || { UnitName: 'Unknown' }
            });
          }
        }
      });
    });

    return Array.from(ingredientMap.values());
  };

  return (
    <DataContext.Provider
      value={{
        categories, createCategory, updateCategory, deleteCategory,
        subCategories, createSubCategory, updateSubCategory, deleteSubCategory,
        ingredients, createIngredient, updateIngredient, deleteIngredient,
        authors, createAuthor, updateAuthor, deleteAuthor,
        recipeBooks, createRecipeBook, updateRecipeBook, deleteRecipeBook,
        recipes, createRecipe, updateRecipe, deleteRecipe,
        units, recipeIngredients, createRecipeIngredient,
        mealPlans, createMealPlan, updateMealPlan, deleteMealPlan,
        mealPlanRecipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe,
        getShoppingList,
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => useContext(DataContext);


==================== C:\Code\recipe-app\client\src\pages\Dashboard.jsx ====================

// src/pages/Home.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';

function Dashboard() {
  const { categories, subCategories, ingredients, authors, recipeBooks, recipes } = useData();

  const items = [
    { name: 'Categories', count: categories.length, link: '/manage-categories' },
    { name: 'Subcategories', count: subCategories.length, link: '/manage-sub-categories' },
    { name: 'Ingredients', count: ingredients.length, link: '/manage-ingredients' },
    { name: 'Authors', count: authors.length, link: '/manage-authors' },
    { name: 'Recipe Books', count: recipeBooks.length, link: '/manage-recipe-books' },
    { name: 'Recipes', count: recipes.length, link: '/manage-recipes' },
  ];

  return (
    <div className="flex flex-wrap gap-4 p-6">
      {items.map((item, index) => (
        <Card key={index} title={item.name} count={item.count} link={item.link} />
      ))}
    </div>
  );
}

export default Dashboard;


==================== C:\Code\recipe-app\client\src\pages\Home.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import AddMealPlanModal from '../components/AddMealPlanModal';
import { format, isWithinInterval, parseISO, startOfWeek, endOfWeek, isFuture, isPast } from 'date-fns';
import { Link } from 'react-router-dom';

const Home = () => {
  const { mealPlans } = useData();
  const [isModalOpen, setIsModalOpen] = useState(false);

  const categorizeMealPlans = (mealPlans) => {
    const now = new Date();
    const currentWeekStart = startOfWeek(now, { weekStartsOn: 1 });
    const currentWeekEnd = endOfWeek(now, { weekStartsOn: 1 });

    const currentWeekPlans = mealPlans.filter(plan =>
      isWithinInterval(parseISO(plan.StartDate), { start: currentWeekStart, end: currentWeekEnd }) ||
      isWithinInterval(parseISO(plan.EndDate), { start: currentWeekStart, end: currentWeekEnd })
    );

    const upcomingPlans = mealPlans.filter(plan =>
      isFuture(parseISO(plan.StartDate)) && !currentWeekPlans.includes(plan)
    );

    const previousPlans = mealPlans.filter(plan =>
      isPast(parseISO(plan.EndDate)) && !currentWeekPlans.includes(plan)
    );

    return { currentWeekPlans, upcomingPlans, previousPlans };
  };

  const { currentWeekPlans, upcomingPlans, previousPlans } = categorizeMealPlans(mealPlans);

  const renderMealPlanCard = (plan) => (
    <Link to={`/meal-plan/${plan.MealPlanID}`} key={plan.MealPlanID}>
      <Card title={plan.PlanName} count={1}>
        <p>Start: {format(parseISO(plan.StartDate), 'yyyy-MM-dd')}</p>
        <p>End: {format(parseISO(plan.EndDate), 'yyyy-MM-dd')}</p>
      </Card>
    </Link>
  );

  const openModal = () => {
    setIsModalOpen(true);
    document.getElementById('add_meal_plan_modal').showModal();
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Current Week</h1>
      {currentWeekPlans.length > 0 ? (
        <div className="flex flex-wrap gap-4 mb-8">
          {currentWeekPlans.map(renderMealPlanCard)}
        </div>
      ) : (
        <div className="mb-8">
          <p>No current meal plans for this week.</p>
          <Button onClick={openModal}>Add Meal Plan</Button>
        </div>
      )}

      <h2 className="text-xl font-bold mb-4">Upcoming Meal Plans</h2>
      <div className="flex flex-wrap gap-4 mb-8">
        {upcomingPlans.map(renderMealPlanCard)}
      </div>

      <h2 className="text-xl font-bold mb-4">Previous Meal Plans</h2>
      <div className="flex flex-wrap gap-4 mb-8">
        {previousPlans.map(renderMealPlanCard)}
      </div>

      {isModalOpen && <AddMealPlanModal />}
    </div>
  );
};

export default Home;


==================== C:\Code\recipe-app\client\src\pages\Login.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import TextInput from '../components/ui/TextInput';
import Button from '../components/ui/Button';

function Login() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const { login } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        await login(username, password);
    };

    return (
        <div className="flex items-start p-8 justify-center w-full">
            <div className="flex flex-col w-96 rounded-box bg-base-200 p-6 gap-4">
                <h1 className="text-3xl font-bold self-center">Log in</h1>
                {/* <span className="self-center flex gap-2">
                    Don't have an account?
                    <a className="link link-secondary" onClick={() => navigate('/register')}>Register</a>
                </span>
                <a className="btn btn-neutral">
                    <i className="fa-brands fa-google text-primary"></i>
                    Log in with Google
                </a>
                <div className="divider">OR</div> */}
                <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
                    <TextInput
                        label="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                    />
                    <label className="form-control w-full">
                        <div className="label">
                            <span className="label-text">Password</span>
                            <a className="label-text link link-accent">Forgot password?</a>
                        </div>
                        <TextInput
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </label>
                    <div className="form-control">
                        <label className="cursor-pointer label self-start gap-2">
                            <input type="checkbox" className="checkbox" />
                            <span className="label-text">Remember me</span>
                        </label>
                    </div>
                    <Button type="submit">Log in</Button>
                </form>
            </div>
        </div>
    );
}

export default Login;


==================== C:\Code\recipe-app\client\src\pages\ManageAuthors.jsx ====================

// src/pages/ManageAuthors.jsx
import React from 'react';
import AuthorTable from '../components/AuthorTable';
import AddAuthorModal from '../components/AddAuthorModal';

function ManageAuthors() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Authors</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_author_modal').showModal()}>Add Author</button>
      </div>
      <AuthorTable />
      <AddAuthorModal />
    </div>
  );
}

export default ManageAuthors;


==================== C:\Code\recipe-app\client\src\pages\ManageCategories.jsx ====================

// src/pages/ManageCategories.jsx
import React from 'react';
import CategoryTable from '../components/CategoryTable';
import AddCategoryModal from '../components/AddCategoryModal';

function ManageCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_category_modal').showModal()}>Add Category</button>
      </div>
      <CategoryTable />
      <AddCategoryModal />
    </div>
  );
}

export default ManageCategories;


==================== C:\Code\recipe-app\client\src\pages\ManageIngredients.jsx ====================

// src/pages/ManageIngredients.jsx
import React from 'react';
import IngredientTable from '../components/IngredientTable';
import AddIngredientModal from '../components/AddIngredientModal';

function ManageIngredients() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Ingredients</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_ingredient_modal').showModal()}>Add Ingredient</button>
      </div>
      <IngredientTable />
      <AddIngredientModal />
    </div>
  );
}

export default ManageIngredients;


==================== C:\Code\recipe-app\client\src\pages\ManageMealPlans.jsx ====================

// src/pages/ManageMealPlans.jsx

import React, { useState } from 'react';
import MealPlanTable from '../components/MealPlanTable';
import AddMealPlanModal from '../components/AddMealPlanModal';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';
import Calendar from '../components/Calendar';
import ShoppingList from '../components/ShoppingList';
import { useData } from '../context/DataContext';

function ManageMealPlans() {
  const [selectedMealPlan, setSelectedMealPlan] = useState(null);
  const [addingMeal, setAddingMeal] = useState(null);
  const [modifyingMeal, setModifyingMeal] = useState(null);
  const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

  const handleAddMeals = (mealPlan) => {
    setSelectedMealPlan(mealPlan);
  };

  const handleAddMeal = (date, mealType) => {
    setAddingMeal({ date, mealType });
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = async (mealPlanRecipeId, remove = false) => {
    if (remove) {
      if (window.confirm('Are you sure you want to remove this meal?')) {
        try {
          await deleteMealPlanRecipe(mealPlanRecipeId);
        } catch (error) {
          console.log(error);
          alert('Failed to remove meal');
        }
      }
    } else {
      const mealPlanRecipe = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
      if (mealPlanRecipe) {
        setModifyingMeal(mealPlanRecipe);
        setAddingMeal({
          date: mealPlanRecipe.Date,
          mealType: mealPlanRecipe.MealType,
          recipeId: mealPlanRecipe.RecipeID,
          mealPlanRecipeId: mealPlanRecipeId
        });
        document.getElementById('add_meal_plan_recipe_modal').showModal();
      } else {
        console.error('Meal plan recipe not found:', mealPlanRecipeId);
      }
    }
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Meal Plans</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_meal_plan_modal').showModal()}>Add Meal Plan</button>
      </div>
      <MealPlanTable onManageMeals={handleAddMeals} />
      {selectedMealPlan && (
        <>
          <h2 className="text-2xl font-bold mt-6">Meals for Selected Plan</h2>
          <Calendar
            mealPlan={selectedMealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === selectedMealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
          />
          <h2 className="text-2xl font-bold mt-6">Shopping List</h2>
          <ShoppingList mealPlanId={selectedMealPlan.MealPlanID} />
        </>
      )}
      <AddMealPlanModal />
      {selectedMealPlan && (
        <AddMealPlanRecipeModal
          mealPlanId={selectedMealPlan.MealPlanID}
          startDate={selectedMealPlan.StartDate}
          endDate={selectedMealPlan.EndDate}
          defaultDate={addingMeal?.date}
          defaultMealType={addingMeal?.mealType}
          defaultRecipeId={addingMeal?.recipeId}
          mealPlanRecipeId={addingMeal?.mealPlanRecipeId}
        />
      )}
    </div>
  );
}

export default ManageMealPlans;


==================== C:\Code\recipe-app\client\src\pages\ManageRecipeBooks.jsx ====================

// src/pages/ManageRecipeBooks.jsx
import React from 'react';
import RecipeBookTable from '../components/RecipeBookTable';
import AddRecipeBookModal from '../components/AddRecipeBookModal';

function ManageRecipeBooks() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipe Books</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_recipe_book_modal').showModal()}>Add Recipe Book</button>
      </div>
      <RecipeBookTable />
      <AddRecipeBookModal />
    </div>
  );
}

export default ManageRecipeBooks;


==================== C:\Code\recipe-app\client\src\pages\ManageRecipes.jsx ====================

// src/pages/ManageRecipes.jsx
import React, { useState } from 'react';
import RecipeTable from '../components/RecipeTable';
import AddRecipeModal from '../components/AddRecipeModal';
import AddRecipeIngredientModal from '../components/AddRecipeIngredientModal';
import Button from '../components/ui/Button';

function ManageRecipes() {
  const [selectedRecipeId, setSelectedRecipeId] = useState(null);

  const handleAddIngredients = (recipeId) => {
    setSelectedRecipeId(recipeId);
    document.getElementById('add_recipe_ingredient_modal').showModal();
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipes</h1>
      <div>
        <Button
          size='sm'
          variant='secondary'
          outline={true}
          onClick={() => document.getElementById('add_recipe_modal').showModal()}
        >
          Add Recipe
        </Button>       
      </div>
      <RecipeTable onAddIngredients={handleAddIngredients} />
      <AddRecipeModal />
      <AddRecipeIngredientModal recipeId={selectedRecipeId} />
    </div>
  );
}

export default ManageRecipes;


==================== C:\Code\recipe-app\client\src\pages\ManageSubCategories.jsx ====================

// src/pages/ManageSubCategories.jsx
import React from 'react';
import SubCategoryTable from '../components/SubCategoryTable';
import AddSubCategoryModal from '../components/AddSubCategoryModal';

function ManageSubCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Sub-Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_sub_category_modal').showModal()}>Add Sub-Category</button>
      </div>
      <SubCategoryTable />
      <AddSubCategoryModal />
    </div>
  );
}

export default ManageSubCategories;


==================== C:\Code\recipe-app\client\src\pages\MealPlanDetails.jsx ====================

import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { useData } from '../context/DataContext';
import Calendar from '../components/Calendar';
import Button from '../components/ui/Button';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';

const MealPlanDetails = () => {
  const { mealPlanId } = useParams();
  const { mealPlans, mealPlanRecipes, recipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe } = useData();
  const mealPlan = mealPlans.find(mp => mp.MealPlanID === parseInt(mealPlanId));
  const [selectedMeal, setSelectedMeal] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleAddMeal = (date, mealType) => {
    setSelectedMeal({ date, mealType, mealPlanRecipeId: null });
    setIsModalOpen(true);
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = (mealPlanRecipeId) => {
    const meal = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
    if (meal) {
      setSelectedMeal({
        date: meal.Date,
        mealType: meal.MealType,
        recipeId: meal.RecipeID,
        mealPlanRecipeId: meal.MealPlanRecipeID,
      });
      setIsModalOpen(true);
      document.getElementById('add_meal_plan_recipe_modal').showModal();
    }
  };

  const handleSaveMeal = async (mealPlanRecipe) => {
    if (selectedMeal.mealPlanRecipeId) {
      await updateMealPlanRecipe(selectedMeal.mealPlanRecipeId, mealPlanRecipe);
    } else {
      await createMealPlanRecipe(mealPlanRecipe);
    }
    setIsModalOpen(false);
  };

  const handleRemoveMeal = async (mealPlanRecipeId) => {
    if (window.confirm('Are you sure you want to remove this meal?')) {
      await deleteMealPlanRecipe(mealPlanRecipeId);
    }
  };

  return (
    <div className="p-6">
      {mealPlan ? (
        <>
          <h1 className="text-2xl font-bold mb-4">{mealPlan.PlanName}</h1>
          <Calendar
            mealPlan={mealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === mealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
            onRemoveMeal={handleRemoveMeal}
          />

          <AddMealPlanRecipeModal
            mealPlanId={mealPlan.MealPlanID}
            defaultDate={selectedMeal?.date}
            defaultMealType={selectedMeal?.mealType}
            defaultRecipeId={selectedMeal?.recipeId}
            mealPlanRecipeId={selectedMeal?.mealPlanRecipeId}
            onSave={handleSaveMeal}
          />
        </>
      ) : (
        <p>Meal plan not found.</p>
      )}
    </div>
  );
};

export default MealPlanDetails;


==================== C:\Code\recipe-app\client\src\pages\Register.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';

function Register() {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await fetch('http://localhost:8000/api/users/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Email: email, Password: password }),
    });

    if (response.ok) {
      await login(username, password);
    } else {
      alert('Registration failed');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="p-8 bg-white rounded shadow-md w-96">
        <h2 className="mb-4 text-2xl font-bold text-center">Register</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block mb-1">Username</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <button type="submit" className="w-full py-2 text-white bg-green-500 rounded hover:bg-green-600">
            Register
          </button>
        </form>
      </div>
    </div>
  );
}

export default Register;


==================== C:\Code\recipe-app\client\src\services\apiService.js ====================

import { supabase } from '../supabaseClient';

// Categories
export const getCategories = async () => {
    const { data, error } = await supabase.from('IngredientCategories').select('*');
    if (error) throw error;
    return data;
};

export const addCategory = async (categoryName) => {
    const { data, error } = await supabase
        .from('IngredientCategories')
        .insert([{ CategoryName: categoryName }])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateCategory = async (categoryId, categoryName) => {
    const { data, error } = await supabase
        .from('IngredientCategories')
        .update({ CategoryName: categoryName })
        .eq('CategoryID', categoryId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteCategory = async (categoryId) => {
    const { data, error } = await supabase.from('IngredientCategories').delete().eq('CategoryID', categoryId).select();
    if (error) throw error;
    return data;
};

// SubCategories
export const getSubCategories = async () => {
    const { data, error } = await supabase.from('IngredientSubCategories').select('*');
    if (error) throw error;
    return data;
};

export const addSubCategory = async (subCategory) => {
    const { data, error } = await supabase
        .from('IngredientSubCategories')
        .insert([subCategory])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    const { data, error } = await supabase
        .from('IngredientSubCategories')
        .update({ SubCategoryName: subCategoryName, CategoryID: categoryId })
        .eq('SubCategoryID', subCategoryId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteSubCategory = async (subCategoryId) => {
    const { data, error } = await supabase.from('IngredientSubCategories').delete().eq('SubCategoryID', subCategoryId).select();
    if (error) throw error;
    return data;
};

// Ingredients
export const getIngredients = async () => {
    const { data, error } = await supabase.from('Ingredients').select('*');
    if (error) throw error;
    return data;
};

export const addIngredient = async (ingredient) => {
    const { data, error } = await supabase
        .from('Ingredients')
        .insert([ingredient])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateIngredient = async (ingredientId, ingredient) => {
    const { data, error } = await supabase
        .from('Ingredients')
        .update(ingredient)
        .eq('IngredientID', ingredientId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteIngredient = async (ingredientId) => {
    const { data, error } = await supabase.from('Ingredients').delete().eq('IngredientID', ingredientId).select();
    if (error) throw error;
    return data;
};

// Authors
export const getAuthors = async () => {
    const { data, error } = await supabase.from('RecipeAuthors').select('*');
    if (error) throw error;
    return data;
};

export const addAuthor = async (authorName, authorImageURL) => {
    const { data, error } = await supabase
        .from('RecipeAuthors')
        .insert([{ AuthorName: authorName, AuthorImageURL: authorImageURL }])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateAuthor = async (authorId, author) => {
    const { data, error } = await supabase
        .from('RecipeAuthors')
        .update(author)
        .eq('AuthorID', authorId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteAuthor = async (authorId) => {
    const { data, error } = await supabase.from('RecipeAuthors').delete().eq('AuthorID', authorId).select();
    if (error) throw error;
    return data;
};

// Recipe Books
export const getRecipeBooks = async () => {
    const { data, error } = await supabase.from('RecipeBooks').select('*');
    if (error) throw error;
    return data;
};

export const addRecipeBook = async (recipeBook) => {
    const { data, error } = await supabase
        .from('RecipeBooks')
        .insert([recipeBook])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateRecipeBook = async (recipeBookId, recipeBook) => {
    const { data, error } = await supabase
        .from('RecipeBooks')
        .update(recipeBook)
        .eq('BookID', recipeBookId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteRecipeBook = async (recipeBookId) => {
    const { data, error } = await supabase.from('RecipeBooks').delete().eq('BookID', recipeBookId).select();
    if (error) throw error;
    return data;
};

// Recipes
export const getRecipes = async () => {
    const { data, error } = await supabase.from('Recipes').select('*');
    if (error) throw error;
    return data;
};

export const addRecipe = async (recipe) => {
    console.log('Inserting recipe:', recipe);
    const { data, error } = await supabase
        .from('Recipes')
        .insert([recipe])
        .select(); // Ensure to select the inserted rows
    console.log('Supabase insert response:', { data, error });
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateRecipe = async (recipeId, recipe) => {
    const { data, error } = await supabase
        .from('Recipes')
        .update(recipe)
        .eq('RecipeID', recipeId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteRecipe = async (recipeId) => {
    const { data, error } = await supabase.from('Recipes').delete().eq('RecipeID', recipeId).select();
    if (error) throw error;
    return data;
};

// Units
export const getUnits = async () => {
    const { data, error } = await supabase.from('Units').select('*');
    if (error) throw error;
    return data;
};

// Recipe Ingredients
export const getRecipeIngredients = async () => {
    const { data, error } = await supabase.from('RecipeIngredients').select('*');
    if (error) throw error;
    return data;
};

export const addRecipeIngredient = async (recipeIngredient) => {
    const { data, error } = await supabase
        .from('RecipeIngredients')
        .insert([recipeIngredient])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

// Meal Plans
export const getMealPlans = async () => {
    const { data, error } = await supabase.from('MealPlans').select('*');
    if (error) throw error;
    return data;
};

export const addMealPlan = async (mealPlan) => {
    console.log('Inserting meal plan:', mealPlan);
    const { data, error } = await supabase
        .from('MealPlans')
        .insert([mealPlan])
        .select(); // Ensure to select the inserted rows
    console.log('Supabase insert response:', { data, error });
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateMealPlan = async (mealPlanId, mealPlan) => {
    const { data, error } = await supabase
        .from('MealPlans')
        .update(mealPlan)
        .eq('MealPlanID', mealPlanId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteMealPlan = async (mealPlanId) => {
    const { data, error } = await supabase.from('MealPlans')
        .delete()
        .eq('MealPlanID', mealPlanId)
        .select();
    if (error) throw error;
    return data;
};

// Meal Plan Recipes
export const getMealPlanRecipes = async () => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .select('*');
    if (error) throw error;
    return data;
};

export const addMealPlanRecipe = async (mealPlanRecipe) => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .insert([mealPlanRecipe])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .update(mealPlanRecipe)
        .eq('MealPlanRecipeID', mealPlanRecipeId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    const { data, error } = await supabase.from('MealPlanRecipes').delete().eq('MealPlanRecipeID', mealPlanRecipeId).select();
    if (error) throw error;
    return data;
};


==================== C:\Code\recipe-app\client\src\utils\cache.js ====================

// src/utils/cache.js

class Cache {
    constructor() {
      this.cache = {};
    }
  
    set(key, data) {
      this.cache[key] = {
        data,
        timestamp: new Date().getTime(),
      };
    }
  
    get(key, expiryTime = 180000) { // default expiry time is 180 seconds
      const cachedItem = this.cache[key];
      if (cachedItem && (new Date().getTime() - cachedItem.timestamp < expiryTime)) {
        return cachedItem.data;
      }
      return null;
    }
  
    invalidate(key) {
      delete this.cache[key];
    }
  }
  
  const cache = new Cache();
  export default cache;
  

==================== C:\Code\recipe-app\output_frontend.txt ====================



==================== C:\Code\recipe-app\frontend\.eslintrc.cjs ====================

module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}


==================== C:\Code\recipe-app\frontend\index.html ====================

<!doctype html>
<html lang="en" data-theme="cupcake">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


==================== C:\Code\recipe-app\frontend\postcss.config.js ====================

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


==================== C:\Code\recipe-app\frontend\public.zip ====================

PK    [áXÀà.  6  
   .eslintrc.cjsQ»nÃ0ÜûÜ´ÄN©0Ð©èÜE¢b34(:ù÷ÒRÒZ  ÇÃÝ±ãfXâ¡gÑ÷pºf­@eÀUH»
N°ÞGK0ÎgóY®àpEjboV 8¡%­kî:`ã&yÒaÕM|­Óÿæx(d m;ük^¬·ñËûø´+bÁg¯B£0×´QÝ\ÅI]Öè¸÷bözmyÄ ëÎ¿¢D«+pÁ+¦ÝÈÔørìÑº]Ïå "ª¶´JËIÛøÙ}2ÜÞsCfl¶4eKÁ¸ÎZÄHGl÷+âB½¬PEð´uÆÊËå5DS¦p,ò]Ë¦gBÒè®ç1üÞ]vÁúxÿ`æÕ>¦Åïç½djÿóÍPK    [áX¤ªõÉ   ý   
   .gitignoreeM;Â0Ý} nÀ[BcªT©]ÙiÛ!!XÞO~Ï9ó *XWhÚ×e¨ÎÂÓýyayûùç>¡ÿ8àeâ°$TQó­ªl{ s
1³û""ªñÌ-Ö[µ/+{»ÄGFÒÈ¤nT&p1 wì.]©cÖR^ÕVuk¨âý /PK    hlâX*· ó   ~  
   index.htmlEËRÃ0E÷ý
¡mI;qý Ø[4¢~d5mÿ§	Ó­ï=sÝ=ùìô62C¿ë¥£EN8²Ewû@70ù¥¨ed%pÕâçÇ¡yC0Û2H:Aá`Q\®«Öl¦ù¸¿Æ0þ±hfQnëð¡¾['Zè³ðeÌEªrª¨x¬çY7÷æ$
frØ¾¶/3
ÜUìáÉigÖÙÈü'ê¾³¿m/3·XrVì;Sûm3¹"£nqböçÀSq5F=M$Iíït]DëÓ²zWØý·ÿ PK    áX¤K í       package.json}RËrÂ0¼ókó
öÄ¡ßÑ« leNÿ½r^¥298Ú¥ÕÊ£,Ë:Bþå®RÆÊ¹ü)Îc­BâÐ@5xBkRúDò×&k*­´] ?9d@CrjmCÛîÁ¬:ªBþ2	çèé@g<8ë&h¡Ô¶>=k N9ª³8)oÐì(ôá4tícf¿á
¦D¸R_V(9°üm&rÚô ÊFìÛt-ç7¸Ðöø/¥5mÁÝÞÆÀëèï/å¬`Ã¯tÖ¯w¥nÂêFDc^Ýyåö¦È$é÷}6iq4¾Ñþ=Æàæ&yx ±«âø©T\«b°ìó;Á·E&²Óç×
é±»8e'íþf-+yC?Wr^ÈÙ,±·öº^ËÇ©¬Ùí;ë
¹^¥ÀövºxØa+óvÎlÑÍão×ìI»}¾PK    áXâu¤º  ü    package-lock.jsonÔY«ÈßçW´úÕãÂ¬6WêQ³xÃ;ÍØIv³ã«ûß»|ªìÚì:§\}[GG¹_Dddÿù¿ýö{¨æïÿøí÷ØWÃÐLÚjÿþÂLRºÎCóï±ÔtÏ¾¹yªEå¹ËAb¦MAäæ±,VuOµeÿlî§«+ß~¬1ÌØ
3ÔÁÙÀÇÝWÓô0ê¡ü÷ÿEðø©ßñU=;VÁ½ôº¶Ö=
Ç·$Q5Sù1ñ`Í³Zýëlûî4þÌTà 4ô4²:ìDú8`ç0'ô\îM3^ÌíÝ&Sì\4+@fº)û¹
ÂöóØKe¨yÅiÊLë<`0yÞÆPAZçà4 ÜhëBú |¾÷wÞ¨l¿zî= WZ¶(òÒ\âzófÙ:'õbÝóqf
Ós6¸ã¨c´i78hôd.þ°ãß5üFùAdä~ÃèOÕoj\I÷Ú~ûËK¬ïÌ%çüÂ4UNÅé? ¶
Ò,©Â8pÓ(±_
µ¯ÛÇ!2{ÿ<l£*ÓN@v4½ÔQqiNÑtÓÄd@Ñ¥æçÂî'RYh©mº²µÍæ,Í+ïÁ´+cÁ-ºeW=ÜµýÙpó5ÚÚãB:üqîßÅY9aë¥ôvx°ÿú~ÃÃ¬<4@h_vÉÿ\E6È\{Ð£ JãÆ±£$ÒçA§7ñ
â8\SÏM»z
¹p¸Û¡½!¡!÷tÝ>{ÚJF-í}k*åÈÅNz8ju×Ãaì
6Z-2RwQ3ñl
C+lcíôpZmÉIl£<>e0Y¾Fîý`ý§ Ã6KÓ÷!ÛÛÏº;¸!ú_¦³ÆY¢êæ«æöÚ®
q\Wn`¬©éCzSÖ¶ÇEë-¾ÝC°ï~ðËá¸Ï7íÇQ¯ã¥uy3^YQÄÝ½Ï¡X¾`Åx³ªsÏOÖiÕ2ãíÓ;ÈÆºT]¶øÝ|Ðo|±X;Õ² ]IùÔÏã}lÇoþÿßÈËøÚ¬¨zä7wl _ ¹$ù9A¬6¡©w"ù4þåÓÝÍ,wÜëE]ÖêvWñöÖ"ê'ÔY!"¬ó>²èåV¢âh;ÆÖ¨cO{[¶2¬S\Å!#Þ¹æª_­ää^~<zHr»oµ7iMû¡:'A¨`«¹ÐÞ$3ÖdÔWY7yÌÂt?I³®a9a©]ÖQsÊÏ«gAª&÷ýó¾ñÎ¢qHY9Ù±ç-?:µk©¨Y|ÜÌ1ý¸ÉR¦	|5k¸´35±Í,½©ß#êvÃÔà¦^WÅjW;3f¯]ÑAóXc»Öê¿Ó¤Iò²våÉãRsÓ¹cZþÈ­Ip/«iêÏA­­zºiâOØ/2öÔ6Ìñç¼õ©×YÑA^Qc¯M,ö³yþ8/ò¦ËÇüé¨ÔÛ£Ã¹~}x½O×7Ä0
0\)Î°ÚÅa_ÙÚ4ä3DßqV²( KÛXÈfÁtÞ²î,`Îgà³Áfl'6D´wÆúÒìõ«S)üÒJÍT?Y)þËxÕ2>M_o*ïklçýÊIÏÖ?¢ÒÙmVtyQÃNÜéNÖJz¾.DJtLöæk` tãØ¤fdkngÀ¾ÓQÍ¾-:$³_XyÞÊ®îv¡úÀ8:Qg'½¿ÑIK¢²	âÍ;ýqp 1ï°ÓÔUÝù±+/¾8îÝjmfX$
3ÌÚHÁ½Óûâ­íÊ­À¼µ°ahtB]£3Rúó
¦â
¢äHÕ
7T ¦´öF²Árz:$4	[4/¦çù
úrafõ«Öö*t}Ôf­Ó>ÞkËö gÅ7#Ô'¤.´ìÛ0é=_+[+{Jõ14k\HÆÝY½Ó}8÷%%kgÅ':i¿®|R
}õ¹-óúk@;QÃ§Q	P5ÿbð/GýBÔ3ì7ãq\éxÑ°ÆuÌt¬¯Ê9óaRÄ1éÊ²	ÉÌ:àÐp%ZÐú\*a>ºóËîÄ Ôª[¤HÈµ¿«Çö £ä¾ëý¥¤gå7SìQõeZ]L·ÍFJ(¨:L¨aÑ
	Ø!«.¯óå>p:êû\>2¨3×¤Xúb¿Þ	bÐ1¿î´?·úVÖ{È{ã~öøsÕÍÐa+çúå8[d7aüÖX´v	*>eNaÅEË]ÆÈÛ¢3Â0.ÍHÔ0fÍû!RâÈzW2îìLÍib5`X ÌÙu?Ìh®gz¯\ðz´iÜtQuÝLoìû kÕAFÛ0u_MÔÒÊ÷rQÐè!¸<6ø5ó}êfòÁ+ºytòÃ»>u|Êé5Tÿ®æ.çÙòÏKo6z~×%J7ëÖ{¢txúüdNÈ­7[å+"®¯é²HT­ÚGÍ²Ô
!÷¸Ä­Ö>µ¥}yTx Q¼m?ó)·*ÿ¥ÙÞMûÕQ|³þ÷45.4fæàBÚÒzD1®ØÂ¤¡<N[<ì8lWct=sV³´ iE`Ò"ôboð :#ZQ©ã«|MÿWÎ¿õJóA´¹ówdá§ÅÍÕø¦³-±°¼>%bìcjUÌÞJ²[Û[d=&æ¯ìw¹Ð
JC°lËÐD V3ÊeZïMh¦ ²FýzÎñ1ÎÃÐ§Cäû=tFó¼øfÝ¶É*)+-G;_¥ÔOaeíVY?)èq1¢¿
5[\äY
¾¯d±t"NÌueËß¶"\´&­½æÌwÑÿ;òÝ0¼%ïÆ[µ7CIøÖÖWðz¶bÙz@H²Ê½U=elî<5´ó?µ<êuýnM-»¦³ë­ç.I,CaÑ[ÐngâäY{#iaw¾÷ÝÛ+5<Ú}GYoÁx¬¹D]ÃÐ¤p
¤0ÓÖzÖuè¤Ur\ä=æ¨a¼ì5/tÌÀtÈ»Yßßm$a.y¨ïJd?÷åÿ î]<'·çs?à¸¬ÐË.Ró¯L0,Ö ºlßîí9ºïP¨ý´Âûüf[ï
ÒÛHIWpH¨W9(:¡°Û£å í­¶×ÂÎõãßóéìû;0ü1úâë9ö×ï°E.÷*Ùr©ºMsü¶²²Dz)²aàËhÔ¥¡Mw2¦tRÂ"0éuó%·Ö¡"Å§=ÔÌ ·EíéªrÍA®r¼qvVwTß;Ö!ØËW¤í,òÌÓ7ØË°Å×#wÌ1²Oæd.Ê|@,v«Ù­!º¤=ïé¥	Ç
ø=ÑL¥»Ì¼Xiì¨H©bºBI¢Q±EäÌ±ÑVZ^3
}~ßT=¾>%DnúT>µ£>mfqNßvºiÕNMßº®e8~ÜâfÀÖb¹µáÚuFbÜKgôÀ	6ßîZè% ªÅ2ÆT)dëºÈòrT6&l4TÝAâOFhìdÞp
ð­þâã"óS¯8iá?ÿøvÓ9J½b<¦Üj>²oÍ¶{e´YA=-ÍÙ.´¥Ä2â® ïLjç÷Ð"Ñ6ã±ïÆèØ
n-Za9(h?Ôl6Tc£WµÞå_vRù÷6³¬åë­äÇà1ü¸¼¹+ï¬e"0è,e
gSy´Åf16ñícI	¤Åµ ã$[êËñØô÷îÈ]¢Ëóæ
~9É»õ;¶¾ûæTðìë¨OP.oF]kÞ7ð5´¢t³/N¨èûäYò<J§ý¨µìÒýn½@³ÑEK]y+|¡Õfxñdf³Ô¨uÂùäOnEý¹Oö½ÆË®÷xýVùz{±ñSÆ~Öäü3Ä?Ô±ýHSOq)ÞÛKNz9þ©ýø÷fçúiíW`gÒçx³W,^S¥mé´î'¹[líxq]n}wÅX{ª@ù3ÌÝí
æYL·}jÇJVÎºgá_µö½<¶¼naØVeQÛR¨éý ÷Ý$©ßTPµãX'°wl¡óÀg&Þl¯Æo,âéºý8êu«×¬="õRðm»ë1Ñb5ì{Õ>qý
å jg£å4µðµdRfns&Ô é,I]_jn¾uà!PLãÂ*ô8oäý÷³.qºÿ¬çñLõ_§#6Ó~=ÞµJ!I¶÷Âø,á òùîf³,ök7^ú Nbøå§ËJò»[m±iÊmnc	7ÒÞ¢êMrÕ§[p¤Ï·Ü(cO""ôcM,¢·×íQÔñ¥ §ý}0ïçç2.~Â;õN.J¤W]C`w×*z8ÊñÐ0bËÔeáÌÉLgl·Ã`¶D~:'yñºË`òL÷ý°\CÔ5¤_íß
µº;Òêhõ	lW]ò¢8ñt9ªö_Ä=H\qÄ¶ðÚXQÂD!Îêx¢ÁÎ$ dË¼ªû¡÷H[_Sl·ÜÊ*£zÂÇ8«¿%LCMÊf+|O=Ñà<¿½g¹vJ{8¶[­)àYï³FîmbAº¯t=qV [~`£+Åõ8WÚÊ×¤óÌdXÊN6§ä^Ïûxñüz÷|ù÷ ½s>xù×l6;èÍý`²bÞ|×ÛÙBE5ºµS× ßéyEì9ÆtÈ ä±± +Ë,¿è^)¼«ßêßÒJLSKï»v^Èhp^ÜßLçt¾ªxVä¦RkÜ®Ôi¦Fãþ<dl'µ9Á¥2¶KÌÆ#U¶@-©ng)}6MfcEµ:èÜ_d5Ýs°«éÐ3=Mý ÞÏ=Ï$ýr$îÍiÞ{ÚLÊFBjtVµ=vÑfµXÉTk¼N;â£	y.D%Ä;3áéåÂÀYF]	aÍ¥­)
óq¬ýjý>óê§ñO×7cÔÿOÝµö¨Ê-é¿òæ|5nî
rE@¹È!çÇ·îÖ>mkÛ»wò&{§Y UPO]Ö*YUKåÒsÁ@ÐLbÎe\àÌ|ÚbÖÃ#1Dw¤<æÍ¢énç|3üGÉX¤æI¼t¸dí»3Úß
ãñ¡ÿ?f.üEúK¡E+cà+ïKC@Ö:mP,²Z¢Ô+N?wÀÑX²IbÂpW*Ì(´E=¥1=+î«.EÿôìçÏé[ü£X¼By<ä¢
:§LðªNèEy-Ë&,ª4]sa6æV¹!AD{©¨7SAàk¯£DÀånÎ§Z $}áêç¡ò(¿'aÄîÛåÇ+çñÃnk$Ïª]å-¹ðç î  =¤z!,4èª¦apsªóØhTWó ´}cLÞRaÊL%èÙç¾åï	jä§EuÂEõÉ+¬/'Æ·I4é#F¯ØÙx -¤È½÷·v-Î+DºÙm^wìµµyÃÖÕË¡$C­a;Ô±%2Z~ë«dþÀþdêýÃ+¤_L¿{C
0Ñ	³êTàyÚT¡GÑqPAYÞ£üFXÞ¨ªA×í×¥ Þ¬P;Ó&¹~C%Y¥"lúù²ó÷§ßÿ¹_ØÕÃyæñ
èyü0¤ðpeÐÒà$WårYG­â,Ù0 8Á:¯t~I#U 1ø¨®fxÌQ±ªzÇP41½6¡Ïï6Àþ|û"¿'¨B»ôÈáÐãèa8Ûm»6£F4â»º
ÆP£l¦NJÝCîD31rÜßHjêm×ØBÃ)	(;rqÚ0Mf´m*å2Æ
}çI O0.ðJÿÈ¯¤ |±RÓ¦¿±Y¨CíM¬UFÕdKNJ+ªúÈè4<Æ-¨Ú :ÐÚÒ3[&|j O¢ ò!®8Líä?>ø ÆNù³ 7{ßã¨'>,­HsÑ¶ùZEÛoÌ!x)Õ² QB`©ØcÖv	8§xE^Ï¢tÁYÅû ZèæJ¬D»M°? ýnOOýÃ@*Sý,öP^Ær(Ç5AìjÁ!KÍëDÅmPÌªéxÝ8
ÌþR	´¿ÄÝÜ:C½k[XNn1¢Ë	?®¦2¼lT§MþlÎýüØ?f±â¡|¥¿òõøa{7ØtÝÔp©iZn¶ÞÙÖHç[tV3Y1I8e¯ê¸U5ff1_)öÂÈzn»iÔ81ÉuhÔµráÏäñ¡ÄÚøGSzö@^ÒÝºêcZedMÖ@ÚÚòlu:q³jKÚzwªIoÞx&L'ÍèA·ÐC`|&3EöKJ-Âx$~7;ûÁ<>øóSzo^¡üRJo¦,
Dxª%K+:5ërmÎ*Ú-E à"ªIK4Ë[Û%oM]6Z°¬G.2kÈ`3áTýTáëÅçHþöÞòç\ë+ýW¿âZKe@Îz´måA/°5S¥í»1k«æ&ÀÙ½æö«~¬Fàq#äíHÐdÉ[ÑqÐÞjÞH*
)5ÿg#äÏ¸²Ñ6ÞK8ø¬úýõDíñOYí±½v<î£®ê¼¥ÈÆ'J/ÙYÞPr³*bqà¢ÓõNGLã"e3+2;5b0gXEv³0j¥½ÝÊ3%hì)@®]ýü/¥ö6NsøÀ¡?òå÷dÿÁ¿þýï¿þBAýÓñÙÞÇ¯Ý~¾=å¢IÂñûGºý£ÿþ'þè&¹ÿÀq¶³KÓÚA¿E]ÎlîËQ÷Dú¾p¼/å*¹côéZ\+#)âÆó;ÊEeªÅLñ²ùPdù*Â^òä+ BQ
s`d	J º	J©¯Éþ=-¹.ø-xÚ»(&·oþ]4ø¢ì_¿gnwïî&BH³^­Ê"(ö@}µñFÚJæ`TAS"qÌöÂ´Í<F@j% 
b4ÕÉ¹\É^0I¶r:'ø<³L¶*UÞ
ª³æïÕUãzÃÃ»iîà"~õ®w_m@~AÄõeßó60ì}îS=¬î[£ä}û è6Vïê]5èÈýÈ*íïB×7}Øvå ¦ãÄeñúÁ¯@ýºz¤SÆÏ¾éëj\]}å#[ðDgª{#8uÏî[éM0enxæK$|Ýç0èÚÅ²#â%Ò|V4Y@ÅwùÆëÙóÄæ¢!*ó­G7¦$¹ûÿìóVpØíÒ];çºûÔþßUb'CýwôG9ÜBø]óG~£»Çxo{'2÷Ñ]ÄUKï»$=µr#³Ñ~çIA¼²iÕ@
¨õ¨eÈ¹¡"'N·òpÉ÷d jÁn:Êõ¼ w vo[äï1ØOìm#+®½ä°ç® ì$^ûî~
[Í
©(=ensºWÃîÅ}H7ÈE1JÃX~°0Ef>Ós'W[ú&ÀíÄ
ã,÷ÃpSÔ c¥Æv³% .Ï¦³¢	fï ÙÛ*O7/¿^Ôçòÿòã¢t¬ÕúN4ÉòÐÞ¡[ØlfWnÿ}{ï¸_}Õè¡=OéÏéô¹äÍRYô]zÇj¯CïÎtlî+ÑrW9ªá¶X¢±Íª*Ë3×¤&é`¬°AMÓF5¿¥5j*ÑF.7ÆT$pÜÇ¬eÜ0L ¯#LßPQ¹ÞÏ8¿5]<¬æöý ç}éÁpr¹ªðO[kc=ä?×Ñg£àEk'a¾btH_»G÷!&v±`CthL_ © Ô`´ÊÆ-lî	²e¹äzÈ êÎC¡K\Rè0;P6¤ñ âfÙ¯yÁ¦mò1?quÃ9Odïeï}fè»â}/]ÄÃÂ¾¤|pÃ¿Ý#­ûRàXKÃ
	GÐ
Ø!§nRê:Q}LfíÖ	ý0DQ2ÚqB`	Uå`,6¦ë2ØvkGPY¯¶Y²sÏpn{Ñâ´#¶öWåÉ÷aM_>Ñµóìeñ_çÿuè<p=?Í±­¸ðdûWÞëêú{¢§³ÿ:®À¯¾RçÖEüý¤ÿõò%Á×ÿ:­ã¿îÕJ]iÄÕ¥ã
ã7tðú1ÕÁ7²ÇMb/nï1÷caka	ÏµÄû,h9I
G\)µ¶ëDC]FÉ¨áÂwâ [
gn°ÜPgLcQ¢µM÷Ú\aBZöØ­é~ß}?è»o{hûPÙêBÿsvÙÿ|¨äm¯ù#û¿Éß¼=ü"öfGj÷Aô³£i|E.2X(^ÁÛy_dBOÕÅ]´üÐ,¼]èQÔ¼j	­¨!ðÆçÀ½AnÆ)U}oc?¿rºÒôÍ÷æö=%xç×àfk§õÈ3Yûy ÝËQ÷Hû¾ð­	CóÔTgÚp`O½5Ø¦f¹+^è(½õ]É´ÛfF/H7|÷iOuBTZëÑk¢ ûg`¶ g)÷Xu,òuQt(÷.sõÑc¥ý£wûüô]ÛZ)ý`WÊæg »ÛüC¸Î9=£<éÜ×Q÷Hû¾f,§üÌð@¹Ôg².1>*<5ÝfKáHìÌùÝ\(kmDâµ©ù
¤²F
(ul¥}¤Â½"f? ìK5úxa?@?äppÃ/ÇÝ#Ýûbâ®8UM§IA¤Zè~ÀxÉ9Óz;(7}8}Jò¶ªdÞXq}PÙpJJ52&{#AÄ¼}Jq|3>%æÿ0Á½7Êï¹¼w2¿>Ó=1¹/zóÝ`º
ÁªSÎé¦çäÒBÏÆ5*Ê++$êm·;K)4g*³!HxBs;õFsÝ\åÈ*hÚ\TêÜð}	ñ½Wº4àïð
Ð½wOî¯ozS7K®´j=j ¹­c¨Ïh¸ÎªãHwBÖNofc½Hv%ò£Êvpqõéz²DHL:©¿x~þpÛÁ2ó7CÁÍà>bQè/uñ«°­ýLãVæà
í?éï{,z¬F©lïa°!£DðXäHcÐu`÷+µ`ToJÇ¦"¶8íÐÃmã×.ó¾¦ R-¶µîÁßóUZåI@àuëÃ|j-YaègT _Ä#ô_øWq<ÝÐ­ôÊ7AÜ?#¸?:&Soºñd9Û<£Ià`ìÅmiËdXõPcåñißê£JbIÅ÷©ífç}ÉèoW5¹EZ¢íTyh4s¬¬Z oF/Ëµ>Õ
¾ñoÉõ@ü$×ÃÑ1úâ÷åpTg¾_Üè¶«lÜ:Á9áj'JT¶DX~BXKkIEW|B	fS0![:ÛCßÆ³áL
²Â¸û}2ûY³xõ&ï\ÇþsBaÙÙ$zOd%.Ý¸Aq*wgåî­_À'_>xGè¾~x`	Û´M°¢AådÅå£¹Yù×H¾R&4¿¬=ÂHelÖøÅº¿H·	òM²LTÂmGSR4í,Åø¼³ïÁwë¢{KÓÂIîDþ®»÷|@l?ËæCOý÷üaip<è(Þ9L÷kÈhÕf÷pØ b?]×Ïû»@,ItÅ¦6RÆ¢SbÆfbäd¶ìg~¾+±é6
Zs×¢kf'½.^}WÎNó$·)púÓ½,VæXË[+¯}ÜÇì§ÌrþðJ÷Äð¾àÕÆêít
®ojÑî¢!Vç0¦Ùæ,¶905ù`íÈ*8Ñ¨*3Û¼Õ¬Ð)¹±k9çg½Ci$C¿0ÐºÇ
îÝì/rþßg,â^Y¦g°»ùäoîø6äG§ÌªNIDBµ =¦Y7/]ç8&¬Õ.%Î',"ü&ÃÏ×äp^®¡.Výz¤'[¤·®BEñÿôÊOö@y¬ßÙ»"Y}1^_¯êy_ gØßzyK:<Z$&ê«¢Î`£ 7ï <±Ðö!©¦ÿOÝuu-ª,íÿóñ9ñâµL` HòbE_Pß<:ý®}®º­zª»«®§§ÜL°"Öuç6µÅöüõVÖ?Ø¥G»¾ÍøÂÕ\ «y ª¡\jZT¦1¼?Þí9ê°¦3Kt©|\ÝôÉ¢ëNøÒ¹P%qûd8Ù¦õiÓ!o%´ì÷ÒÔ=TðÊÒs¢ò8¸»¿±í½Cw¡ðn'`k {¥j[ÔÕÆÜX¿.àq1ñ[` c±dÃUË´IÛXB0iFxR ()Òd£ê1
ì÷åäÅðs¾ãe|+ï
^ñ½ôn~8´ëµ³çE5¹3ìWäj*ÊÎMtaÔÁ>FæA)¢íF%65ÞðòM´Û¬Ö[.ÁÒ_Zü¦ÜáÿÝ¸ÕYÿ÷ xnëvç»aËØX2,¸YYiä¼Ìol}%¦°dî¦(ê$æÄÇ£4©ÛÊÐp¾ßWBÙß=×ýàÿmÈ»Ý±änì×þÀ@ÐmÝð@ÍñªJoÓ$E÷Ó_º(Ô6Çc­Ô¥Sch I1©e¾ÍAßøzVkFB,­ÜniÁNnÿ$ì¸¶³#IH`S×ûÒâW¿ß
¥ËÊ¿Òl4Üt<ê4S¹yCzSL­×Oô=^­!dÕÀîÞBhZ[gÓ|»4e«xÌrPÙ,=zþÝä*BùÊ]ò=0~hí+îOà&ÌÀBÝYYVµØÆM2E¸¢æ³´ÄXvêm¾Pé!bóñÄ«Õ¨Y0Íãv20YÒWiä·îtü:¯øï'RyÀ3WÉ÷À÷ÖÖWðÞ
îa~²(ÂÓ k¤v¥.R´¡bÊAÏ9àÔ]>ÛeÚ93ÍËvÍD@í\î­J×sD³ÿ5t7iÊÀ5ßÖëË=®y°·5¥H6ç#LÊKHÊKt ­j²Ãä$¯ÝA¾)rå»¶Æv+cåÎÆXPÐ$lÚ0nÛGïM5ýmÀ¾É_ymêdù*ôJOyzçèec´\	B"±^ÐZ³!´I±
Ùlºn½ÂhÌÌfFW6êì(XkÒ¦úÄÄhÆ»ïe^x³ú¹AW×6EüÔ¾6öÛ×»,ñ¿åI*¦ãÕJ|ÄÉ¢à.
gÒî@ë¼m
Ö6¸Xb1*÷ç<Íø
Þ·cIAûTµULov»Ï©Ýbwb3ø&èÞÚúÜ[ÁÝÀm½,ñÚð¥ñÕ-TVÑfV²u¸wRX
ÄâqMKÌXMvR m}kèbºõÚ³Ùo¦Jý-ÜïëqÍþÖ<ÚÛ$.ÆH«âh°òÆÑba
°)¢1­8°6²RAT²µÐ
?ª°aûËå$)§²¢OêhÓZ2ß´©H|ï8y7fî]eËÌóãa±é{mÞqüDRËåFÀÞÞYömpFSÊ\À,ÏõFpÚÌ,#
×´a)£ùW?*ÚÄRºåmµ*r
A¥&jÉÞjÚ^a<5XÞÚ
y}£@[zîþ0õ¼xß"û4â½'îEç¤ÐüBÍÐÎû¥þ9#ó¢Säñ ÜNJ}8í´Uûa²èüû_Ç´¹S*¥åÕÁÿ&ñaCú¼ýþú_¿dm/Oó¨µ]iä¸­árÉ9×âqaÁ6[+ÖScÐDtßG[9p)Rã¯LMÝÍGÂv Â(Q®kÚü4ÇTÈ¤ÒU¥s+«§ÃMh@1_úÏ^÷(v~Þ%wBì£EzoiY§:Ç}g@ßµWâ|Âàé¼½ÿüçåLØKYØOìÚúI~æ«ÞYîm ÓO²mÕb5O.kfÚ¹-¨JÕÏR¦rÄPÉ|P\£ªè`Í-F¸jïfávNßXúÂaE&eC{kóÖÍ3
?bÝ>ÆòkOêùt,èÿ]¯÷á Þ_V{?¼µ«ö¨-|ü3
f·Ùå6ÞâíVïÔÀmÃù(Ù4ydë,.÷Ck·mÓÅ
ÐÏl2cÀÔ­¦X´`µ­ÚÖËJµ©0ORÍQ+g©R<ß³/~çNk_V>ú_ÊÅ&ÞuÿáÀeôòd%]<PØìÐ	¡	M
)ïT¸ji]ÍO8ÖPµ;hàLæ:[W²±¶O÷Õa	Nôµ|á{Fõúä×-ËÇ"t
çýtä/wÎc&~6Ú]BErÂÅ¶èü<Æi³ÂÛ ñçYAXlÎ7T;Ó¨oùíBöcFfÉf£TM5^¦XÆmoíì»ÏOãáÝÚ·;Ù×?·«ø£d°÷òåÇ¤úÉSSZiçÜxu!J|@fiI¦ì
=fÌWOÓnÔµVØT+¡¢Z°¸:RÙÃ£§WÆÚI²8éýê(bûÑu'2¢¾Ê?úco½±·µµ«vÎ
AÏÀý(A)9­RZVYùÜ6LÇVÌ·=Ôµ5AFæ¬u SdhRØÉ="ÓdÇê·Þ7¤eÉð\ÚÊlýäÇ_Tñ£ÿÀÉÇ@öøÙ;Ëº­·ð@JD(Á¦6ùbÐW©àö8_[DjÉÛ«ÈVC´j
ªÜð«-÷
 ÊhKæªûÒòY0¡¿1]°©Ï¾FçÂ¾8|Ø»r´?h¨gÅ×Î­:éìñèá«ô7ºïgîfn=JÊMÈCµ$9Ïwyz1"¼$káF[KFEnÌMKPgk¤pËå|
£èî#-z¦¥oEþïär~¶Öûü¸2rôä}[EÙVÏâèú¸<£ëËm½n²îP|[Ê1K¯Ly´¼>ÅW4B0û(MYBF©7Kk6ÝÉz#R»Lp»zÇ5JX°p¹®sÖíµ	7d=>:T^a·Ôe[õ~5J|&°¹[q8§.{'É·52öØ¤#½1¥%ÇÝüªd}$U".Ná\ø&×°Ê¦Í,LydeîÑ~Û ê*Ú¬áMþ
S=Oï/1äËéì2.^´ó³vîLïâ,|yê}ÞÃûÝó?>å ½ÿüs¦ó¥@÷Åù0uÙï¼wÐÒéÑðûDkEÜâ¡ûõêÎÑTN²NÌ'²,ìNUï0ºb¸Äq¶~¼ËDv¦zúìÜ6RaSù´V¬1ý!(I§ !ø5©
¸àa,á¢^2¨|þÍùµ¼Y5³½ÙR¥'fV÷M²qHfAV`oÍk}Öä«:%/ºyÎÿ:-Þ©ù£=^Ñ>ö¾ñ!å¥¾p´ø¬Ûdé0¬»w_LÕ&ã­Z$=¯#Ì´÷u4¨Vá*AuæáÚÌ^WÈZÂ±|Û¡/
§äTu®­wö H^ÿ"îµò]æåÈÎ<Á:Gï«ÞYÀmÝîû;vªM!=:h%Gm´¥AUñZ5B,}Þ¬¨%?¡
é[Ô2yÂÆèº!à·3t+üqÌ8èóð1©­gÙvÒ³ÓR?g|)5ÿÿK¥õf^èF`w×Yÿî¼|]<W=W}\TúëØ'>I>R#NcÖ½D"¯äSL`vvf·þû.ð_Ì-. ãûø´~è$í¶¥åW(Q4BÏ¢¤Æ\çÇzä:]ÄÎ!Î`zlÎ¼ÏAubyB{-¸Ý.Qªþ å8cXËf«whÞÐfWÎÏ¤±©ó,÷Uç«^ÿ>Fym¸¿¬Kt²î¡`	°é.5³Dá õn§hQ¥i¸d½j¤ ÁaRpòåx %O0K_2ã Îzfu9¿=/9`I¿z]ÜzW×§à§Â«rO¼]õàûB«T+=P®=
ÕÄâR!~K.l'±©jK
ý}BTPbºuçü#T¢Ã6ÌÒmÂþ"UÜe¶l W0ù¥z^Y&/Û+üDèÿ*ô¬Ó×EÌÿlRÊ 1Z Sû{¡¿ÒÒ*6DÕÅÃ0Éã¡Ã3Ve3 T6JS°Í­ÁF2®[©,|oÎ«Õ&[ÒuK:Z¼Öî%zñNÅùi>H¼n ~cê<NSþÜ=­g×<°Ï°vòeÎi\¾ÃsZkûÉÑ+~xÀËÇy:&¬Ã¦yí,0KÍâ­r7":«>¾·`$A$>Ü3ÌN$T ñìóàb8¨ÙMº?|ZÔ¾¢ä¹ëEèY!§¯'";W*©mdt=Q ç¡/bÇÖ¤Ñµf>?ÚA.ò¸³ÝÚkµgûÑHÐþ´*³UÿáPýÌd»õCa÷Îækû9îÖk´v¹è^úVÝ`
Ü8q	¬6ª× ù#VðÀ~zP~? ­c¢ÜõçM§nkm×´Õj5­«é-¸Ø¸]ç¦3Ï{¦½.<:iä¯Ï«éÇ'È{øm`x¢ç_üÑsoÞ_°wõÌ¸k,9þ{/2Òú·?ñRó³è7Óx½q	îxéº&êSîvMIePG®¼ÃæÉn¼	SéaA91nB
«Ä}ÃÛQT(n¿NØYÅ^5F(«!1OâoEð³A|zumÙ»å£t>÷òJç'¹îñu#?#½ú=ÈOÇô^¨fõ"ó·Ö>M9]tú<)¹g¾µ~±Ðsóáÿþ/ÙæNE|~tµ=¿ú~¢{ôÇ_u]käÕ^/Önïx6+'ç¼í¯¹dL7>ÃÛÈÄÕÒx¶tmÐ;w+4s%Cö0FÐ8Nöøèf
iK`³¤Ç+Äþ',×Î²éòþg½Ë°»J¹ë½2ÊÍ89Fãï]süçØopü	~nùëBì¶»}Fîpí¬½6¶
RÑv­°Éï§j¨â"g5(%sggÏi2oA¤@]Z|jmàeÓ&#9á¾RkÿÍ"÷ÙìWkúj³?[õU{{<ýÙ[¨_;ÙéÏ\×Æ«;2ßÝix³úÐ@æÙ»²&Uµ,ýÞ¿¢¢^i/2< ÚÑ7I@AI$¢ïooA3S35%½§nEU÷Ë9t­o¯½¦½61	c+¥ª£	@T´§£
cõ{û5¸å³\Lmomn»ª$[cíÝMG®I08G`¿]l÷²´ÀÐÁ¯Tÿ¼+ªß/§	Ú±÷JÚÇ¹¿ækÏx8Ðh¶è ÂS!sµ°bÚY2XÈ°Z`¼Aµ¢Ð
a+ iÉx·½Úñ.Ñ~4PÝ^L@{xv9p%þ»¨¾?­÷ëøNô?¯Ñ{ô»?ßjÄÞ¢\/î1eÂM|å	 j)yìÒ¦{mYõ¾#É\Å>ÎØ.3=ÝÀ¡Á¡Ë^!]W¹êN¼ÕEÅeÖ;b ~¥Ø|zâö2À@éìI_	4
|ë»ò¶â¿ó¨ûw Fè¥)"On\Rê<µÊ±$Ñpja¤Þ.üÑLZ¯º8Árúb¸åÃ­Ë$¸ïÐÔd!c,ª3Ìv24±n¦Èëú&&tè
v<^G ü=?¸ïÛÞPx}¹}è$ºðæË³¿ Ìá$gQ_>nÝØd+Òõ ¸:í\h>Ç<e¥)TÔª_.<5×Ê`n«îpåm
3»EXNµõj<ÒEQâÒÔ"HçÖéóúPEì?¸þ_ï\ÿàÿß>r¨·Û^áã«îìpxYgþýýµÿùÏï¿ùu·ÕuöíÞj¾qù)'éÜ¼õ§¿¤ÛÑð¯>q9úïÊÅL¢CzÂ`à_v&Dë¹æf2±§'­óV¹Ó¨Ñn·aqýàºV'0ÿö-Gn§¿<LbìÜ·tû§}êDLZ|\x[5UAî\-6»lôeh­¹çò;²j©R~.[þÁ²¨;êåûºË/jwz#ðWd>éÂð¦Î¡ÎE;^Óý<Ï~¢µ^¹ûZÃÜ½ÑÌ®øsMs(´
©#	pu#Å{á`]mE#ûÌ1+ÁSÈTÅà¤VV£Ô »D×A=[	5£u=tSh´±©^wëþ§ßÒÙá¿¢'g±³N¿â»dð­/Ò·¤õ×á·ðÒHu4¹;ç=Ü 24)½g
ÌrJ¯äíò:z±è»2ëf%,&ñ4Ö19p§ÇÞRÃ&¦oøäïäØqÊÌÙÕly4nàj
¾P¯¹õùZnW_0p< JlïàÂ8ØhÙ];³¹F³¤5Õ£ Ï®·:¬ã­ÄA /[n×@´\QÇàº"¯/èn6¢ø´¾uÍöw¡5ý(26v=rR¡§E?¯¥v{¥s&ü\hþ °4ã&ìgábÈXW]¼RYªÛÅ¹»÷Âe6E¹AýpOÅH^2=¤®õñ|U¶Áº:o-³íGþëÄµpgVµ¢edsÀñïÝß®÷Øz"G£yÉ»;|c~glå³sáÊ ¬®æ4Ì¥¾$³ëõãW©ïLø!nA÷#Á«Fy`ÌÒNÿD"(-ªÖb\¯³|í¼°#§^³÷ó=ËÚT|²ßîÉ¡±è^q|vÎ$Ke¦­£5|Ê¦¾"fºÉp/KuÕ¼0ësËm`î4ïæ6ÕÀ?à:Y¢an'b`0Ü!G¢4g³Éüöú¼Î¿¿úÌ¼ÿ%Åkþ=ÇnC¾q«ÉI½fQÇòêò»<¼¼þ7í(jìwÓFz1ÐòAÛõzßÀÚæû õZøÝ"+ðk¯æg#ø÷Þ¹ü\þÝüK]Ç Ý:H«u£×_gì¿S=
õ÷ã¶&ý©ºä
Z,® N(F×Ï`SPõeºI&¤'sæÉùxM6:XËmtaS±Yd/æÔ._ÀÏùcäfÛ0×ñ]ø£¤ßQO¯qg¯£i|Õõ¾oïnwðSÂ?É±¨Æñã©zÁP~§zÁ\sÜµ0'}jC¦b¥sÖ8òØ2,pt9ëáKÍÇÆcFÒ¹½ #XJ
ìKBÌ Åüâ(
%++Ñ^©
bÌò!¦Æ37òÙöx­X:uR_³Ëßïx¥¬ïrÃÒ«ó¶e¬NáßÆ]¦eoZàoL?0§a	äÊ¨¶ j­aÆFHw#±féÌÝBß«//ØxfG=};¾ÞL74ãyB~e½¦ß0÷ã´sMø9]Òâæ0I79¥H ï´<Ê®þj§lû¨0X¡%³_¥VF à=á ÉÈ@
]f9[Åê|V#ùïoÝ  õ§¥Qô
8½Ç;æâ1
ÅõÿÆsä¬ KÖA3}Þåd6ËÈ]îô}p$í(OÀbtFÑÜ«zíÀ8ö¯C¨´¶Æ?Óß$¶nÚÔÉ/Y(ËßVr5îé×´VÇqdi§7Ï`Í|þ¦8Úê6NË¶¾m<Êã ÍÎk?èh#Óóa§¡ô\¬ø|!ëpe|<òãN
§ÃÉúý]Ð]¡È»#YÄÜ $@Z»+²$5Ùc«ÚRqiÛÕZõ}1Êßÿ@>Lï!úÞ§ª7Ì:¢ïì£ûìóË~Ú¹DÒÞrüßçgj:ÍMôsvôëJ?¾¬IÃ¶ý$¾Ü}m½ºÛ÷ÚXj±¡É¦ûJë­÷âãÄÂ:u/Ó£Vý,ÞxsõV4÷`+¬¶°¿¢{BþÕY§¡÷ü¤Ì¹ª2pb¼<Lrº 6ßÍr¥ve&(æ¨HBàJ·3-Ù"@5"6(ÉvT¡J¬¢×Á¾ßÑ(Zkì´²v#Mß²÷gìòl­ÞO:
µç²H
v)W§¤½ÃNçåLì*2Ê`Ý91U`xOÅC{  êáÖY9èjÏÅv9÷Ì~äz (Ò·`­5²ø!Þ·û7kv\wÏ9¢¬I-³±ÉQ¬A08.3h½ÔKuOú<l©t¯¢©¾Xq:¤ÈbZÆD%ÜÞTYv¼$g'ÈåôRin>ZkÕçßPËôÌzY`°]¿uÁ¯¬/ü ûÎÝú¤²·`-¯Ugç]³9ëHñ3+ÝWÒP¬E*Q$Pe@1ÞLìmÊQò¤Þ1=óªiâ
	i¸ J:©èÐ81û1þ½2ß¨6¹wZÏ#É|Ø/½mEnªº8.0dg@ÅSÅµÏ÷Äf)ÁKÄItÍÕJT½xè­MQ
Õã7pOÿK\¸ëÄ=fv_óßÉ6Ü|;étÛyÄ§ù¡@íôpT$jy£¸"¢ÞÒDF¢&½§X,åÞh^K~7/°9`Äi°1H|¸`ÅªHY;²ÂÜz|¸ÿñrÉ7½sîó
nüGÈyõébEhaòEbÌaf8dêC|Kdk¤,DÌãvVÁ¥Î¾gnaICb=vËm¦2 bÕå¯ÒY"Ætüs%QÝ]762øK)ª+º5>Î:x»d?­6%·ÙÜO¶¦¼ÄGúèZ4éØÑ¥{ìë8YXåBèÏÒíÔQPð´qb¸)´0&·-|Ô{Ýf©MáÎÖ9GIoCy«ÿfÇ4Nî×E5}é¦qðü«Ó/=mr]7½³hëìNü#ÅÛýíFî÷?QKùîNóçÛ=ÎEÀØéÁàÞÁTj2ú^_p4gh ¸QLÖxÛLU²B±Ë
,¬hq£í¨Ê-8MÝL­u/alÅ2Âø¦SsÝGåmaö[Ä»hÎï;Ä/©¤äõ§&ÜÕàÌÇÖ h'©Ö(21QÊÒ]&14Ú)p¶=¬ïH'ÉÅU¹¡þMsãZÈª¨¼Í°]
M&"+pþÕ_òG>ÝzãÎOE«XÄ{ÇÂûÉ0;Ó<³¾>jÛöAre+ýDáÁ´¢»äeû±Â~*S
Ý VÍÙq
[xò3¬¡)xKÅd<ãò\;¤µ}ø%ùÉôrä3É!ÍAiW¼³cØ96á[BíBÁ¬0 ¢s)ßhËa1p±ø#DG¦0°qÇ­­Ë'·uéVý J@êÏuÀùëæpü#Zïp Ýíæö½¶á§ÇüÑºÅÔ]ò/TO,¾u.syCS2¯LÖÙpG`ø
^¤³-FlÅ¬.ãròjè²¸¼rõb6]Ik~¾,l¤ÉT:¶¦NÚ¦&ûcþÒ³T]ëú±¿~ò
¨'5|}ýsìÍ½Kõë[íÊIÎwô|ÛÃêaR EJà
/mÂwUþ÷½ÍW¼ÏÄ¤Ý^jÛä¢x.ç.?dñtÄOì8Ùv9u±3;Pb:¬Üêû$Í$#¥Â¨ÝÇACÆáÖ\¨¥±_ `¸XfÚ Ü7%O²Ü~ÚyçÃ;¸NbúJÿ f)w¿p·IAÇøa:¦"«¤ ²ÅYû=l£ô| à¥­ø£­\¤Á5eÀÑë¹pÆzýµÀÌ
I6æáR¡&ò³á'Âÿ¯"(Z¯Sçq ñCöî¾"è|½API/nzÌöÀ °á¬äX/Õ>·[UcîO«aÄyºOe6	 Ëô¦Ýá#
@`yì'úÉ½#Æj¾Øý¿z	A?jéU/ùyWbúÿ¦sr~%qÖ5¥a¸sh®°hÚDD+à!Q¦Û=CIM¤4á+ÁÍQ&æÌb;Ö&]¼Pà<Ø$0¸1á-:9PÈØ<s|#âÜ¾ñÛ
ònÊíóÑÉ[_À÷þöe«²÷[oéûo%ìÄÿQª¥Öø?_}¡ÙH¹9ê4tË9â&Õ6
g.
ïËDµñ*Ûdg¸*g6£nÖKO ªòb>Øð¡Ü6]$ë ùãFe»fØ^UÙÝ×¯ñçëf}½Üv­xBW1Ù/zC@¯¢ Xr¹Odëâ¢ºæü8a¼p%|Øòb>VR@õj´­ÄãÞq¢ë¾
) 3àuùÊÝ(þÐºÿBJóë:äûày¥ÕêêÈù¸Ö4ja¬õPá÷CRllWv5¢­0L-Ï³l»e8]¦9¢u¯«p·?ÜÐèb¿9âÀãy·èÉÝþÂé»[dCsÚ£_W¬FÞü¯áéÇ±ÔJü8{¸®òÒÖiëßxeÍÂ?N¾}òÐ1EúkYÿ¼:ál
 ÷9-jÜ2;®÷¢ÿ/uOÖ¤¬äûüÃR6Áî¹î¢("âÂÃD ²Ê&;>ÌoµÂ²¾Û=qo}iÌÌ'y&óH¦ôcéÌÑ:×¨¥GS,hôáõ¦Aíûã÷Èí#ý2®¦!ÐVsêõWÄxÝÂºwÝÛ¯?4ÿÍüóð`/¡æ×ÍÔ6¦ZäFª¶øÛ{ë	¶óõþ
lQÏé»ß#ðUèMf¤LÑÝù$¬v6ÌúÖ¨ÃÛÈ3:«ûW=:¾!É'ûÈ^Jß²íoHÜ.ëª#ºA!
$÷EtÒ?àùãP¡¿\îbÃà°c?,Ð«­v¼ªêj§íX`-¡w:±>Ô®:¦úE¡~µi>9£1úIç-«­V QHÎ&uÎÓKg½kSyÔ1Sò7)ÖjÖà¶9°;¾»WÓ5· ±UUÎªLD;Pó&¸,LFëãê4ÚD±E[Ã=ËaºeVÝ>ä\C.0Ï¡
qyAÿNåu1åþÀ;eC$T+¹Ý¼QM=Ò·6w-r?#P|Óá¼V§#m/[Át@9ë>¼¢8`ßÆ¾k
#:PC¿g&ô¿t`8Z1óù«#\¾¡nªß7Åï¾µ$<áM(õù©Ù­·( 6äfÎfÎ`-Ó	QgP¾Ïã¬@@êÒ¹8,((¸tÅ©»ÞK&ä´Ù¥´Õ`p£L-uI¿µ~N\+æ;=!Nèóù©!¬&ÐËiè«±t´TG|À8âàMOÂtJSÚYôÍ³ûþc­u&0°{Õ:Ø>l]A°¯´íoUMø}3ýgíw¾ot+Ë}áU#@\Uw©¯ñó7|2­}ÄÆÊ?áÌÔn/*¸±rrÒá.uÇ¤ábfÙ®¤iYaù½6ë[÷ýq©	cÕ¨÷J@H?ÚÃä¾M¨ô|ÙïÌi®¬|þÐÜ(¸vOO*M{°Ú5ËIg¯üâ=b 30DÎoÉg°mpZÓÑÌOÙÈÉeÝFOx'3áAØ"² aÂ$.áuó*Øf¹TÄP÷U!ãðOúM19ÅæÌùÇOSú1PÄÜÙÄrÖÝfC,pÖýv ÍÚ \·/ ã(RÆÇd/aá°¤º"ßTº£Cò/åp¢p£O¶î1êW°lmtçS8rÈ(øÜ0¯	èV
OÚ«­AÛ-îÿò¥ËØ+¸*
ú¸ C_b. Íi!Ï8á½V@îÈ*@äÇ¦ý¿É«/]Tþ\bæ+úÌb)Ü¬QC."æ´l.ë¬-x:uÜÊµ Ñ¸6ÒÒpl8#ýe3C;W¿ÓkR³ð«3t&¸­aË±µ+O${m·¼Z«~ÅûoyõXØËYôÎÆÖ3ÙuÝ³yXóÐCuãgþ
dwÄ½Ú{úâkÁ!ß ¾5B¬»Ú#Ý8¶ãñõ4ËàAwx§ÊÃþcÔTÜÛñ² Årø®íw¸x7Ki×(k½à8à§0çùì¼ÁÎC¼ÏÒ×.ÞÑ·V«¡
A&¦7ltGmímhÑæg¡:ÖVìèÃî´$/Àx\Eíd$ÿmXëØª¦Ù@Aù¯5ë7iû\¦ËûwÇ}6ýù)XpEþèÊó;yÏwê®9V¨Î,}JådC
¸ÀºxÚ MYåôkLnÊï^BuJM
øæn*g¼´6Æ3[sqÀÙÝñýIW6þ>ö|XeÊOµp¨>cRáfZQ#¦m0o¹@$µÇ3¾`v«ôöÄÔgZ]²«Úbo-riaSÔà}²£~èu´Ó.è22vE¹z5Bíþ¼mPÝE­U¦!Ã_¦¾gö×~Ö¯æãA½¯øoì.Ü­ÛçpEýõ~pz0CTFÓlêiv¸³´ ó(m·ÚáêóùÅQ¨7E6 uo¿¾,QJjà8´ÙÙùÅx>ÕÒ	ü¹ôlwFêç;uS³ÔÔ4¹cvuåÐç¼a¸éR¡ÕÁ¶Êiöe¤çC8¨
ï=!VS¯§m	Ä¥Ñ}ß`ÊÚúÅÖß¯1¯Ñ´7U¦êsªÅÈVÕ§)÷«iõøÒ¿À_;zvz!+ñÞØuC
IzÕÌUK.Aäj±å}9=:qH8SJÃlØFwg­uûàô:ß_`z9fGPc9ïB³CÈcÛ-X
dèAk½sýKÕ$§n8n,tj]¥"DK=høS%RRÝ!à¯;u9%lZßK83N¶©$!½>dm¬a%ä³Å¨ôZS´áèÔ{Ó;l5VM1¼°p51*ÖÔLÓj"ÕËéÀV¸d¶âð~MXê¶ÃZÕ´7·zzgN
¸Xä °;3ÈìÌ óCßçzúïe¯EÜé»Ò°w¥iª³Ë´8¬I4²ÓÅ®¿Æ|j" íw¶¦][êHcjØzpÇñÅ®vümdN$jÛPIQÃ`&iM÷;Ãº+}3Ñ«Öêª-5éXÒèñùÎ÷u}·Só³ÆÊç×¦ÝGÆµó5è0Øºu¸1qàer
öR°ÞanO4³tpL¨µ ×[ÙÂÉÖÐ>!CZ4?»TÖVÐ:+È­Cïx»/(} è[þv3%jrÑÌÐTÓñÄvºÜ?Ò}v'0R¿âòanùåÉU6.^VKVÞÙ²ÛbÇw( æº¬fÃe·¢@;[¶èI\ÞwÛþº½~Ríñ«ÞÏçÖ8·o¦ô;(Y7ðNÞú¼ßÛsíØ;TVV`Jò\ötÎd7ÃcyÓé)
ÑNÚhç»¶¾ICSÑÝ¯RÙ%£)Çè|YµÌÍ%vþò³Z±Hx¼ë%©=^3Ï,cîÍ9ÕOtêÃÜòò}ø£Î7HÚ=üä{@v&FþÑç¶´jìÐ¾¼ÃÍ§*Ü^ÌtðGIâ»l!ôCVlå¤ÏºEù'Ø÷d\¡¸ìéaRXÞL÷ºÓnCù¡E%fº^{R¼,ÜxQà{rkÓË	Qh"~»$ë~QAIl;ÿ}³dAÈ\¨UÓnCGÑ=;þ/vä»ñÿrÝ¡U0i'$(sú}T§qºvC ä¨iÄ¢n&É$F£f{t¦ç6§ñçò¤	¾q{e¸ðÄ<Å?ç#¦Ç­y¢2rôÔCùì,ÿ¥áÁ¹ICÁD%\)§êÍSqÍ{¡l7ÿ»c5åá
¡Ûtwû£ÞQ0µææz%ÞèóUOEÕhvý¥¨ú®'^RJ{{Ý;ºÿzBZ¶6-Í_;V¯wy¡üVxôË «ëóÝf6@õRË;x±ÅºzNNö,ê¸:l¶¬.xt4¶½uÜô(OEÆ>¶%fç$!>±¬ßWjSd 5>¶M½+ÙS4>æaÕ®¯§Õ3ÉÎ-,Å³N¸ÎVä[èÇù®Y¤ü8w&gI~äcKÂP¹5çKÅòÜãMiä;·'±ôµnú**¤Ø±uÍ¤QiÖõüËRW¡Fn[Xµá3[W`È
F´Mý.YÊà¢¢_HtIºVÐöI"-Ý`q{ÄnN)ÝæÒãÚM#VSÆ¥îßÎGa[Ï,)y8í®þ+êªê¹©ÈãßNõ©#ÿJ9§ôo®Ãý{©)æùU8?¿ØüB;e£¼ÐQé³f:Vµ¢¢®²]àbûüV}ÄorGÂ.Í(ÑxÜ±e«OtWæÖiÇëßQóºXGä®7?ÆqÐnÝ8ÑyeÝªà_zÉ×\ý¸7WÈãªó¸BWX*Ìõ¹<µmAùøzã?üÆñßóç·§Ít¼j®G¶ÚãÆX< zA2¸Þt ¨ê¸^FÞÎÕF×ë|=zJÀ^jCÝ°KmçOGWÒÉn¯ÑYÈÓU±äº,üç?êQ¶fç **dòE]ÎUÈ¤ªi!:}ö`v?oûâÀ½ÀEªKN²yòÇ
¦m9ì¦ô½èí3G'ìº·ä^·hTúdö÷èµòì«¿³B¦ï
\Éª»3Wn¸½U½ðøsb¤)Æj®HHTÛ,äá¢±ïê}x²oYuÌlE´ß\ÂÈÜ'ÛøÁÅkSÊj`B·¥Þê¤Ø]R¶º %b5¼*¶ôWl÷î&üuÿMÁD)uþ3Íû'_åýuÿÿSXï6SüÕ2X|ØJ¤(N¸ÒFgæÊt?¢ÑÆIh!* "t¥cé*y\.¡1×¶8	Ø]¤eðwèFÃZ8i(\ÌüG25¯óòË
¤w¶U>áûô)m6QC5_ý®=õ6}TíðÊùxº<¡ä±%³Yg!4î,Ýð¸g©aÐ
@Ã>4åÓJ[ ÛË;£èQC«úv~w;ÊïO6L£Ïýï[ýuÎÓ+þ³#à·8|îì¸^úÆGy­ñ½ÅxÂSú=q°qTa¤"Oæ[AÔ=ÐÖn»âìn{¶ò°õDí	Ú¡5)DAw`Qí À¿ñÏgG|	¦0?2Ûú-¡Hÿþ^j4<óü o×<?h½
V*^+<"æüÀ;ã)mYã¥á¨-$·õü_Wiìíºnu}c.yRõÐç-Á`q!A;p#m^åU){A×ÿfnþO% ýøÕVÆ®Þé?ïòöÁ¨GïôPNdÔzÞâÀ`yd§¸·`­
/©`Z^hyGwÉýqhb¢X´µ¾ØDóFæÁD.ð8DO.)Q½Ôs¨8ÐëÙÖ| ½.å~mMG¨¦æÆµøåÚ÷®!4¹`În}q[N];moöÀCï|:ªÎ«+<é3îE=È@|w³¸:#;föÇ¹G#âü<Û¤*Õø÷k­wé-cëgÎ¥t@ ü/oX[ÍûUó©g=D(W1M³vWÙÉ+ìmxÆJ °3¥oMv¢­ªsÆ$<;<cò}
mÆ{³¨!Ïë¬Kñÿ­Y_ë©´Ë®x/k'=Zî^þÞzù,O6'5töÞÆ,¿_Ö¥£è<Û´(`®nv¼kYÞDl»ó­Ç2ª,-l =_6¾Ð:=ÑF8­	za«¹7½éf8¤9i±!|m±ªâxmý¶/;#?§puLçü4JPÚkÐó×Z×q=rêsÇ@§?[û>Ò.8ÇÏ¯F¶DòÝFûDäÃCÑw±vk¸2@ëBöÙi¨Ò~²î6H?øÝè»0Þ3¯ïÏ®ïxuËñ#K¯ËeºB%ÍK5ýMÛc¹ñY5í5ÀóÆl`"°ñïL"pi´QÝ£h>Ôá)aµöz
Cî×må@#D0¶u*iÿÆ\çM;Ë´`|{ú¨©:YA6RÌÇ:²]?uðþ?:ý÷íå¶!òÆ¾áLE&½j¦xªeæ@{ÆÒzÁLD'
ÅðÅ,
Ø/3`NÛ 9ZèÞo¡Ø´@é1¹@Â @9át«+â2Q'(Kê|QÙ:ÿ»È^!t÷÷\kñá3øçÂ,¬)/þ½+kRU[ÒeÇ}l¢®ÊLGtG "`GßQY¦_ßjYµËÚºEÏ9÷Þ~Ú,Ü@~¹råÊÃåº¯ß{¼ ÙèXÕN
ÌÔl´	Åø1(Æñ| @)o¥ÚâF·R4(6Út9ð¼0a÷»2DêCÙh<ïHýïÿ{î£¾<êÈh|=Ãñ1xCúá!ÎxyÐ'rJª;£qÚ³}P/G#r)6äHÒt5ö ãã4±
];RäilLx¯Õ0AB\T5ù­ü¾üü8¸¸ç,xÅE|¦yæäùªo&ÜN/6±çTâÊzèìü	¯·ÐpÈ+uAàbàîJUj­Zµ±"iä.÷cdMhÚ@0cVÊ^'±Ù ÄºèÅÉ_cØnqôµ®ßh9ûíNß.ÉD"·Ä¤;`	"Fµ°çIÒ>=yilN ¨ç)ðÛ!ÁnÖ:b3å  Râ|Ú
K½BcuÃO=¿ü%Øí6 \T?Øsö;ÓzÌÄ óÃko0Ï·ø0±çCaLbãrTvà%ÓÉÅXµU%Ãyv
5ÇÚz¤IVÙ8ÀhþºMú5zµ(­~ë+ûçnëu¥ oA¿tN=Çï?þvF¶7yò3ôæd?ï$Ã¯¥öÿï/zyêSBóOê/zFéf<ét^¸ÿù};¦µg A8³ëD¥ÊHÏ-¶ôÄ0Ã-·µ"c³Ã
K+V¬Ð­ 61(ÆelCcûbÓÃµÏ¢]½¥t¼©jöéú«çïNx t¯BP¿¯ÃèküBüo_nWfô1·hÊ8 d]©kÞØ&Z4KQfë}¾éßLÊÜXÉhçfÞµõàÛ9×C	¥M!Aâø¸ó·>úÝÞ½¢>©^øs¾>{Ë{¨ AhT«W<$«¹8]f§¥É¼[Î#0éàÙ0oöÐ²8\7*M³Ý¬skJpÄ	73a6nÈ1éÉ*^¼´ f÷½à[8¼p${{'òÅR§¡h¥sÆÊGÉÅ×V	aRy#
V$cÇM3]4ÛVÉ´.ðÓG%ú93ófÁ2kòp ã­ÜJ£×5bî¯qí}ê	ÜH3¸ÅÖë0óÞ\ýFüÄào·ÞÐ~§iØ4-ÆªÝÛÂ¥.ç¹¹kWµ LÂ¶Äá+g·*´Í JçôÎÃ[ù£¤²ÅNp|d,ßgõ)dùK^ô¡ð£¥=?Ý.}«½åVìß½Õì;HÁÛÚcxÌbºÐx|mp¹¢}pÖB®½ìÀÜHjº#¶w29n6Ñº&Æ«DWÒ³S¥R®,à-¡åó
«á½R®=à)Kµ½F½gÇ<o"ôquþÌÁ¹m¬½âÝ¿Ð<cq¾zCúùö1|°0ÔQ	í«]`Å6#®V
t1Õm:qaÏjïì3oZLr³)Eæ kËèÄÈÖ¢Ê|¶Wh<_"J6§*§l3
è7~\:®ºÍñû?¢^ñHÿÏø®4ÁííÝ+?Édàsðõ;t ÌÍD² ¦Üh¼°¬Ýé&*2Lf <å·k¶J¡"3H3eÂÓ+Ëfè
:k":ØI[ÔHYûB¦
W Òé>r0N_p;±sÛê=r½ËÃ}nyöÙsÀW5ìçËÞÛ­¿ ^ßi^°<^wê=«o2QBãI£§s%1y"0]¢Ø¼hiªBSøÀgkn¨¥«iÛDÁ"£­nM©yÞMò7×ÚÜT¥>öÑS.ogJ¹²ÍLOH±}BT\+{x»[6@	·.år@w[á|ú1>ª·!16Q)óU%{R¹W,ÉÑÍ°r´õþuñ¾Uíê#iÉ-yrTToà~¹ÓyAä¾góÕ­³6é!CÓZ!Ë A­8Ê«ÐÃ.MZ8L½²¥IìMÄÛJ§lÅ¢²)Ç¬Dmµk5@YOARUl¶S Z7U9|Êt#Éø:âí¹òoÊókÿèO,µéµ
,qÿûöúthò|ZÈº'Aø9:ÂôHûX´×ÌQ=Ë Y lVi]ËËÍ1GÕ!#v 8/Ã=hgðü\7R#	>SíYµU`'Z÷Ñû-BÿÑZGS#w<ü"(=Ë­ú´§ê\ñ÷Üµ¢©s{oú)øî	¹£¾çóaÊZÃ`ëpeÇ.84Õ¢Ã¶¢7¼,k8©°ÞáÑ\±ìrJSêú¹ö4^Í	çG%xS~~	)N~òþÙËKKÈè1ïo`¿%iÚ3 OÀ<k¬Æ¿_-R)ë`°Ä°Õ^³*(BAUEM6÷û5Ã£RÜ"1
íà4¤dVwQàyò#y~Të[g¾÷Olûrû^ÐéC(ÿ·ß|ùþ÷ÓáþûÿÉöaúFëÊ¬¢Sê+å_Ç}SÁJ
eÑL=W7»à°Wf rKi3÷é¼Yb	¦ã<nUSTÌ1¤Â¤T>2¿ÄÁx&zSPy´J½º ô®$w¿+Ã=ö¿à:½ý/@|ûåIGêÙ5QÔ² ±ÕÄj
qT!²vÍµ¡äkPÖÚÜ#l0÷
³eº%¨àäj lð5Eìjm*
LÝàdHýZ	ù[m{¿g¯|§FñX{GþIzÚùÕ0¼ó·Å|E{ßxÀûzû\³Vo6;R3ZËT+3°Ç¢
ø#²ÓænØÀY#1µíÉ»½´NÂ%k£Å¢ã¬CÐÊ=TºIj\HÃR'qmf-{ýåHøn\´ñæ.óO9È¶[Z/hÞéÓàûÕÛWr&YÅÎ¬DZf¡¯ IMÆnªfè{u]6I]
ºÍÔ4ÝIjdv¨+Ì&±ZÏxê+x÷h?ªev¬ëÃÖëÚ¿÷$ûù¤+ÊgÞ~e¹Gjr0bÆâúT+,)"&»xft²äÐÚ2©FÜSN¬æ*gÇbøDe:pÆó!ëÐÆ`D>ÝaoÌx,µÈ²ü\Eë:ï7eÛ­¢þK'gï<ï&ü)Ò»îÍæW¦ñ­G\$ï×úoö²¹9k²Ö;@ò7@T.Y#SÐÃ:rGälMÑn  
%
a.Ru0$:ÍvVÎjJDÁZV@lÿhv?³~_Uy ¡I¢Ý Â^Z~/ÁCçH¬ßò3Ëa'¤hRÖ²©jV	¨VQ,x\\«jU(8l$»ñ(Tg9+çYêTEGätÊ<ñM%¥¹{:38¿ýôøn?.ZüHó0ÉÉøaåî8ù%±ïæ?.ùÇ?zM°®÷îï¢u],ö¢ÐÊÏ_¯Å{äÔYî»nFöÂû&«ïåÏÎfJ÷Ë[='®}$=$µ·ëqú»ÁöSgFSsødè²¿JÑ Èæ8êÁ:6ÐNÑõH¸u¨ÉÁ
ÂlLw~ âxê
¬N¶Áh0?[¨¢o{ûêôSüÁôüÎàtÀõ³u~v6:¼È·´³wJ±XÍÉt0Lµ+fJÕjÐ¢âtB;NUÖo»dÝ­$¿õHv çò2±¥öm°áRÙÒYfvú#,÷fä¥±Ì½üñì'3OóBÝÃV¤S·%
^µQÚÌÚ|ØzÔ¦6W¡>{d8Maë0®í<'´%´spþð°¦Àþ@ª5À³~ÝVìÙSè[WÇg¥ÿ_µ¿¿õ=ì?©9<¡~üç½ÇÔc¼±¥³¦JíÁ´lÝ2>ÓÚñz´*wh1*¸%~
c
ëô¬Ñ½«fô!®UPÜmºk¹Å«ëà^#ñxß2­F·ôÙ_Î¥·z)½öê	¦ësènRòu2Gw
%«9ÒiÈªëHéÈ=¶TÄÔô¥3dù}KFëÚ±d6tBX]â®ºÊµ7¨¹n1Ñvþ½ôû9í®ìð8îºà_Ûy|¡;xû:ê»Ç(âK2'¢34CKÌSîB0H®è»%m[Y!KÁ;»=FY¯Ùán	,Úl
¦{FM%¤'T×_.r~¯k>>Ãëï9¿P¿C y#`ãÊd+â®cèÒU#Õ}z´¸Ãáv
Ø{¸ÐWîÀI·
°jv+ì ,³ùè¸ãOXnÓ§íÏá[¹ðùÖO}¥AfàV@Á¼;"·su+æ¦¹R±)Ó±õÞ[/¦	RÇ¹¿¡)ñ8r%;ì×{Øê $ÀÍí	Óãç¯ï íéù·ÿ¼¿³ø§ÌÐ=8ßØ~Rý_ë±ÅUf#k¿Ï´p­  Ð)§­Y:O&µ9ìïC×æÍÏºs-¼vgÚ> Á.æÝà 5L#i:]cGêèßÓÐ¹vÈý¹ø\è^ºúbAu`PÑ§¥Z¥ùcN'a`nK$].ì£yícei¶¿'qaÎåüÌ6MTìxaÍÜFäËp1Ç½»Ü.;PuGÖÏ¿/F;ÿ½®¯Ûþ}»ÓW	JÙ&q}»`ÔzÅjn]×E=\¯Hsü]¶ä¡#}¡3ZnÍMæèXÎIß_òiÊ3¸=sôbctôhñù}	_Í¿`÷oø»üÎà«8I¾Ã{¼8gÉô@uÌ4B¡Õ©}0é¬LZ+u² [9ìpÃqDP­çS(`ÜD¹E°{>ÐJ±]¬$1±®Ç$f{¾²Ýiâ#MùÞ?ë}>»ÜÂy)Hôä÷s:v½ Â´e7àrKÜfií9¼sA|¡êâv½MAq#%6À®Fic³¦¹ÊÑ}=LÜ¡Sq. âÆ£Ùõ½Xxniòö»ÈÐKùí_	Øùex»ía/W®i²Ð#ä»¸
4¶±qÏj¢¼Öâ¦pé±=NakA
Ð+|¼5é@Üf8ÎÐQÓ@Þ¡¡ï¦óeñSï÷ÅÏùÎ¹O¥uå2¾ðæíTóýü?^¥Gÿ<öd$ýuÏ[ÒpÝE¤¿4|Ò=ÃçèíLï±,üyW¶¦*²¬_¥¾së®Qî2È,¨pÌó<>ýA­UC¯eiY{÷îÕçÊ$ÁPâÏÌ`¢¯!MUãçQD¢]Ðgk$lÈcb«LÆJ'p<âwqÜÍ)UÐ
ËV ùNtñ,p·#Ô7ÍS
©	zWß<×,¯ý zâçKólÜ  =>ónj²0WgvAa¹³Î;ÞÕ;b&ÌÁ=4Ò³´¯sy´Ý½ÑIMÆ0íØ!ï°Üº¨E<_aÌùÞ´u½âéÂ§¡'å·è_Ozl>XQ2¼ã©áñò'Ìµà)©Ê§0¯.g0<û©Kª§FË'ýÉIóL§´æÐÝ|TF¢ì7¬'ýUñ[Y5Ü/ÝðÀêÎþõÔ¸áþYT
Ã°NõarËµâÂ«­3é4i¬Ü®Â?×MM®§é{Òp¾st]3?/DÏéÒ< wÌÌ`\¯ô<VCÚ÷ÕÛÍú Z4Ugk¶³¥Yõ[*íÓÖ/å]
dGD¼ôdíWrBØVMÕÒèMf]ËíôW>Vw¿6Ï¾µýò?ï®Ï3îÈmaçlsèå¨ 3EñÜ1ÍiSf	[Y´HDìP§Sd"t43c³!#ós<©ÒbUp¦E:K¤¨ÑÄB¿µñþ§ w÷NÕ 
WãK}ÎOìq{¯ì¼×Â+.uÚm_ÝPói ýØsÞ×»c4¯[9Õ ©5¶ë±Ç³çpu¾u»ëúuzCîÊYÙ´9Ö7:¼]×M×Ç XÍtDL%¸qL,<ykÞ4þ¾¡ñ±àØ/C0~ÏÏ	£sÜµÆ'rð«õÏÔ_FÅ¾³d¼Ã~U'ÌÍí.âÉ\Êu<íí³}]Éæd¶­µ Üb½Z'$|èôzÒ7ñF¦úÚÎÂ¦2=rUrm×h%a·lÏÜ·)gøoBñk\ü1¯ï+ÕÔö½>ß~byÅëßEó2¤ðñÙU±éÆJ¶ a`lQl%âIUÛd6[ÛP%m´Ûëb²ôF¸äúq¹þÑÁtÕ§û× ëy÷üÉQÇ´|$ý³×{±h<!©V¤xgvÕÊ3k¶.¨¶<Ò³ýÎR¤w¤±3ËM U¼HÂZ1ò¶õ÷ÝÒ¶rÖÎ xtE¥´úÌ~y«-OçÀîÿyS¾_÷?1-I«;~¾Ô»:¥9Jòõ>ôÝ{¤ÄÁU¥(öa}ßv>¢RÝaÐ½)w¥LãÈêKqeô6bøÕÖljkªÑí2
¶¦³E<Á'Öc¨ùFÊÔÇ¥è
íúO²ïÎÑþzLÑot/£áÇÕ9ûz²Äåtåq
deXq:·Fó5(9$$×²/ô®Á. =^1m»½X%ø*JBìÃÃxn;¬UòÜC`ÿ¾6'_·¢®×GÂ,>Ò~ê­ãùBö6\úÔ$ÏjJ%n ¦¶gÇæHK³}áµÉm]ÝÜ9Óz²#©äå´å°^-ºm
¥°É-¸>Õï4ßÜþK¡6õR®=«¹:	xzOøòëå½P*Ð¼Pv{¤ÉFwóãCQÃ 0òð>¼H¦£Y-y¥µ¥KIÞ¢Û,¶Âd©°Ûô-Ãj×¡Ã+Çï*{TÌä·q+]0°niä÷÷_CÛú ßuÞFU7ºÜÃ2µ1jøe 5[lïÙåó&¾ÔZ.?A6ÆnmRÃ;$åÇè0ª9CD¶PûqwÓ?AÙ&ß'§
NÖìCsûìé³m|Ç¼ìq!@;ö	­ÑÁÐeøîVMqìµ&É¤#¼ª,(fTó¸ÞvW²!ðt­Ñdq6e¤6ªCÈ/nFÝÜk¿3)îðºö`L^¯Öê?¸óÉlzÈ¾ýÕo\ý«;÷:éc7­K)æ¹9N·ªBQbe®¥QvPéS¼Ò×­Ñ[Mñz¯[2çî$c)dX¸À°*mÒ}5FSûqú+[÷¿2Iì*ÏwÆpç9M®o<Õwå7^ýÅ{cþú.¦£jT`¼ïp4tËßA8Y»k¬éõªÎ(µCçg±\­bÓÄ¨U
¸ÁUgK~{ËArØÜÚ ø÷,+~©»}c«íl.<ÄóâÂñû/6É÷ÂïÐê¼±ÅÁ
!ëV?ì¹"eÍ4$ÖÙÄÓÚ
,à&È,³ª9bô½µL(+}Õ EÃ^ÎÍ¿ewþö*êýt92óò¯Êé¬ÎtnÛZ5ÙQh1ÓönèÍÒ=»ÂQçk¿²»(`pØ]8Tºó­ µª?ûµæ£Ù­ËÉqÞH9<ÐoÍ¦O-Î7õ}©]ÿõ}ô¯h¶H¿âð±¼ùÆ½Yó'ËÆTF#5kc@1cQ5Á&	L¤ÅÚK1e$£wc·A&RöX¥VC#­`Â¶ð}ñh cÝÞ#Ü-5õ·±åè§Z+Ï½_¢}Ä/@}èº²)Ð(8ig³©HL²u{àCÕ¼ªX#4ÆÏ	ç<;BÒ¥yá÷s[9©V·bÊ1Yñ;¤ÚÉÍlm_ÈªèxÕø1ÙW°:S}éÜ~Ýg%ÀÌ³±æÛ.S³Ü¦·ã³Z^»~[TMHøÒX/  8Ú°"²¨±ª´½¦,Ããê ¶íÍ¡·åx¯\zyÛ×¶
?ÿÀÝw×;6ÐRÏñÉLUÚî¥
Ö.Â{4©NzD3ÄÊlR[d
Ã

³Ûe½TimbÊªõ»]¢²KÙ\ Á©¹ù­eÍ?Û2¸O1WP|ïH_0×q6¾ïz¤	;åqÔ«EÄ&ÕÜâí«RÙË§¡Ôf6¬ããÚÌâÙÚÇ¬âó¹ÀXÂëÆâK`L`Ëõnïo¥þ+ì
oR'_Ià½½póÜ¼·@kPKf­æ»½r fZÌuf/O¶ÊxËÛaªÂ*ÇÍg4KâvÀeN7Úùdb$M¢[²Wºs»ýF)®ÿ.Âº&F¶$èÆ½V'.|+Ï;gÅµÍXJ¨îÔ¨T¥î¾m,I*f2ä­rcÚXFjUß·ÐÞ/v óÃ(×·ÿû2<úc{ùó¤ÉÃ ýü/ ý|ãÞ:ñtëév9	ªv=Ûëk·6>ÕÄ$$Qh/>¬f5Z÷@"³ºà­¸%D	#d¢¨-ÑYîÞñ+³wö;MÌ³XùöLÕ¤/Eï4jJT½WûØâ~áãk^Pç8kÃE¶BüÕÔòJÜAà6ÜÀÞ W%T¨¸!©5íi¼½^ÇkU)÷!{ÏÇ>ø!Ý{¡úñ%Ô1FØ»kÓh3z!µÝÚë¢kJ\öª²8É½m;ÓÊmdGÄ8ÜïÛ(C¼Â+úù¬ì·À¤¬Vß¿¿:¹õ;¹S?ú¯ÙWÄ÷;Ú¤ßu<_ÈÞÆ»ÒÀéø¨,BEÚ¼f·p®meÞoöêÕuµ*`ÒMÌ3¡lD2q/¢!ªTNN@sßR\þÆ±spü¯=«ßûýKao,=ø|ûì!?ÐÙÚ/÷Þc§éA]Gh©ÉñSR·	¡eìMº¯ÐÞl9%A	Ø)¤£OyÃóXgZÃl °MTLP
ÞQ´=Ñ2â¦ÿüo
PnÙÈÝÈ¾4\ÜëË²¨8-¢7À¨eÞNvuGZàh%ui Õo«t"/
Y"áA²¤a#£¬É¥û"·.+ë7×_±þKî¸ÿ+²oP}a¥ÂÕtÙ}/£DR£gæ¯å¡:¦­ôb$ÖsÍM¨)ØÜWònÒJã"CªlÏí¥#Y)EËRþP½ÙO¿}D¯øL}{$BåMm^ôåÎmä[Êwñ2%,{Sadñ ÅåFiÇQÃËS©³PdPà°Z¬ZÇUÔn¶ÖO$1l±H´	Öýrj}¯°Úëxm(Ïì>ï=r Q-Ï¥h³ÔbÝ®ñGuaìÒAH^dCHë;»Ý~ëúpqÇ-f3¹ðçËMo&D+Ù¢ÛXô×Q^¼·oË¯JõÂ"bÓO÷ãQ<Ï¾©$n®¢8TKÞ¤L&æSÀ·WÕ
äYyD®_Z´í#e¼­4P©/¡-(,Æ2ÿ
÷æm»rçÝ#¿Î±ðîAQþ1ÐzåZb¿>û!¿æI¿:ã_²ß_b)ï9´èëFP¤H¿2 R½Rðm?C÷¥cvª»)ÊíD#b¬ªµ/Ù½	Gî<ñÐÎ©Ý^R­/õä¨xJ7¸h£/\µ[CAEàÔ7bmþ÷Úsl^åy;haõ¬óJïGüúÛ¤ããsaS=w.ão*»<J¾WzW%øHuÅÓ >/$n°Û:Ö~»ïù}@U¢ëªCW©c\zM­VÃZ3CñúÀ®à4
qÈ¨wcÝ) )p»I)+ÝL¡[äø¡"ïÐñÂÓóß?%º§mÀ+lRI¯TO¬üÑ>ÇnÜ1ß$QìÐ  CéYÏ6NU Bª4³z]JDO¦ôl#ÁÊ-z4Úuª.ËGäcïÀ^û±È,´O¹ÐéÑµ­øÉc<8Ñ¼pàÔz>Ó¹ýþMÚj*$­¦3Ì¬hmÛá®¦!@²òbD.Qñ:+b]¾	Ú@.¼°£¬¨t
6dDÊ
ëzÉgÂe¹¯¥ÇYù£°ñÅø'ñ¡ñx¹¼wHZq
p0ô¾n)>Ï4nÃ°V«Ùèý Û@ØT, 
­[H³é4m¢ê{
XMÓý:]¡	cSü?ò®¬IUmIÿç±	7>2(Ê(cGß@Py!¢û··híÎ¶´Ü§ïí~EAR|äÊÌ+3vè¼QxÁÑí=6üÈ+/0¿ GÑ?²}úÒ¯üîÖéï'¿£{ÁÿutY} ÅxìªHRÊz VËò&¼ÙEóãº¡hlKüÒ|½¶5TîZÎúFÞxü©uq2áðdT¡öí¢×vîþ.HÜQ]º,·,Õ!Rû$Nð°O§G'ÜGîäySÛLm[KÙíÁ/H·-ª9jC½ä°Bè0¼¯SÀ	]V®&«WêhÒ®dcª ·Öbï!W_öo]£ýQØÚ³
5õhøëµ	ö­PÎ³PÞyâ+¶w®{t½ñ²B%ÎÄÙ}ÇòæAÆ
ÝíáõEû®ÜS×o\hÒ ¡+Z²±-pCl.¦F¸ümwjø§±ó¶/`a#ä±ÆV"t¼ÍÃc¹1ä¬ÛÄ£¥m÷e/ZÍ5* ´¤dMAÚ¶u¿ñÈØâB¼·ÛÞüÊOnu·¿ô/4ç?ãÈå÷Ï£ªHuFnU:ºYzq¨cõýHÇÊ&¼_jc=õp¬ðôpFÞj¥î)r6P³SßN<×²Í"^íK¶9Ï÷Q)ïêMu6ÈÎ^¼Û>±sÝi³y¼Güçã]×Múq³yñXºioúÏkÞ51ºð^®?Tj;_yÍëúáVCÑË%ã)/o\
øüônç}WÆ9$/ímEbO,Ï¬~F
÷9þÀ« ³©h¥æI]x²%Ýtªû4«.Y"~­g°,®£õ(JØ*7¶S0LáÃYÜd¯5{¡ç÷ÜÛÿhZ¼Ø÷czÉç¦ØàÉáçÑ)ðÖHÃlÉ1ÄLÑàèk`¥ÄkÏs¼KHÉ\`81«\ºî(4U#ef.)4GïN³èoV5rPç¿¼¯fô¥ùÆ¹Ä²ü¡Öð÷ÿ~[N'õ8ý,
£[9ÏUmx¥:°êçñ£µÚjãûF?¥KáDã	«dbÀo½Òî0î:+bµ¢¹a6Î aÁñliõ"ê»%
©PUÇw_÷Â,a
VÏYÜ$7½ñçýúÛOçmtFtqwþ
d²ß1³ÕÃ};±c	Y(°×º¤é¼et2¥t«"¾?;o¿0ÅÙâ«äô·ÍÊ8jÆ}U4*pñî ÒÛèÒµædGÀ{ïÔmè1h:(S1óÕ]Tå1ª}S@úÞ§p%áÂ´
f[9Ñ ^÷u&È¨P§Z§iÖfþ¼òÍG×w¸(ìÇ3ù5ð/ny6NøÍ"q¶q«Ýÿlô|µ4~*&üøßOÆE]ãDöµ|$@D_zTÉ-{x0
pû|s,½¿`utíÙ J¼ÔÆyUOzCº¤CÎ°³rä¤D­O³ñ­2äwÑª<v£ôËûá­¾ýÕÞPûpúë{ tiVï]>]ñyGqe>Â£\JòV1g·%S"+d­ :û­êþ­©Ý¾¬4{»©LV¬Dß²ÜE.	Êí-·~|~ïÞ~Cê2](ÞGò}a©Æ±´»ieÁU«ÖZ.n(e¯Ä Î&µË("°aq±°'m
rôi­®A[ov=köó'd+«Q¿òÖû
ß_z>Ú²%îÌ îÊ8HéÔýT÷áÞ/jÐ³¾9Ø±`§Dâæá@¨.cÜÂüvÕi-â0¬Ïí1D2õIÕ2ýÐmãö-|>x2ÐKËîå|ÿâ¤~ÂõÏO~êùYàô7°ÏÔx¥:°âçñèBë>\¤TBçíØ¯)¨©uÃðÊ°ËfPá×S¬dÄæ ²ÇÈäOÅ>?6e$Å·sò(ÂnPÑì6<?õunßï1È¨^¾Läÿ>¤Wg<¯¡~ L² f»ZãYû¡!wä¾Ò:¯eâÌ#Ó9dó~èµµ4µk;Q¨DÖrûýt:Û±t·^Ü=×à-)IäÙÏ6·æïç>¿ |\æ²²¢BVöÓ>Þ8«â6¯y$#µ²KUíro÷Øn>VÖÒ½~B÷A#8a7^j²C³Bïy_Tq+]?xÓÖÚóÈÏÞÚP"Ç_É½½C?\½oxùë¨Õ3I¯T/z9¡¥X,GwjDí[X1mD ÝÍKÉ0KQ¨ÞA
É_B²Øym&(BXÏR}«Lt­c|¯Q]Ì-hEóÏëFÁ)wÓ \ÂGßÝðor#w«[®ñ43¢/¼GÄc¬($©×`^6;¦y24yFKÒ$ÊëUÊéÓ>è¯Ìtm ©±t#MFæ¶ß;o2ØÄx@°K¤ÖDCÜ{¬¸çàÃì
ÿÒ~ÀÄ#°ÞyÐÕ%"ñ wO±_Õ	¯,È¨1K³Ì:ÎX[EÀIÖôõØ{èñ ª+2$¯Î¬¥¶<ÀÝèkæèU°Ì¸<òíu¤¿ñÍôýèr÷}zæDHS{ÅìJn7Y]1cÀ.!3ÅV>?wVæÊ4ÄÕÔÙêþÄW|MæfÃ.ØAùõÔj~8ò¼îuÓnÈJ¢%møC àãÑ ò§îçõ.¸¬Mw4îcê¦Y´¹©nÑ'&Æ+É3C®e&Ä@Só|ïËs·Vç«)¬ãzºIõ{r¥²©áÕVÑ¥£5âÉ;zB:|ºat?jÕ)·³]T¹g_¼
þýË7Îüq`ÿä5vðñ?
/¸Ñ¯wüçËÑ¼>ý/Æ÷+7.ë×ÑÿÛËDÿ¯6?\Îø_ÆÃÏYSa¼S·nJ7
-Üíjó³>Ñ¾ÈË3z[)ÎÈ BZNvCE¢y|9àÓu»=5Þ¶Sl&ßýõÝdyMÇLEqlU»ßaãªMÁ>é¬´ok´a0*8p«à¶'ßFê=é§÷ãÑè}:j%³&;'/¬DÚªA.Ï$;[±9Â»1ËB%Ø&#®	øï¼¬tf»"ìÒsqLEØBÏ
m¤"nµpü
¦2j})}®ÖGÒÞx´ì8¶¬P³Foæg#Ó;rSr.ÓÖ£[Dôï`´¾¶ôV§ñ)><å`#rêÉllÚÙ~ª¶~»¼es¿ ÅêüõK7½:24>Ñþ ðåÌ¥!Î&·É uæs4ÕóC¸ìNõJ,§^&í)¿£%5ãÛ¨t*òª;JørËÙr@Ü`ÓeÝ÷²*ÿ,?ÏÅ¿v(	u| |F÷Ãøª÷^.¶k%=è)WlKvkÜÐt´¡4xåìæU`pjÊ8K°
°gb&ö-õQVWx#û:¶Û´¯ßEÿfl¿háôfxG÷
×K§uª¥'å=?á:®+--ì)lYLè}ªÒ¹ºv·bÒQÒºßxUq»+&´Ãæ¦]"®YbúMÏãGêwÒ*ÿ²R:ú>øHû
Ø£+ÙûàÎUGS~uiPl×rÑÙTM´Ubm'´b«ÂÛ ¤Å:bULi·¨keÇ.føØ#Æ¢T6Åè-x@SdÿE»^<ÝíõÖßP-Ý7>
£ëÎÞû<ÑtI_ñÜB^èg¸Ë
ZÛ5z:îÅ:W 6XC±èÒT	hêÎN»FÜ6bq ·?t«Vê+sõ<	w¿;)>ØçsFÎ-ýýl¨_qýñNa?
åu Û`6ézA¶w&²ÃbÔ/ó«N1a!ÙÑùötäÆ[TqðiÎêJT:Ø¬'W<	è¼¢bóü±à3~Þýëî¿7\.7>´Ãçîöþ²'û^Î¿ø+ý[nÚúÃÏÔé7z9qù\ÉûBå'Y~H£UçTh¿ÈvZ!&oD(_)7¦ #Sh9?¤æê­±²aüq=ßû
Ê´Uë~^ù×þ;xB¨Î¯ÿÓ$ª³äM°¾@ð=Í1tÄü×ö4¯ßã÷»ïpÙ¾Ó*MÀ\TjFo@K5Ø²/ùp£,suÆ¬uqÑKëìåLûNAkVÙ[¯@³Âµ!^E
þ5âþ6»Þ7×¯^ðÞTùº6ù²1óseÓ>P~­6ÍPcÉÒ©' Ê÷\§Å4¥2¨Á[Á×'%µMRHE5ë4´¥ÐÄ®RãMÀ0ÏH#<=ò
n7êöìHK|¶¾gýöÓÿ?róFük¹Av^(¿ÉÍu|ÉÊ{Àeêh{oOÙ¥jâðÔC]õ	Ýz{«ìØò@øzÝ	6Ökk¦8HAs ûùÆ Ð=ÚÄ
©¸èÊ3XmgkDM¸ú:ú?.4×N®¿g¢¸ÁADÎ?ÆkcÑ]lç ¢`ºªÐßg~­H²kmôSê8L¬¬Z±:Õ¸LÀ vÇí¦Ýy'F¸3Yõ¶9Â<b$È1Ë½[;æ"Aßjaû²¸ÎníJ~LQÕ¯d0_£µûâó\!A?©¾#.ç§B»OkÚÜEkÉ\ÀBÉÚ(8[{x¦ø«l ªJþ²³Á²dÓ5Û»ù­gå¢ëç1Ä?þá°a$AZíê º®g
*åÃdûáþñÇoð{9çÿ>õÀï¬Ü¦¿Þ=óõ>â(n^ïr/4ÏòrtIexàÃ[Û®ÐkE®rDÄ7Ö¶LíRkÉÂQþðu0	ÎØç×9îsùMÃû¨à¬|vÓtÌòñf¡>¯»Ì¯³QÑMð*)ßW¤ÿÂdàw©Ì¿â.öT¬ò'Ñ+{¯éÞØcQÊ¥+îkÕÔi zKPl}7[u±& 
px¨äj±J;|Ó¥9ÅÕÖ1¨Øºø<÷2dÉuIÉa·¶ü=Àß7Ùÿoê®¬IU-Y¿ß_q¢_i·oAÁA¡#N£2ýß¯bY¥µµ¤Ü»ÏéûT V.ù2Wkeæúîöÿ·ºè»ÓÔ
¢±uNÝ»o:_âôÝ!N|¿û )ül!%U[vÝ"gë}ÂWHÛ9sÄqæ2¦ÒµYðüBºØu@K%d~
à)dLc¶.ù¨ÀEéÛû|§
Ü¨øú¿×ªio(7h]Ý·­e0³Z&èÆ µ#Ô´p4mîL+M
ÏbÈ Ím×ôªãúÂ#ÇÃÒ1ÍÌkÔé	qf¾ÜºÀëóäæ^ñævö^ò(Ûl4û öþé£áµîWt¼ßµí°¡ä¢F¸¯ðjgÚ5:Lª
ÌmQW¹(ÌÄ~¸ëÍ<gw¢ £é`bÅX¢8G[Ã(ì#V5Þ}¦º¥,¶ÔkÍx[>4¯Jú-ñ´WµwJ1v=yÛ¤bH%ê"I ãÛÐ\'M%)×>ò&I¡ôvñ¬|RtHT+4%Ûí0ALæáÜÆåÁ¯åÔz[°yéÀ®ÛûñÊÈèÔãeãGµ 3öC{
¦P~~`XEÛ)jí&L0Úf%¶@Ú:A¾[|¡fî&!ªG&Âì¦{ Ò£RÄà2Ø3?êw	ë¥sÊ#1ý~¾×ÙÍMÛ6Ð=>ÌaæK FÙ£@ÆëµA$T¿fWq7@UÕR7
wa&åA>ÎR|;ãöY)³²}©ÐÝj6ZÐDþ½:þîÜ,³/ÎÛ^³3á<ç»ÎàsÖ:2ÝAøð8eÅpL¡àE$ÎX?ÄµÃNÎvzh²t]¸¤ó´^ªE]¦*%­w7\oôt%Åª{í½=¶U×u§L³%¦ãó«¬á·¿&÷ìT­xNGÃ_2omßç~jÖJFº7¾@§> ß·ª÷k_ÎÄÍ`±ÈqwpoTÚÓézÈ]´èò
1
J9µlÂû,øPm0K¢çî85As)(zìt(rË°ù%-õ~]÷_þoÏÍx{äÑúêùNö4!ßoÚR=CîÜÀK|2£T »¿Þì~jvkZÝ¨E¬,p]ôHX3%<I<Óû>Xrc¾®c²[&ÈeÌÂþ¾¾ºªÉ¸
|Óâ;Ð\*%Þ¯;
­çÀå^asÒÔX°ÃC©Ìú0 öapòQµÓÅs©Õ±¡£²Á YÌz-
Ânìþ*].dåzfïõÕxUQøÇ¿¦»õ¢ÀÎVòû°4~I!$çÄÓ)-´@imrJ)ª*<áº¾7ÒÝjjçõÁ´?#È¹ÆÏX
ÙÙÆ22æi ìÃk¤qw(AKÌÈû²?ÇEÿeéÅÃÍ×Jßh606Wms]È9|e«êÜ£aT Ka¹T»qú\Í0ÉÛiC J{>*%¹öb¯Ë(Cx,m»Õ^ÔÉvvENûE$[å%q{§R×ýOmP¿R«/çÃaNX?|ØzYw­Uµ
2=Rc0èj±YzÚP*'«Á.ñ@#É7y
×%$?bkv«YÐ×¥©½Ìû:ñKæ¬uÁñåóañùÑ#_ûDôíéªs&ôI°:0ÀòXÜÕ¶Põö=}I®Øé9}/£jâÌ*ULÜ,Ls¬Â$/
Ñ,HÒ*d×ì²ÚxÆåGïèÜ½#ùéñÑï<äSs_¯²¯ËuôíW]}Aåïÿöï~=^áYöÖs/Gº|©ãíUÞLD÷Èw·õ?RNòØgÿ¨+ùó¶¦çsuç»uÞÎ¼ÙOÉã23íæUÿcËå»ümIÊM¯ß§§ãI=\|E_ÛE¹¡}5ÎtÎdÏ&7É1öá¡¢ÊÔ³yH­G0»M»ëc¦W+ª¯£þzà66ßÆa!pÇÖw#ÚOÓ¤1¤Gî`N_Þ¢Ù¬?âM«?oötë:ûùyãÛÃïW6qÚÝH/±íìqÿåmyî#ÝÊQ¸eæÍ³÷¸oë`øÜ­·¯Åæíªs&ô\^b~eÏû4±°áV¨XRdpÁ<Óx»?øæhQCÀZzX,¶H,	±@Qê×åÅË;fÙõÍYÐ½[Q¸Y8º=É	÷¼Ñ°³#yüä¼ãl¿>JËø\w%vÇgïÜûé_uâ[§J\dÊÿÊÿ|!Äz'{¥sü³Ú"È²haH$Ì"!w<)¶Üp¾Ô}î8}BÀÁ2gÉÂ(½b#%hìDj0©:AqQpLáEc×í"¢=uXX*O÷W¡½5õÜî\¦ì~ÌO|SøÔ6j{ê5¼à3¼¦¨püÇ·ñIû~Õ­î$ß/Ê¸CÿJÎ®>m®Eu!*n=fÜMx.(&^Õérøòqæ3-RÌïäØÏâÉVúÀ²­ÐCFNFÍ=ôPEÙLùÝÿµÞâ_ì·]w4¼ì^Éö¥¡yÓã#xî¸ÐZæO+àòú÷-Àu²ñØþh\NnøÇÕÒØ
éÐî_ÿçúoÛùúií÷IÓÉ×ZÜo:Ù²e'À¦ªdTÈuW7âíYj&±@2ÊãQfÇn©ø´44èÃ;]yC	N¡Y<ªÈ6âL¡ñ3ñÔl©ÑÛÌ¦¨£ mÓ>éÂ¾ã/+Ðï±û%C~&}¥dÏ4í[ôIý|â¡¸ò&F¾ç9Çm¾¸`ahf/W¥Z:wëLÖ¥tÂi¢f2¿mdk8íNÞkE*Ö3ýú<~Èí¢³ë¢y£ïÚö#ëïFÿåæn¹Eñ®ûö+ê§1®$îÓÖ.t'iPVAJDPÈZG+JEUUÒ&ÌÁ3sª¥æ|¹¥k5ÚuuÜgy±Pà¡ 95£=36©òºèßäíd-Ý©Áxçø¯ýÞ;úñJJÙwú)¾ï¤½`o+v^ÜAÚ¥ÛCÓé ÇÊ2sÅ°×,"ã¡D"èhyqX	ÏE
Ñnâð ×ó+$,Äßuñ~QT¨¾ÑÇÅ®L9ûÛMorsÛ¯¨Úw²'ÞoR*¶
Lz-µZh¡K'î*-04W+×dy§k v²
=[!y d H¸¥r¾Jêi©nf=eYg*'Öè¯®Ü·Î Îâ¤Y5)z¤ô
¦º
¦ÎÜsPcÀm48þL9vãB-qÊßÀË½EÌ¦ªY:°KkB+28Ü©® I;µÞsh³HÑÜr»§4Ï@ýÂSþÔ¶òOèsÞ÷çÆ
çÎü7K­ê×ßV9±Ó:H«®jóÖíü
[±oDOÜy»l»[©.ÓL®6Ô#rW(YeQ%@Ðù ëm£p&ìjË)#Î¬ÒÁ&Ár¨»:Tñ5ËxÄ+Ú°pRbø5¿!;±Iï4­=tÞÞiÒÿØO´¨~ú¤Q&-úTÔ1gËKèXÕÅa 2>H4 0u+4sUo¾I)`ÜD[DÔp	ÑA_$Öè2
è>GáâÚ~'ír·_O;¿³}èEfÙñÕ8»ÝîÇÛ÷ÎÛ&ßãóäå¶8½öWÃÉ6<~[¼j?¹fÊ?4â¥ÛlVOÚäLä¹\íDÀ¥6cÑ]¼ËTó19å\B w
PÅ"Ô2vaRf9Ó
@Á¤UÝxµá6!²
àáC8½=ï(ÏWJ1Zïë±âð? üì;øÇëÖ@C$Zð	iK$)ìéï%Q¨[o
~d$6.%ìÞdPa}!úëïç±1¢QnGp¯XFÒJóHþ¼²úM\¦Ó['ðÎx.gýA_G8Y?'~´3moñ4ð
}É£»¢ûÎ¬æ®¶óé±BÙ¼k]á+V¬%½¯oGã*;lÚ[qÔpYkÉ²ºkÑÜÙ÷'Ð$ÂÕÌ0=eÄÒnÉY2ë[-±lÓHõÊ¯¸+îoÆ ^!xtßÎ´#6VGÌ3¾@4USú¡xoPH_ÉY¿G-Õ"ðº4wÐåxòålÚí{¦Ië¤õËéh9KÂøvÀpþÝí_ùQ*[ÓÞîûKh7¤ß!z»ï>ÉTaÐH'r}K³cÝÓÔ¶!%:£a9tÏi¤ÖYCà§`?¢2p}uïâ®âRZËIfí¹ÿ½z6Ëâ%	ø²ßkÊØ6·3ÉçÐæl3FuW98jÚÅÞê¨ñ0ì¡;¢<¨Tý@n@á°gF¥0s¹Q¬YTýy¹ËÚÅÐªc«®½i§pÿ7³CoßÉÊ¨ûÏ)ÃÁì½¶Íý®@|Ø6éû7 ?6¿£76ôã£Ö%10çK½Äº5³	*g©r§>¥NâÆgêõÖÄ²8pUìÊ1¼Å·ynÙVýgÑ-1ÉÚè­b«Äoàì=ý45.¨ý=¼ÿéw¹û-Ñ°¾Î@)¥ïìY¬K
z»½ÙÎªºÃù³MØõÀ}5¥5HÈÔtéØ;ÄlØ­&a/8eÏ¡âòLLxd»D1¬uÜXJè´É/\«sòm;T-/K`Úû½éè¢§ËNCé9îL	2¥U¦áVTëáÈ~°4ZOäB¢ÃR²R1pÃÃä¸Íò>Í0¡ô¼$Êr;9ü
·ÇÀßÞ÷?m!¶6eÎiûÇÆ.Þa/¤ýûÁ÷høtïA3Zä
;¡³CÖì^`0Ùò²X¢Ô½
MÉÉìG{	`5\µ]K¶¿WvÈ9Ùð4u­øð´#ç_Ðåçþ:¿agÙGVá§¢#ïÔà*Ê=ó}s27ÛØ8zôîe=îÇ§r;×3ÝQz§EÎeÙ 	zßÄ¿©ËQí}r{²èæñâù+Gß¢ë{:P»ÃÈ§&íÑ$ó%  ³ß£î0¡»éÒ:¡Ësa>Y<`ìy~B]umJUo'å¬H·Þ¥¥³Gë±ñlù;b}ÓN¤½X%´ùQh"a²	ìõ7Í÷ý§¿Qà.éu÷$ìô*`'²÷Åí0³r"¯É=(_ù¬Â9G¿BÅ5eéáèÐ«}jÃÜBé]¿¿ÖÔ[hËµ!£hîª5 ÉEYMGÄÿ±w%]c¹zß¿"NméHãcï¼c3yÄ½òçÏ°x¿ýaCD0Ìî¬>§6áIÆÒwu%]])`
I
Ô×§·¿3#ß¾ÇPUâ^+#pJøFU	B W']g/ZS
LÈÁtA
ºpæ0¹A´jÔ@#3¤M#9Ì¶Ø^4 =È³M:©¾Ô^®¶È£Ùö¬9Gzßwþù¢RG'«¿*¥F9)®ã1L×* ;ø t 7© ¶RÊÞ²fÛìe"OW¯®É,Á:mÑHmMú:Õê×Ò|+Ox]+	³ÛÝ#Ý~VpØs°÷.S^X^$ß3%jæqE²dqõGUP¼Æì9-9]r0Ï¡ÕFÄ¹B»tÏQqiJ  9ép½¼3Vpæ°:«ªÜHÈ7µ7)j®á(ÄRºî,Q}Á²úuoÇÏßÂÈ
¢·$xË79ÒßüàÍ
|CÞkÿØkj³´Ú*µÖ¾m]«µ¡~ÜêuòªB«½±;
\7½çæÍ_ÑeÍÕï2±ðF;p´SFødHDÔ¥Û!ø([§iqÖ]¨äã<3xëë9ê¡í1¦Km¬3Ø7áC¾ÿ:]ÿPE7
¦]õ§TUªëpêêÙG1ìjèÇðÈùþOù÷#0ÅsìkQÙªH¼w]V¬rÿö!©õ&GùÞUyú¢æí{Ã"-ª0ü´üsýäs^»¯<"å+~¦|ÝA®G¡"®þäë"+V³§dwÅÏO¿¥x{8ÀÐ÷âL}â!KÞÿóä3Å·¯YÇeÇªÔÿWFÕê¤äF©_ZÌ{Mwï¨Ü×ÊÖ.õîÉaÝ¢µ-á·ÒC'àö]¢öfuÄ4©ÁChW±ã	ßíCÍìjäâacw¸5nÁÚnÍÜE:÷|y4£þpq¯ùóéí_¬ýRUo'w<Hî¨1]gÿ:xåµ~Ü°¾ÿÕ{ê.h_Iô¿¢¾GîÕ¹ªVw
«2³ÑeÇB_ÒÄÚYÒ9Ö[=¥Ñ§EÇ] {¢?ÑîPs$ÐJ]wÃZvWM#cÔ»?Ðû}¨±Fða½Wò©ºÝ¶L.¦þ0L%â* ÷èßÖ|>Õíö ¾ÎTn`T7\ë2öt4Ïr;
fèRÉªÇîV»Ý|»íEk¤ sÌb²µÂ¡¥!´¸+Ê>lÌ¢PÇÇ°2Ñ=,öÏÔeúÈ
|Ng!¾±;+>pàx|e¿ÔoÂÊIêÏ-4ÏkÛ×ÉÙ ¿=Æ7cÌxïÚÓæ6æM¦`´4í$k'û©L*Z/§T¿çû=Akâù%36ô
Þõr×æ@rú5]í~MºÚ7Ô½ìLWrp$KV¼£õÍzË6õq~8kl ¢G±S0hD¥¯´ûÅCi¸0kKí«ØêZcì6=oÐaDv¶Ýhél£EÁÎPÑ~¼wå£}ò£
(N=ðï8y	w÷ãæn/ÇÃ4û<[¯èW<¾:[Yv5ðK1GOmgÊò>4XÒ}ÖñÆ¤ÅÉt¥·#ë4	C0Áå®Aã}"½t
p¹dé
 38¢ÛCzýº[}\ÐäDþXøòÙø@­}²ãD1Ú!oµæY#¿´êU'§ø®é±YarZ+äù-85«æÜZl¹0è¥¸ÝõKxçªàjÏÉë%yLtûJSXm3Á¤±utT)¬H^§QËQ×
Úäü¹¾lâãÆJ}ÜLNÄo°ËFgì¼nwýrpÅï¦é5£ ÿ"01uEö²i°'WCàH÷(/h9?sXázgXDÐN
WæESpÓ·£H$0ZõácDtÑËÄ8÷T4Y¡'¬¸É«¶R®ÒþªÝ^%2mj^ÿº¿¯ø2^+9]'5éò]·¤óZWÏ3Ê'²9º5;{¶
m`&jÃ-8íÉ¬ß_"Ó´èéIo·¥ÅÌôØå	
UHÔ,b»Ã3²Ù[iÆ¸­´h`kî0ÝQðd~[-­ìr!ûþ7QW²`N	L=9¬ñÒ BB¥5Ãô
íF;¡!FsÂÍÑP#1¡.:SÜ~²ZQa¦w¼Æ8£:w6!º2¹DX
zj¸xúßpæþ|¢ÊUÕJÓÂÿ=Iå8Ù-K¶ßóD¯ì\>¡[Aéó¨jYct*»­êwf 5)cæf+6æ}Ag B6û°HùY£8ó¨¦Íq¬5pûãÃi_S]fRr3;ã zä>Zøª½BuYí¥ýN)R:=®7µ¹Óm²"Ö2ówbß]cÌ6ó;ÊtMwè¦¢a¡k
UñC¶kxÔ¤vy0^nQÃp)¸àèGÖõÃÀNÍUá¸ÜÆ{niwÖk±½Â%gOß[õ"zC2Ãpf«+LÑé$Qm©øÉk&P×ú®ÎÃ¨èæwX1÷g·6*l³ãm¶øÍëªTãD-Ùÿ`Vµé\aê^`['¦EçÌÜßPò¡\=«e¶ªøó¼aP¾:
l
s&Gõ|8~$aêó)ÔWv±~¨âcDåãíb¹íQ3¦B""FÒÈØ¦GB,­`9µÌ¡¢d{ÄÏMõPn«gF"¦³Mä
¨ÅM[Ë3,KÚê7º@ËÕZ¯ï}2×=r{/÷0ØWuóUh¡/A«ùuó@çuK¡f]ñÐÝKÿäè«gíÒ½Ú©ÂtÖmêywît®Yn [{NI¸Hô`³CÇ`97üH2iX*lØÝ#RÕhaäÜç9$Ð;ê¤óÎWJî[¾½Vªçìm_uKôø-kµÖcbâ5MYAÀGÝÞpcdóEÃ
sx¡Þpeé¾ÝÒa+E7BW	«}t-·?7©d¬)á¿þÛ[õ®sÂÿ=*Äÿ©³1ô¾ÏÆà-¶_³%?Éßáà½]Ï´6¨Îóø»\m qB¥\{B¸&;Êã!²ÚQC)6×¼È)áþuIÊx*êÉ&G67YÛtÔ×C4g@UQý2|±ó$W»AöÞÖÁW%.½w_ó9Þ¸v¨§YcpO9ÍlÊ}9[AÑ¦Þ\÷Í²£Ã¡LéM@gu0q>)MdÒsú]ßßöOwÖcèo`ÚQÉd'
,¢äõùðß¸=ã²ýñw^ïýF·'7Õp¿,¿´»VT:±$·¹ÝÛ=QÞÛº°:ïæîßvWùXg|vhþ.Gþr8ìïYØËêù²ó7ßpk ç+÷±FEzÇ¦ø´°h	£Ýxf#sDôF]æ7,A>!
kÁ§6ö´i¦3ê4¨bì!YªÈ ÀI»=³"
§vP<róË¬9Èþá¦ß
Âßö|©í{/¹ºý¥*PY£wØÓIÇøêIêDy¾ `ßÑíéØ³bÀÑõ"ðUSI=D£ÎéO{1ÁoÃ4À¦tÓ16¯
méu£àá®.ª~@âD¾_Ìÿ×A¤zÍ=TëÂ!B8#­ÀdÂ$Ìèj¦äðsÚ¤6CÛ5p.ÁqÕ°Ì
ã¸£Ù4Ks3²Agt#8t*¨µs(ùkÇÿqüuÏ·~Æk¾â=?£¦¯¸1~ÎÕ3ðpà/:YÊÞ&M³V ÎÆ!©³¨LFÀ¤Úéº¼zká¾R¤4h Í  ÚãhrÌ.á4®õÈW¬íg´^ò3êDú&$v×çÿÖïVÕ_º\É>æpßD¯5W½AÿS>ggë¶\E×sµ±D,3ßÌÑ) S´
z¹3>Ã`#Û10}ÔÔëÆk|c;¢¿±V´éÑ9xÄp¶yÝtxã¢.a=RÁµýÓJïÙtªFòÝ.®ð¸õJå@´Óá¯÷¡ÇÂÁï[iÇ>ÁäÎý±ÞÔR?Ar¶7î×ÃÝvÐRØ§ÃL\±Úm2À¶Pºâ<«%§y°h¯¢?íÈÒ=×]0t¿\Ê
B)W+.üàc"Ç½&9»Ùª®àÙ5·G¹hf7õü9<ÏKõvÕyèÇE¯æv÷ÍÎûQù¿kY-ÝQ]u>+¿{¯í
xÊUjß'D¹}ÇÃ^ÝñY±ÿä¶Ã¹«<
Gwhm×òy QÊÞ;ö¥:N¿ë2£çyÅtA{ö3UFO
$ú]*[`:ÝppTæ&§+çc[
B%»`gB kJÜUcÑsCI·
oZ0²@ðmò=ìÊ¾ªkï_YÎ¹'epÄýM½ÜBüübhIqÏîò¿÷ÇL&sÚåèÜï§_¹ÂÁs5çùd¼¸!AAØPg ¢Og7q`À|9ãa	±4ºëÒmVYa»Âßgò:ØW¤å7-÷`ØÙ¸¶eÕC]v>/)²=òÊ&ÈååÏîÉíËÃ=mÙÐshµ-¾Ü\y"î³{O;ZW	¼eN\©WíÛÔc¯Ü»ùÃ»µ1÷9ðçËúy·À}*[/ò|ùOª{þý^ÑªtmJ"F°+Ú-¬íºØYÅÐtµEI/9ÖDïðÜ¤äK¾ -\X¬à*@¾Æe¥tiö¶ìøF\©àWËÜþ8ÖàPË.wdÞúñÍtJº2NO¼WTKaóv®T41²º\DnDlºä.æ¡ã!òb¥Ø^C"Bf=²ÒSÉúY·\c9½¦,6ôOH¿ÍV'y-3´VæîÃÚ(÷"D?!¨Ûï:Üí;êÖ¼¦àLgmhA©ú\GÃ©
]¬á¥sU[_Â<6ÚN¯F,/Á°=Ì;PÚvU,Fù,ÃúÔVX£Hwæ#Qþ54l¹ùÞ±9ïåtî© /59¡»ÛÉÑ{Eï±¤`+Î´M1½6ÐS'ìexb>¬¶+Ä\"àæÇPïÉZÛ]Æ{'G·Gh4'ÞvÕFl2}Õ[@¯ÛnÊ®¨À&µTçÝÒjØµ.ÓªäÈ8^¸X±RÍÀ±49:ÖÖù*fiÛ õtù ÄÏwã×Ýìx<p-ÇÉû§û_¥Åv\(Gú1½üYVüõtéÞ·­Äúø=æÓyË3èÒºªöð~ÙOÈÙT]!0òd×ÚýSjWYBÇ¸ç^ÍÝ¹áFKÜóëÁEç?øÆÕ¯®µ{
­Ëï8ë.yÃ¼Ý'ðýWÙ7îù¦©ÓÉÝÇaø!Ëì½/Ç²DÅÍÞNW&åÇ -r-P]«ÜgöÏë;l=¹éú#ã¼$ë?N¾«þîûGmuõw]´·{Òä=÷tÎseë"çl9Ý}¼7ëåfOgÅ]±O:Ø| ÎawÇ/;¾²öø¼[MºÅRÁoe-+¶|3jD­Tav÷èu:¥Ò5wÛK-ä
YÅ!	ïÀçÞºÿÿí]YÂH~ï_ÑêÇehãXí®/c°1ÆÒ®ä|ØFùí¹
((*u÷HýP*p¦#É/##3##îÇ7ßº{{ Yqeÿ©?wûv")B_Bû]°Ñsa3Óx¹Þ4Ä¶éczÙÃnwY­åÄeEtûúbªTi£"06÷9ÏÛÌF¹êÖ´¥)¼?¢Ô ¬ë|ûl´<¥À½¾ïq¾¢øîo«SGð¹@Å®÷U¿¤pºd®'éG6æ*ÄÚ´j	'Mðk¼ÒG5{pô*òèX©d2 B¡4³aÉ$ÿ}ë{1¼Û°ùõ¿~}ýþã©XÜiXßÙN°÷v0ßÎ'ò>=|öf"À«Ó(æq~1¯@Iê5º §Ò|Iz2»økxÓÑêÑ`p`èã08-iÚå¥6Ù$6·bÝì
nß<Xyfñ¸íñÞ7VÅ=}þþÎñ%é=wÏÔwTsCGM{ÉhIÅ ëõ¸Ð´~Þºð/Q£o¤
ks¸ZÆÆ`TÚ@¯ÀÒipVºD;°»«¸Cç¶÷K¶ÓvùÚÁêk¾µª.cÝ³ÛbuQîu	Ýh¡ÓÇõ}Å5Ôx­µ8ÞÀñÚâJ%Z>¡´°A©D:\w$xã8ôQ1tÍ
9<ßn ÃÓÖÄqÞX¼ì_9¨ìú]½ÜálÅ¦ÓúÚcÞÈ9
õvwå3Ëeu**Ãê´¶ÐÖ¸­×8Ñ¢¯ÛÜÕZÃ&ÈÂ,ÁRsexK[YM5¦ÙæCóýùò"ËäÑµåU,?qÇ.ë~­öN Ù£DªÏõ=±ÇáÌI!q°gAÔ)È
màNkà):á sùÄ$ºGùqºNoL0Ï.<¯å eÔ|U:.Ò}·)G¯ô0{ñ@¼b q¥euWá¿¿+«Kò¡]>Üí>!¼Uú9£¤¼ÙàqVj;ÇÆàÀñdÔ%Øî	ä«órGI_Æ@FÝ^Â85néu¸±÷¶?Ùã¸Jg8ÔÙiõ7FäS3ÿ9ßËÔ|~æ-àv×Rÿ(Ùþ	£ ¶ÙA{ÕPÃæj§3]3ý(u9<ãûºBbÃ@ØÉ:Ëz­ETúÙØlði¬°©©P¸-ÀC7r:8Ç÷cß½ÆuSÕ=áËM¼AcÒðTÿù¶Òy~¡
Ð²óÞñ:ç£[Ü<«}ø,i¬C£§¢½¶L 
7î"]ÄÂi¾@Ë)ÑtéXvÁ* "A´ hO  -ÜnÃé÷gêZµ½Ý~ÆY¿>ö]/ðø7\¿
×Êòõ!É_ôLE>=àÃø´ã¢u5¨%Öz±µ®'36ÍÓd¸0Âb!ð²,¦iôÄCk*@¥²Á:Bc«Je4ûÆå¿æÎ*EaØW#ç"HÓ;k¼?	£Y Å#¶o§ö{ïï¨Ò+Ú[t^=yVub`4ò²½DA)ÍrÐÀ'¦m,ÌËK¬&µv´ÂÆ-¹½aj½IÐ~;,õÒÄðXsí?9{C×Óì­°Óä~/¯à2,Å]ç¢9Òú`êvÆÓâ0O¶°ð¶¢®w=ÕªA÷º>»ÝF{Óï	ÅÆHXxøÜÓÝ%æ«Tdq°AeÍÚr·¥<Ïò£¶¸Tid,G­UìÄ½&9Ùô,Ámã5á¬fwÐ®êPÌþ§K[é¡WVBþÇy+	^VÝIò'¿^ýç?¾n3ÝÏ¶Ò/[;VÚÇÞwç "`+´7~3¶j5qøô¿OU3ÙVÕ8^»õ}>o~ÆQïî`øíÞÑé×i)/8¹ýùü3¶ëw#U^¯/Âö$«q·ûPßQy<Ì13-K¥ÞnEcìøÃ4ÁFn}kæÍÀ¹¶fhÛ `ölÓ\6z=kd!lÓHZ¦Î$m+&²á`øûöC¥~]îOp3µ½ºqÌàòz{c2¼ ]q÷âÁ³S!5"ÑÉ%]""½`/x#<Ô;}»ª@t1 §UÄ¦ïÊ\2[$h¨ EjÜ*ì¾÷RýåSÅµ};èïïE®nyRý«ï(<ææu<ÞÃ=yZØBãQµ3¬¤×Û1¸jkyJ©OÜÔeËhÖ[û#NÄhL@ÙºëOiÚz4´îíûþzÊLª{ QÞ[¾)»ÒÊs¾L>»Ký°+DöGúÐA»£÷êóë.ÿ·OðRùþÏCÛVëEõK=>n´8Q}(æS«¾¯µê!ÎW½=ÁÕ»¶þãâ¡½X¦Á¶ûGÑ}vJÔï%iée7g5¾Q=5O^Aèï7³!_÷5Sõ«Þ^L½GfêòÝý½K½üþ}¯¿wäðëoðò«'9=÷æ/çÿoªÑFïúúu=º£¸U¤ûÄaña=PÁ£µ×lxp¹çb×Ô<ÊåUÒÅç3×]±i É%k¥Ó³Qd±¨s¹ëP34\¨Ã±ÔöÏ±µ÷5©ÅqÚ~Î©bjýÈÌF<{òéõGñg
î­Ð~Î^¸ÙÂI²WÏµ´\1Ö3"C21q]f\3t¸éåîó½FöËöÜÌ¸9à&´ò¸ØçÅioì®nÆ³ÂûTÐ¸÷m4û¸Pþí?oíÕTÅaèjp¸2¨v¥O'ìµ®.ølk%»§bôºx·$?ßp^__fßL­|SçÆ:#ÿ¨³»´7ÏÝoé
,Ï$TÚVK^X²ÕQ :¨t'UuqÊ"íM8/b Ã0¢Ik¹æ0ÒñbZêðbÍøïoË£8Åªzt!ïj&
÷H//A¡&e i¥Ëj»áü®ñeÙAå!­VÂ9UþäÃmf¬V>ÃmïÆÈuãñU~ËÒÜTÝØ´îµtÇç¬ðÑ6Ô§ªÇÍóû¹Ö­
ÖWk©é?g¿ôFGZç?ÎGÏjzq¤Ò	pc±Ö[ØÃ]u¨P\|Îg8í>µËÕ;!iQ_HßY+:v&ò8^£ÔÈÝ>¸Ýµí,÷Çæ¾`v½ç¾?Ä»]Vá÷üÝëR_¾ÿo¥ËÑpO×¯ßüDþ¦óc=ñÇx
¥ãÓéÔ-1B¶Ü¹Öø
³ÈzÆÚ¡Mqå`hbJ¦Ú|9(«ÃÉ²6»}ÝNiÈ ÐãÈxßFü^ÞA¾qãÄ_õ<Vï%à­ü»ÞÝj·ãç]@º'Ps£¦Ê²ýöM¸k Ô$æ£Ó²Adm¨"ºÍë®ÂÂ¤àhæJá,êÉãñ\§8DÌUÅÑ©èz?Ï|×Ñ/â"µ.×§ùy¤Zñóø¹¾£õÝÏúØfÊ®PL£z­.RÃ]>
kRÌ
²¡féÍÔ¯IîTwÝ¶6¦¦e]iªñnRøBÞèt EÒZ4Axtôñ ÎNµt?b×¦ü~4BÂCñ\Õø+1×w\Oy)~ëïlú@Òéçá¨ya~G;Zq4º}rU(Eqâxa	y4JÝ0_G¢Úut3Ê0òjUHF1JÞÚç$~ÉÂ¼t¦i´Ý$Aìçpô)|Ì'!·v±üõ3ûð¼ü1Ýè}âÐ-m\8>¢3º@ýü[}Gï16ÞAGcÍ±%R+îqóa±HÝ7
ÜWr¦1.-4YA ØàÐ-j}2\# Ê¥Î°¿4ÁX ÞßØþU÷<·ù0!_×(ß±¡Dßsô§ pÝÅ[`x/¨Ïå-.¾?Ðg2¡Qâ4í(44dæzB÷(¢¹ q â%qÂhÈfK4¼|_9·ºDÅ S´Xìn)=B¥<æ}Õ²ïÃQÿk¿ ~
·<¾!µ/Òï].õ_Ù!ïÞÇÝ2àü_ÖàN6U(ç4¥×ÏX%õÓÍS Ã@¦é
Ýæe[ð­RPÜjÐÊ¨p¢+.Æ¼Í/Æ]yÑIÆ/_ÖømgxsWSæí)ãïÜ)UÉ¿iîð³©ðÕy/BèYàïÜ?ûã+~iëa¿CïJð¦­·£÷X×l·´5kk;'Í2îÎ&« æ pâRîÔq<dÀÕêæ¤]ÖbªßÃ^XÆù4ï²¶qÆ#¥b){4lÿP~ÇRû;{Ë¯¯*ÞUõ®ªü1|°óe D÷÷zß:7Ø<,ì£òÙ3"$f·ó!F­%¨&fã 
Ö9
DmÙ],EJÚ7Àb(pÖúcÉT§qD[DãÑDÀcbmnF÷¤{¥êo1ä½8È[>=ïXE¦Ý±:õÐ¶ÏËÓyÐéBfèc±Å5<;l-$²ãm.aZÝd1Ñ¹	-60|8å(ÒP.;*ë+ø÷"K@[3ýõMÙà¾WßQxxiÁÜH|É1VR&NòTñGèÌ ³C´BæXÎp *µnÞr	«0¡1¹`TxÝ@A1bRØjî?RÞ<;¨
Þ
ùëYÖÐ/øêiX_efvoµÕxKûÑ­¸ÿñmw;þ	ýKn²N0@¸ìêX±å%×2&Q$ömùEF)àóÒj`æ£}{½±=Y14!ÂZRiÒìù=Ò¿ôç÷7½¹nüKõ÷Ï_þPK    Ã[áXå	B   P      postcss.config.jsK­(È/*QHIMK,Í)Q¨æRP(È)MÏÌ+¶sJ3sÊ3óRABµ:`ÁÄÒü¢Ô´ÌÔ"(¨å PK    [áX}ûñ  Ù     public/vite.svgTMÛ6ý+ í4CrÈ`µÀ6ÞÚ*Ëk¡ZËõæß÷ÑÎ"M¶M¢)Î÷fÄ«ãã½zz÷ÇFïåðfµ:NöÄvïWÞ9·B_ oÆaÿç?©²:[µjç¡5»a³é÷^æ½Vó4ö¨Û#r
Ý´¶ÔçcÆé~:ju6Ë®ÑL6g­výp¿[ðêµ:Ìý±ûã¡ï_ÛeýôaØüG=ôý¢ÕãÐÞNOvÊ)Ñ×W~{¼¾Bu};ÿ2·¡ß/jØ4úý%ûû
ebó¶§íÃRij´±Ùç×ØûFG±^>Á}ôud^#ÕqjÚn=Êv0×ÓMã47úU [Z¯[ÕãoÐä^àßÞrX¿û_}Íá9ÉS`ËI9ËôLÊ[Iåbÿ7§õúÝMæá-3¿ô¸½åøÿUX¯o²sßQauið¡]vj;c£?ÎãO¯¾ÛÝµX|"+[8ß`n¼-:ãmÈ¬
Ád¯Ûåì­ùÎfg÷+\B2AA"dÈÙJ#1Å&ÉCñ'IÚd#º¬îüó½7Ö¹0	²utÑÎÆBªØ(ÕH9ÁIò¿Wª?¦|VrÍ ^ïJiüÑQËÖ§¬.ë¹H0Mpâ(^(¦@¬^b±/Ð´]=JPîÀÀ'r¬ºC³è*²pÂ9F,'R ¶tÆålð	XÉµÕ" x)ZvH¡Ôð!¥¢ð±Ö¤3øEl´1¬btàÂ¦êZ¤¨Ê±À5)£y¨AÞù<G1|GÖS¬óâwFCÊÉÔhµñ£ñìjµÅû:*\%NæÀÑ .±à *¥:9¸Ø!T
d$f®ðtóß:_oìë¿ PK    [áX#Üÿ   Ã  	   README.md?OÃ@Å÷|
K,TÜÞ	(AtI8ÛûF|{(*H0t²Îzïýï
ÂJá
^X)I;Pr½E%èc8pM=;´ ¤C %=zÇ÷ì[`ÿ#këÐ× Áä'ö
q°$Y¬É«}¿¦á§ìÞ-û	ðl±´´L¶7)y'æKÆüvÙ©ö²4¦CUÁ£néO±)m(Cö¦Çj-ý3E~{¿Î3W/`éäídOr~î$ã`Ð(ó4¤û¯b*cuVÍÙð]`óº:y§}å/ôPK     Ô[áX               src/App.cssPK    %\áXV¦#   ´      src/App.jsx%;
Ã0Dû=ÅÆìÂ6&mH*En H+,XKFZCÈÝãO÷a>~c|6.Å	UÚX?Õõ÷yîLÎ
À`ÄÇ«T7ø@L$%¬WD¼Ö9?õD×Jhö¼0º¤}G¶X¥Ä>PuÛbøíé(éÇa3øÐ²ß°ätaÙáPK     [áX               src/assets/PK    [áXÇ×êE       src/assets/react.svgmOoÉ
Å¿JarîRU±þ.V${ñeoÑmÐµ,CR,ï·ßß«îv =êê"ùøøÈùùõë'÷íéñóëíéáííËO77ïïïþÝüóË§B¸áÄi;òÓ·Çëçÿ¿qq3Üùåz^®÷÷Ï·§·ÿ\Nîåùñr{º>qÑúx~Å×u}þ|ýãO·Ûey|þôüzrï×û·Û?ìä.×Oo|M'÷ååòzyùzùûëËúöûùíú|{úöñzÿ/þ¹§Ëåíä¾^/ïÿxþv{
.¸TªK©~ùùËùíÁýq}|¼=ý-ö_=¹ûÛÓÇÏÝ\3ßS>Ç}n7º",Ý§¼$_F[}®e~ø>l1ßZsÑ§fKñ5Åµúd}±àS.ùX}muÑ·:|}]¢y+ei¾-dGõÆRO%»8|IuFÌífs­¸â{îçX°µºÃn'2±F"±}!øVSfÃµæKoè)¹je<IfJð£àGi.ËïðÒpTGq]:Gîvz$ÿ>ë¸â7u4çÂ£rÃg'?úØ¼áºnçÝÑùÞt	ÔÚWþ§lxµã29·ÖTÉeÚ9æBn7[Wäåk£NTf·2ÉèFø	ÂRÌ@PFt,»ÂZWbj9»ÆÕÕÙañWÆ,9uê¥lÑÈÛn·xð`dÄÓ}¨à¶ÛÿFÌÅ¼&²,]97®Ï ¡-dR½8!8¶,Â!v#±`
=/®Ô>C
±ºÃn D_¬PÓ¡ëBÉÄ¸Ìjf/ò·¾¦AôÂ5)m¶%ã(iåNþÛB]{Ä·TÁ
|r¾{k©¨HÓó*T}ÓèqX&òSi$YÁh"Én`È5[Zi ¢ !ô?ÏÊX`4^o*AÂ¸­+áÃ6hè#ò`¸ÓhÇ:0dÈ¨>¯J²ét uò <øJhËö~7.I¡ÉøÔ\B ²=LOµÞ@Iï)§AEþÑÑ£àjaë"®Ðô©°715/pKw		¨H°ÙÙê=kPWJÌ ÙéåìÉôªr¬ÔDµxm?Ð¨%å!ÿ¨~É0o 73©p½Bã8ìîcçº¦ËÉ*RN9NàÐ:~³êÀ­uÆ0P­ÚÊL³`¨¤¼@W«bjnR+[ªCr¸ÛÃ{GU¡äëÔqy°¤R!y½+©
½82©ëK£ô6¦.Ho°b¦¹ÃnÈ¢M%É#­tÇ@5»¯=M)èê75×®Tµ³Úôî£Ô=ËôWVñÆtZ¸JÒ¤'}Hýéðª%tdZDQ¬_
¥­t -fDÉuS+$tÒÈzraI`W+4¡ìG(>}"¯¶Òv!k äDäËì)2¦í¶#hÀó%6Ny(©nÚLg×âìAKã5<î&ã`¼`Xk¤óPHs¢KárÊ>V4°fi*àR¦Ä­dé¼©Ý$ÈY®Üa7ª PÖgÉÙº]þ²ºRÕ
] öÐ¥½0gKÀà4y£«9§@KÆú¤öî°[¾R¥Ùt'¶MQKÅK}nÚ¬Üõ`äE=4h+Ñ"B0i°×òJs¦Lúi=ÑX°Ùô¬u¢/$¾ÛÃi1q
Ó ïÀ¼×º¦^Ñ]âDU%/sÕ@æl½mºp»Ù.¶M»HuÍ+½Há¸§n<)Sâ"´÷ Ê
4K)|å6{ÄGë¦DìRµR´w0TÃ©PF=MÚ4²È÷ÐÄM&Þ4d¼mZ|ØÃû¸OKÝ=!P,sU+CZ§FFhÆê`ÛJ8;.©ô¬ª¢ë]Râ6ýÆÞÜa·@ëß%¬}SC9«m§®	Ëg05³ÐèóçkÔÀÂì´<×Î6æ&FðÎfªKH*ÀoÒ1g4Å·JVDJ] a~|¨Å=õê D¹ÍIâD
íÈi.1ÈðÝS®¶ÇÂä$méÚxÂdtÊUÐ¶y±ÔÈ¥1d}@Á¶K¿Cð9iãp=ëL3`	,Îê+Òu=HIâlbm¦Ë1p)öÃî
æ/Ua"° {EÛsÂÊYë´)v
¹5´
Î°#ÇÆÎ¦¥&¨Týî¡ÄmÌõ¦! Ñîv³y+FeûW°v1X{TÿÅï×I»vÓo£ßµQÝÒfY_L¹:µ&ÎÿþÆt\·%x®ç,AÔÐæ"jÛÇàn¿»1¾AIË9³v?#îV­O%o·ä»§õ¸I©ÄO-²æ $r5Õª®nÕ~¼M&
g«pÊª¦LÔ©0VÁ[Fa.iSí#­O,½Eim§ü&Q¿
¹=k
¡ÏiÐ´oívË¡Þ»®Zi!úåÜô£B#-i_då¹òr]J+ÉFZÏj*\´>©Ô	X·/óóuùñoËÿ<Ùþ´=_~xþúã~|ñË7úµágÿ/PK     
jâX               src/components/PK    eáX%ìPD  ñ     src/components/Card.jsxu1oÂ0÷Hù§,*u¢¥RÅÞ¡kÕÁÄDrld;òß{¶IñâøÞËgûËê /ä­ÑdÆg¯iRF­ÜÚO^¡
Ê¹Ò¤ÐÊMKmÖ^"ã
4nqy]Ân	l³Ë½?/lÖkOT?EÈcÑÒvÖ)+nÎ±6Fíä°Eª1ôMß÷ø8Íçð!TÚ`Ë· 4iCx
ÜòZRCjU¸R+Xs#&
ûR
j3ó91h§×áÛ0ìÊwXüÀåò¯üäawÿ¿AWþo¢üíÁªéßÃ$+è\pÌ·µ`÷\èc~°¬;%m°»}ú ¦í{O°C æ-ÎpÈ_²;³Í5ö4'ÒÀ?\OédÿPK    ÂáXÎ¤  ð     src/components/Footer.jsxÍUmkÛ0þ^è¸Râfcý:¥£¬PÂØ>AûÜj-#Émñd'±Ä-e0&Hü¢{»{¬»ci.¤ïH#
)ô¤½ï]±f¯9}¾cÙT®¢Ð(I,RÏø~)ÍõrÌb*¯¸Þ²Hd*HèðÉã7^¨û8>²OÚFu«1)ôKÐb·æýúcÄ(7	å
¡ÀtåñÕ`Tá5§J¡2fÆ§=#h\jÂ á¸¬ÿH$80ãF3¯ å1ÁÃTä¥T®|SÕDÕaÛxþ´ä i,^À¨Å¤à¼Éº¥ºª½~ÚÒôëìúÍ¾]aÌ!²næ4Åi¯Îåw¡4KVë$ Õd4'ãÞ¬EÖhÓÌ¿ËGó[<Y¸Ú,,â,
M±Íù/6Ò½AFõó`GÉ¹ÐÿVH{üÈøüü­Ðÿ7OÊu!3O¸uÃðÐbZjQù/ÛxJSÅL­¿F]²¾¥]ÛÚÞß²ë3ÜNiWpZúeWÝFN¶®ïÛuÝ«ÿ.r»&nËñÍEvRÞÄUy³ÂBÕïm? c·ÜÁIÛ4ÍSèô`VuàO^!hËê >Ü
jàÁúô8%[ÕeËzRÄÐÂ¤Èâ¦Mùz->kÆm?[v;)&ÐzÍ¸¬ÇTÃ})'9§Y0vÌ½©v EãØµÞ4g2M@Ëâ-Þá3"a»úuùJ­¾Öä¨_3ÈWä#äKr!c3ôõæfÁiôÏ½é¶Ý¶Xn¾Ë(¥y¿oaFÓtç{3èp5-kÓ
ÊÑhd±ÕÞøÉïýÕPK    áX ßÉ~  Ì     src/components/Header.jsxµTQOÛ0~¯ÔÿpÊ<P 0¶´/¼iCìmÚÃ%¾¦Çl!þûìÐ%M%´ÙñÝwöÝçO¥6n	3£LG_Æ#±Þ{oB=ÀK{]92ë"xG´j|9-°©RZÁWBNæàÇ#ðfÈUFÁÁz,¿Í5I´öE
S4æ,EKlr|v\×ðÇ/ \±óh¢f!iÅ&]wsE§gQÍ»ºÃ%ØNãhåo¯c©BVÈ±d' e¤|ÝºsìÊì;¡"³Û³ëòp_Y'O¯GÂ±Is´Þ¢¼C´%ª6dí£~ø¾` ÁSBqâlQIÍ8D|ÙR¦Góô?ÀK#@t ö-ØÄØGÅ8p±Ñ=LWZQ/Ù·¸Ñ¥O
6Fï"Eà0½öu[Í_|
¥J+ç´ÚØ©SàËÚºf	I|DfzÛG­Ãß°áN%¢È½¡t³è'
YÅáêînÖêi¯Ê³<ÚÈl-+íç8öé8
ûT#ä×­ÓÙC\.µÓl2==|º8\\LÙôôòòÏ/9Rzt_æÄCu¤ÛÀ~%w'hw{·g«[©
ÂÙâ\þI» mEß´4Õ+/ë¿&¿<BÍ¦'Äs­øCÍN¤Øï{£)¹H
¥ØØµÊ
qáïa÷øGRä9Aó}UÐh~CõÞúÓ¯ oõKp~rmÙºÜ-e¢Ü+(+Ù+x=ºÖñû_²yãÑË_PK    WyâXïUÖf	  N     src/components/Input.jsxmRÁn ½ø5Yâ÷ÞKM eÌ À®
ñßØÝZé&À¼÷y06Þwz£G &®ÉKY.©*°ç³õYunÐ
^Õ4»³É[å­Dq÷5!4@.ÀZ/aÐÍFÁyÛÅ`äÖ¾ñÒk3ÒN+g´;íg)aä½ÓÅë/3ßØ§Ó^ò)-Ï½pÂ`;q¡i b¢-·H®[ÃÕþ«CÓÃyµþÝ³!Ús£iyÍäÞ´hòí½¡Aw#¤>2mµ	T£¹ÂãÿXîSïduräç¤
ß%¿PK    mâXD£  K     src/components/MealCard.jsxU_kÛ0/ô;¦dT±º2:7}öÐ2ÆÞÊ ²-ÇneÉH§6kØgÙGÛ'$']þº;H|gé~w¾¿eUKðÑ!W²@9>øx|Tvg¨ÊG£Ð	kg
|¦_¹ÑgîÉ´ë¤L¥ÐaNÂñ[xåÔpkÌK)àQî`
Týþ\³3Ï.3Ë§KeiTjE
íã#°äl (*2Y}©èÝ*a
®àb1Ê¹jàÙîÎ`ï`EÑÐ{å C£:ÉQrªõ-­ØUs¶ ÷G¬30§5Ó×5+çáôtê²Þ I"yÐÈHtµ
¾c¤X×T¬A6³ÜMêÅx" Æ®
»Y;C§µ<ë­·ÃvS]öiîÐ9dr%²J	dêÐgmc(Æ)Ì~Ê$r0Ñ!Í=ÚÍ&ZrJ¡h#hË@çRU $RdäÂ2Fd,#?IäÃd!{,ú4Èó:Åe5ï¿áH«Ôe±ÖaX©6Õ¨.$J¾"÷»îj÷ê¤Ù)ôvÖ¾mb-¶;Á)Hn8·¡öÜ3Ûº©|´=´qô
{"¶]M+êtÞeþ¼¬¬ei¤vÄø;ã¾iºaâR¸ÝGoÁ»qäZÉÔ5S)Õ¬kÌÓô!¼ JÜ ØQ}íê`º´0¢[vËÆ?¿~¯)V=9ìµâñå[E)æPs*Ëö`«¯¨qÓõp^¿ÕKLJ,:­7¼îMjbå¹E7ÿgT8jü
¸î6Á¥ßV»Ní«¸[KV8èbçÇÞQ¸ë}nM¿õKnØüPK    2yâX.Ó&D  6     src/components/Select.jsxuSKn0ÝGÊF^D ápî«ª=ÁCb0²MB¸{ÁÆ	
tx>ï½±=¦ª[©| +JÖ@ÔìãáxÀÞV9¬S½k
SÉ>Q`aËQD Û9­#àf¹@Á§JóúÍ/1áxÉN5¸h¶ÄÊ@!Öo¬ÆRÕ´QRÀP³Þh¯Iö`Î68öé´¼Kóêº¶Øg;X·¬Ù ©ÁÞÀü¡9ÓH2×pLâ¾#ÄSÓ§|8þm¯pK^uwpÍ¥â¨-ÇÞu:ØeÜýPÒÁ{; ?¨tðÞhï nî÷ËFÉÞ«â2Ib;ÈyXÍ¹fm¸ 4ÛâºÙÒ{®øèÿÈdÞ÷cúwáf*±»ì6­Ì	§ßbâüPK     \áXÐÅÄlÞ   k     src/error-page.jsxUOKNÃ0ÝGÊ¬$b]7»®AÀ,{B-5h<FEiîãÒëÙïk7ÍÄÄ¯ÌÄ°ÂÈ4AÅ¨´¼ÜZª]Y³Éâ¨ãI`Þ#Ùû¢?°n`) C>`Üÿ¯¨ÝMA'ì²¦Îg; %²zÃ ÊºOpv_eM;§j¸R<>
Ï4Õ't7bþzí!ú´ ýÙsÔÈÈ¶Sýü×véâ%ë» ZbxÇ³ÀårÍè&!
YUï~í÷(Õ§Ío_Z¿PK    Ñ[áXÝÿÉ*   :   
   src/index.csss(IÌÌ)ÏÌKQHJ,NµæróósòóRóJEKK2s2K2S­PK    ¢hâXä×ú¼z  ã     src/main.jsxSM0½û+&`#ôèÁ¬Éz0kØ£ñ@ÚYiº1þ÷mË7h²§iß¼yÓ¾iy^
©à
bL¨O)rp¤Y;«æ_ßCÏDNhÆ±°o ªÓ
·R|W(cqU(®WG)¾83È}$&mÖhöbN@xÁð' U¥ÑhÏ[Wé §ØI)ä1¹`GCø¥zÖì%ÅT+×¸_êDO}9Ni©ÆzF3´èµc\	ùë£MëRQT
jc`ýÈV÷¤}5JCp³´[Ì0×	!²nMv]®÷©%ÐgLbÂÉî[ùA¦Ã¸5¨¸/Uwæ0oüß³Ýxþ#[GÂ:>Qlf4Ó;`×c/QÌlLíâìéµ¿$¨Gew WS\P5Æo÷Ìuìõ¼@­¿«U"[|(É©:Û8æA¬ou¼×'È¼Ø[ýPK     hâX               src/routes/PK    `_áXV6ñ  ô     src/routes/contact.jsx¥VÍn0¾GÊ;¸V-R³¤=n QÕ4Ç¨jO=%ÞÅ,V #3l²%ÛgÈóåIj]Áv¤ýaþ3ãd\ *Ñ5	ªP(x° d§@ÅiÀ|~|t|Dµn@CRÄÂ"]ã)úÂSú3ÇGHÒ§9¨oÅF~ËV2Ãá¼øÃÍ¾!	Ýg
"¤ Èòë
¾äÉ£9kwËy®/söúÎÎågßÈHs©)n#qÏ}ÊæRü'´~ØdÃº@ 
Ú*
ú'("E³w±û¯¶A,ðqÈ[[X²6KÝÓ­_6ç5NÕ¸v.V~9.VÔ÷¦Õï)yßÄêUrîÆ]Äî skÌÞfôqD¢¨Z×§<{*Lt¹e
3o¢þ;ªÝ³zÅDêy&ZrÐÂ»¸áHuç²)WUÆ»n¢¨«ÁÊ+mãjìÍÂ¦YÑÉÉÔa¼Ì´Gìå½¦àãÛeLÒ{l7
ý²«ø&Ôù'{ßp«;K.ßR*­O[u	§;SY³¢/E	|Y)¿£&:Qõ¸!z~øÌx7ö,6°Í¨ób(¯ÒÒskÑ$ê}¶x¦H(D\ÞåÏÁR2í¹à[6OèÓøånh
ò/å®VÄB[×·ôN&N^:Éêð·\w¹²Dr¢.Ê "Ë!¸â"ÐC»sÈÑi¬æÐ¿WõN2sÎíÆfª&äÿT£W®ÿ­ÒvèÂòºé¡àÑ-Ûíníu>+»}­ìqí$¹n5¬mÃ&¤û»×2Ãk8^(CÊÇíµ!qAý²ëIí8§XA¬65Óü"Ó,i<¶µþÆó#_ô&|Cë-¹5È'_Fô9TÓLiâ5d¹wÚçßú¬/ÏG5TY¯ªtüPK    gâXv"¢¨c       src/routes/home.jsxÝXmoHþ)ÿa®'G
!NÒzÅþ·V¯J«^ÓûEê³gØE»_då¿ß6ö0Tm¤ÌìÌ³Ïî¼'BjøJ§!"Kâ½õöø­ÆDúë¡³3Çæ-§\+
zK¸e|E[TSiû".h~¢$*EÍ·dÒ©ü+zgæ	® Åñg6>
H5¥ÜÓLpø bÚ9åñqxGÆ)DJ² @@¦B2M!6$ÔJÁõfÙ)èÁýjeùt¢è`Ý%dR­nàHp"uº­ªD*=£»êPHcõq/D*ÍÂHy;q
á[ð¸3"þgüK^¥¨ZÂs2oB9R)­þøÞµ¨`Èýæo(
àNÓYkrï§T.|ãâjv7ÆÁL
éÝ¥*d­©Ýfñ|c"KûHÂ©¢
}#P­
UÀ0ÂÈ¯ ÷Î·ß©YBâÝ*ÆTD$¤Éã>@¯_d¿RóP'K2x)
¥¨ô	(Xd1Þâ¹­¤:|m|ÁÃ«õãYDùX¹úã×Ú¨óãö·éúl
^DúLbÚ³ÈàâÅ6Ð0&}eídfáåàÚ©ÏÒØêc
$"\¹Nx¹ÏxgÎ±d>àçTöòi÷Y[ ²_Ãù2û#+åZô,¬6uºVufiAýTAepYµ/Xk:×öÆ¥
×èçj?p?.¼r©\j<,ÅìP$·úKÆÀHD¾Õÿ23J'®Ú?>W&¨Ì_\>¦Øprøïá»ÙCuk³¢ÛhÓªþL}µÊ&À(å{vc¾&QºÑ>å²wBû¾{ÌDÙíUý}ÿúâÕÃ:°Á|TòæÛÑ*¡ÿ¦J³`aSîC2oæ¢ìßµûî¹Y\1Û¡£\µ3må+&ñ]=ná4ÕäføX(61AÚfºÜæp«¦³<S¦Ý¯ð°ç~Emþ0Ñ./_Z¢]´3må.¦1Ë3$Z^.õ'ÍÞ1Î©lå¸_gëÏvÌ²7ç/-Ë®Û¶rJÓÌådÙ¡ºè¹Y+«BÉuð<T¢P5CýwòlÎg¥'ºi÷µñR]ÐºIÍq¤ë:Is¹Â©²w#¢h~s®Ï­þ?'bÆÇÕ3ÔïÿO\üÅÏ[ýI§L¤êV_\¥ï+úC2éS{³¤ù°ÜjuÅ$étPÿZ6²y×`ùÝÔc	u~[fVßaB½õSâ¬ö°îæ-áj/ð«q5½%^Ï²VYzÖBê-óæÕºsUc´j³­gY=ÔX`»·tw:ÝN¿ÂÌ)
ru²K{7ÜòäíñÑýPK    5^âXìÉ  +     src/routes/meal-plan.jsxÕXmoÛ6þ ÿá D~I³uHlK²fµ«»C ´t¶9K¤@Ru\Ãÿ}GÚ²d[rÜ¢ë0IlÝñî¹{îxdxHeà
²ÀÀR=ÃÂJÆà)+ñ.øBóYtÅT¸×ë@D 0º	­þáA 6²©Ü =³Åûäæ¼Óæéß|á7[ÞI.ìßñis"¢2I¸C*SlË£T#òú3A3Nx0ò6åËÞÕ'z[¸4<T¤ø«	¸è@_Ê±5O0£)ÜÚ¨=Ì\´ëz	ÐNË"9¨ÑÛÒ[¹a*â/,Q*ÅB/æfÃºÖdåÃ"Î3×t{È$Vä½f"`cÔ¥òe½©Jrmü?
ÁÀfVKGp­ìTÜl&wIpí¥³Æé,#ªôu©µu6¬pïÌ>¯Êì«#*ÜÙ·>ÿ3ë]"À°@êÊÊï±H³½J¶Hj¸1~Ì»ÃGP±_¥\sRígUôb)Íïää¥J¹¡M&ZoØ]Ìôb#¸ÅdEO9+Þ8DÃú6\ù5­ÚÖzâbJFÑ^»ÛO1¦ðaêGÍ×2ú_5Í·Uý%)M+Úáa¨ÛEÕ%*Å«ö®/JÓÛTq
ÅJ~6+æK×üãÇ²úÌAsò!7&K$0ËóI3æ»*R_*¤¸ÀTovîXbûàëMÚyP3µÝìE^­±3ïÕvwLÙrWtXxRÉî-Ól(ªù­úõø}QÅï%b:²@@¯c "Þ8mRý{ðwÊ
½/Îõï)íæÚíýÿ&Ë=ChÝöH:¯K¬7
Q@(ÓÙt#U(¼a±ÆiêÈðØÞ®è;
ñÃì´OCèM_
Þ!éÔ_³Ü÷8ÇÐéfUÝÈZNà>u/z
MªS¬y+áõJ«vÂ¿¹<²÷	ù£Æ9iÂÁü¸®iÃZó[{óÂÄÞS^GT¾p×½¦W`0´®N@£é^<Ð¢ìT³ûæCÝ"Ì@/ä6¦´ÀêÕ\vuHêø;(ú;¾ °@á×rÒÚÝü³û>jA`[ð7cÇHa|ºK^×1¤st»1jm®ùâò? áaÈÿ9ÄSÿv­ÁÔï£¡4oÃ}f.À%5à	P¤øè2[ÛVÎ\KìC#²3s6æÕJÅ¸-bûËdÔº±öº¢rq´¼j+R\Q;³E!l]Ëx:® RìÙÌ®ÁGãß·Éã¤I*`ÁQcÈÓF?bÁ¸ñ¢éugÅf* i7Èòþgï]zÖ²Qºüêëx
L*-HîT&þ÷0¢%Sâ%¤]AôúYe%ÃpÔúS£¨å¢
jÓs§Ó§Lø­fóhþ~¾#°,¸îÊé²ÇýÓ=²ò|.´<ÅÆo-+ê	ájÁ³gÐÖ	5ãZ·µ(£- øY`d¹u]èuÛ
»¢»£VÜtyÊFÊzhçÍgûYÌ§Ñý"þ7»ªo6fb)µ«íÂòyVÆg{õ¿®>¼&´tuJðÜËÎ¬°Ïç|ÏAÓì­Ú±L
nðV©8áFI$UÇ[=Aºã@W'eàVgr`ÓË
ÔªöÇuíÊ§Ø¢°ÊåGrhÅcÌ
Û²·mVG;Sp';wñÑý3ÄK£ü¤@â PK    ×fâXi(ûW  !     src/routes/recipe.jsxÍVQo0~¯Ôÿpâ)B ´i¥¬©´u¶mÚö6íÁ^fØ$Dÿ}g	ÐfR5ÄØwß}÷ù|EH|£ÄUà§"#ÕcãÍå«Ö¶ð|¤GEÓÂd®¥åmzyAóÒØ£>É8Be±«Ùe	a{yøX¼Ï¢hQ|Â×/ÕÆS0¯ôÃ"Ð¡RYVÂ\Eã$JHkjÛÖm£bk ä©h = +áO4­=ªãrÖY"\¤âÂÕõtÔ^[SjÎÔî¬¤D±8Áõø¶³¢X¤&M¨¢Iê§ñõ]úHÜña÷ÿHäÆøÕ°Æ)õvjÚBLt(ã1$zÿÉHlpæ
×hm9T-×ösö{[«Úô<+"ªëb=è!¤TÒ¶Ó­
AÛ¥ª(kSRª²4ÁÁæÎc+p9ò3BÏÄ¼6îÛQ»&)å¸¹+Úµ+mYLÝù¶ªàqY´®öSeYMÄµégChÞ\Xü¦x®\±¢)¤"=ê`ÕáERðLQP"1àÔWø·ÌuÈpvUJÌÉ)ú%l}ÐÐæÊR²1ñõ°±NW¹SsáäÙÉ96XÁ=Þ¶ZwV8yf[|Nsn FpNîÎ)ýrs@"iºxhÚ+LHÜ¨iïÉ¸nH^{X*Khk~¿D¸^ SBóÿ5áª¾Lº8ä+Ï·êñ/oõÊÖW×Ë¤±;Õ¿mðÉ¹¾&àìÚÈ1ô¾±àE;H2àh7©Gó!Ìï·C+TÚnæÛÒ¶ÕÁ±ËâELcsbÛu®úõ¶~E	Ja%XÙå9&s²oò=êgZ}ÅúÎñnñÕJÉOO
ìÆN(ãM Î¤2=&](G,Ì£½}yYBT;s8g8knÏSrpÇú¢ ³5WUôJÎÙyg¼+Ó"SJ´NVöõ3­¦º´;5³Ñ5£ý®f Ô	³½÷>[ÇÌ¾+}?±Ä$»+F
¯fñÓ	³úPK    <|âXlxyÊ¦  I     src/routes/recipe-editor.jsxíXIoÛ8¾È`48ÔKºYÚL.¨ÛS-Ñ6QD)uàú¿ÙiJ¢1A:ND¾ï-|ß{¤ã¦ø`uÁäÍ2!°ÆÀKÅ÷úô+ÉäY1×ïÊ	"ÈäE(°ª)!{zÖR:DG\<'A)á.8AïBÑ´s6§'?%,·Q¢7y¶¢i0ÝTGî¿¤³C¯5< °¢`¦
i<¯þÒïX¸AÿÄxÄrØMÍ×i
Äôæ$KuóÅX§*-ï_uáÉÐ*ÊÕý3.~«&Å³8|uAç(z¼Ï(eÏ<°íbÃ±¡Mlt 6²ÄÆ6±ÉØ¤»3"s*¸Å)HÃ£ìs#fCa+bd FbØ¼1nELÄDC,KqÙxn k±ñÂ@¼Ðâ¥xY0Ó¼$Ö}®ùØñ¤wÐ=owÀ¿Úµ/ñÍJIõ3.QÖV(øÂ]É/@çÌ*TU[¨ÖÛ,^0ðnÊçê ¢ÉþX!¤¶9]Ì ï¾Jw©x«þÝZwØpKæF9ªl4T#QXfE`ô59,º»+Í×;k7QöpwC%æhs¢óºÒG(¶w+àhCå^â`k/{2ªÄÝ¹Ò«ûJ¢#YÆm¿ý]# ¾ï¦|ÖÑåV¢,O	èîN¯ôBødì#ï-"´â§Ð,aÒä¡7Éºwé`©@ÃdËò=¡Äi¦1·ÁÃíÄpÝûÑ[3	ê«ðb ç_ÚK(&|©êÐRK 9PÐËÐ:â§7yWE?j%§jÒEðõóâÉ8/|o×Ú¼fá®Õ%ývÝ6(Q¬ö7µ»F[zÅ3ÈEµ%À³oWejWWPJ9U³
TÕ¿Ñs5¾Áy$ÖêÌe±dùú½¸jdÍmYÉ£ä×Vw%ºÔ#VC
CL[M¤å¿E\eË]²­bÊ]üØXéì¾ÊÔfn+-ð
ch(G¬Î3#?ô[pJWÛhöH¬,ýÏË_ÄËô7a¥¼yNJSÿ%FZfN2oë÷¦ý9ÆòYÐ~Ñ#?JÎÚö*ã#,;rÊOX×3ö±ðWäñ\%$«ÿ"°3ÍM#ß¾üÕ¤x×.4}ÅâÛF÷Ør BùÝF[û¼xÔ}Ñ9ìá|itþN¼j÷J5¸8+ÈjÀ»iXA¾¯µ¸»VËq7z+çHRóÄªYlh¶Gä/T³ ^]rÀp*¸x}¸W¿±·×ÜMÈn¡ôåcÕhquôÏ3XÉÓ·Ù§ôÀ°
¼V.Ø­q@µÒOCbá¢]é9Ä<NwâÚãÿPK    î`áXÐT+ë   Ê     src/routes/root.jsxuÏjÃ0Æï¼È©=¸)eì²uÇÑS{Ç»cYn¥ï>ç[È}úùý5mG,p(`Z(µÅYÕÔ/yÖLì	u<s»]i(é½r-Øw"ùFgØtVG'`£7ÒÏÄl¶pÏ3HÅ(=l¦n¨×º¹q:³nñXX=2äàKÃZÝ«¦º¨JTý{:C^Ò³·_óqÁüÙr­¯_n@Wdëè¦tN=CW©ÃÓÚs¼?ÇýÇ·LÆkmqÉ.¹mðgßPK    0gáXqaøjf       tailwind.config.jsURËNÄ0¼óQ/°Õj{çÄg nâ¶<í°­Vûïd+KªqgÆ3]ÛYg4çLòô(àÃÙ'g§×?^MÛ=àr# æò`ÍI0É³y«ÀæÔU!.§Ibh÷íÚ¶kO>
?x©åº1ÞoLñy³4êé*ºÞ~mÏkñwÆFç{×Ú#øqß: ÏÙ2[øÄ½ÐØìQªApJ©ÞDqxM2á[²­=Ò\jþ
¡.È'% |FL{irÕà«ÀBüf`Á ´xÝgO8D½ V
ÊRH)-Au´qUt(R¢¶/\/È¬Ö«]9SýÓÿ÷²yôkÔø	ÇG¥Í¤¼¹$Æ»Õ¥-0s(£O·~º§æE»«Ï#Á<­Íáhþ8¿9kÕéúPK    [áXÁ Õv   £      vite.config.jsU10 w¿Â[@jë©RQu@à+H¢Ä $ÄßÛ&]ït'sðQqÇ­8~xgeÀmô3U
Hq"·þÁýGÞÂ´â® "UCjpëy¥.G	xËï©]&=«K,5øÌ½ª~]à¨áPK     [áXÀà.  6  
                .eslintrc.cjsPK     [áX¤ªõÉ   ý   
            Y  .gitignorePK     hlâX*· ó   ~  
              index.htmlPK     áX¤K í                8  package.jsonPK     áXâu¤º  ü             ê  package-lock.jsonPK     Ã[áXå	B   P               ½¿  postcss.config.jsPK     [áX}ûñ  Ù              .À  public/vite.svgPK     [áX#Üÿ   Ã  	            LÃ  README.mdPK      Ô[áX                         rÄ  src/App.cssPK     %\áXV¦#   ´               Ä  src/App.jsxPK      [áX                        UÅ  src/assets/PK     [áXÇ×êE                ~Å  src/assets/react.svgPK      
jâX                        õÍ  src/components/PK     eáX%ìPD  ñ              "Î  src/components/Card.jsxPK     ÂáXÎ¤  ð              Ï  src/components/Footer.jsxPK     áX ßÉ~  Ì              vÒ  src/components/Header.jsxPK     WyâXïUÖf	  N              +Õ  src/components/Input.jsxPK     mâXD£  K              jÖ  src/components/MealCard.jsxPK     2yâX.Ó&D  6              FÙ  src/components/Select.jsxPK      \áXÐÅÄlÞ   k              ÁÚ  src/error-page.jsxPK     Ñ[áXÝÿÉ*   :   
            ÏÛ  src/index.cssPK     ¢hâXä×ú¼z  ã              $Ü  src/main.jsxPK      hâX                        ÈÝ  src/routes/PK     `_áXV6ñ  ô              ñÝ  src/routes/contact.jsxPK     gâXv"¢¨c                0á  src/routes/home.jsxPK     5^âXìÉ  +              Äå  src/routes/meal-plan.jsxPK     ×fâXi(ûW  !              ë  src/routes/recipe.jsxPK     <|âXlxyÊ¦  I              ï  src/routes/recipe-editor.jsxPK     î`áXÐT+ë   Ê              óó  src/routes/root.jsxPK     0gáXqaøjf                õ  tailwind.config.jsPK     [áXÁ Õv   £               ¥ö  vite.config.jsPK      ­  G÷    

==================== C:\Code\recipe-app\frontend\README.md ====================

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh


==================== C:\Code\recipe-app\frontend\tailwind.config.js ====================

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  daisyui: {
    themes: [
      "light",
      "dark",
      "cupcake",
      "bumblebee",
      "emerald",
      "corporate",
      "synthwave",
      "retro",
      "cyberpunk",
      "valentine",
      "halloween",
      "garden",
      "forest",
      "aqua",
      "lofi",
      "pastel",
      "fantasy",
      "wireframe",
      "black",
      "luxury",
      "dracula",
      "cmyk",
      "autumn",
      "business",
      "acid",
      "lemonade",
      "night",
      "coffee",
      "winter",
      "dim",
      "nord",
      "sunset",
    ],
  },
  plugins: [require("@tailwindcss/typography"), require("daisyui")],
}

==================== C:\Code\recipe-app\frontend\vite.config.js ====================

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})


==================== C:\Code\recipe-app\frontend\public\vite.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

==================== C:\Code\recipe-app\frontend\src\App.css ====================



==================== C:\Code\recipe-app\frontend\src\App.jsx ====================

import React from 'react'
import './App.css'

function App() {

  return (
    <h1 className="text-3xl font-bold underline">
      Hello world!
    </h1>
  )
}

export default App


==================== C:\Code\recipe-app\frontend\src\dummy-data.js ====================

export const authors = [
    { id: 1, label: "Jamie Oliver" },
    { id: 2, label: "Pinch of Nom" },
    { id: 3, label: "Bored of Lunch" },
    { id: 4, label: "Good Food" },
    { id: 5, label: "Gino D'Acampo" },
];

export const books = [
    { id: 1, label: "5 Ingredients", authorId: 1 },
    { id: 2, label: "Ministry of Food", authorId: 1 },
    { id: 3, label: "Quick & Easy", authorId: 2 },
    { id: 4, label: "Everyday Light", authorId: 2 },
    { id: 5, label: "The Healthy Air Fryer Book", authorId: 3 },
    { id: 6, label: "Healthy Slow Cooker: Even Easier", authorId: 3 },
    { id: 7, label: "Ultimate Slow Cooker Recipes", authorId: 4 },
    { id: 8, label: "Gino's Italian Escape", authorId: 5 },
    { id: 9, label: "Gino's Italy", authorId: 5 },
];

export const recipes = [
    {
        id: 1,
        recipeName: "Penne carbonara",
        selectedType: "main",
        servings: 4,
        selectedAuthor: 1,
        selectedBook: 1,
        pageNumber: 234,
        recipeUrl: "",
        cookingTime: 23,
        selectedCountry: "IT"
    },
    {
        id: 2,
        recipeName: "Chicken Curry",
        selectedType: "main",
        servings: 4,
        selectedAuthor: 2,
        selectedBook: 3,
        pageNumber: 78,
        recipeUrl: "",
        cookingTime: 30,
        selectedCountry: "IN"
    },
    {
        id: 3,
        recipeName: "Vegetable Stir Fry",
        selectedType: "main",
        servings: 3,
        selectedAuthor: 3,
        selectedBook: 5,
        pageNumber: 112,
        recipeUrl: "",
        cookingTime: 20,
        selectedCountry: "CN"
    },
    {
        id: 4,
        recipeName: "Beef Stew",
        selectedType: "main",
        servings: 5,
        selectedAuthor: 4,
        selectedBook: 7,
        pageNumber: 90,
        recipeUrl: "",
        cookingTime: 120,
        selectedCountry: "GB"
    },
    {
        id: 5,
        recipeName: "Tiramisu",
        selectedType: "dessert",
        servings: 6,
        selectedAuthor: 5,
        selectedBook: 9,
        pageNumber: 45,
        recipeUrl: "",
        cookingTime: 45,
        selectedCountry: "IT"
    },
    {
        id: 6,
        recipeName: "Fish Tacos",
        selectedType: "main",
        servings: 4,
        selectedAuthor: 1,
        selectedBook: 2,
        pageNumber: 180,
        recipeUrl: "",
        cookingTime: 25,
        selectedCountry: "MX"
    }
];

==================== C:\Code\recipe-app\frontend\src\error-page.jsx ====================

import { useRouteError } from "react-router-dom";

export default function ErrorPage() {
  const error = useRouteError();
  console.error(error);

  return (
    <div id="error-page">
      <h1>Oops!</h1>
      <p>Sorry, an unexpected error has occurred.</p>
      <p>
        <i>{error.statusText || error.message}</i>
      </p>
    </div>
  );
}

==================== C:\Code\recipe-app\frontend\src\index.css ====================

@tailwind base;
@tailwind components;
@tailwind utilities;

==================== C:\Code\recipe-app\frontend\src\main.jsx ====================

import * as React from "react";
import * as ReactDOM from "react-dom/client";
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router-dom";
import "./index.css";

import Root from "./routes/root";
import ErrorPage from "./error-page";
import MealPlan from "./routes/meal-plan";
import Home from "./routes/home";
import Recipe from "./routes/recipe";
import RecipeEditor from "./routes/recipe-editor";
import ToDo from "./routes/to-do";

const router = createBrowserRouter([
  {
    path: "/",
    element: <Root />,
    errorElement: <ErrorPage />,
    children: [
      {
        path: "",
        element: <Home />,
      },
      {
        path: "meal-plan/:mealPlanId",
        element: <MealPlan />,
      },
      {
        path: "recipe/:recipeId",
        element: <Recipe />,
      },
      {
        path: "/editor",
        element: <RecipeEditor />
      },
      {
        path: "/editor/:recipeId",
        element: <RecipeEditor />
      },
      {
        path: "/to-do",
        element: <ToDo />
      },
    ],
  },  
]);

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);

==================== C:\Code\recipe-app\frontend\src\assets\react.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

==================== C:\Code\recipe-app\frontend\src\components\Card.jsx ====================

import React from "react";
import classNames from 'classnames';

const colorClasses = {
    base: {
        bg: 'bg-base-100',
        text: 'text-base-content'
    },
    primary: {
        bg: 'bg-primary',
        text: 'text-primary-content'
    },
    secondary: {
        bg: 'bg-secondary',
        text: 'text-secondary-content'
    }
    // Add more colors as needed
};

export default function Card({ children, color = 'base', className }) {
    const colors = colorClasses[color] || colorClasses.base;

    return (
        <div className={classNames("card w-full shadow-xl", colors.bg, colors.text, className)}>
            <div className="card-body p-3">
                {children}
            </div>
        </div>
    );
}


==================== C:\Code\recipe-app\frontend\src\components\FlagRadio.jsx ====================

import React from "react";
import { FlagIcon } from "react-flag-kit";

function FlagRadio({ country, code, selectedCountry, handleCountryChange }) {
    const id = code.toLowerCase();

    return (
        <li>
            <input
                type="radio"
                id={`country-${id}`}
                name="country"
                value={code}
                className="hidden peer"
                checked={selectedCountry === code}
                onChange={handleCountryChange}
            />
            <label htmlFor={`country-${id}`} className="btn btn-sm inline-flex peer-checked:btn-accent w-full">
                <FlagIcon code={code} size={16} />
                <span className="text-[10px]">{country}</span>
            </label>
        </li>
    );
}

export default FlagRadio;


==================== C:\Code\recipe-app\frontend\src\components\Header.jsx ====================

import React from "react";
import { Link, NavLink } from "react-router-dom";

export default function Header() {

    const navItems = [
        { to: "/", label: "Home" },
        { to: "/meal-plan/1", label: "Meal plan" },
        { to: "/editor", label: "Recipe editor" },
        { to: "/recipe/0", label: "Recipe details"},
        { to: "/to-do", label: "To-do list"},
    ];

    return (
        <>
            <div className="navbar bg-base-100 shadow z-10 px-6">
                <div className="flex-1">
                    <Link to="/">
                        <a className="text flex gap-2 items-center">                       
                            <span className="font-medium flex gap-1">The<span className="font-bold">Coffey</span>Kitchen</span>
                            <div className="flex justify-center gap-1 absolute mt-7 ml-[35px]">
                                <span className="w-1 h-1 bg-accent rounded-full"></span>
                                <span className="w-1 h-1 bg-secondary rounded-full"></span>
                                <span className="w-1 h-1 bg-primary rounded-full"></span>
                                <span className="w-1 h-1 bg-accent rounded-full"></span>
                                <span className="w-1 h-1 bg-secondary rounded-full"></span>
                                <span className="w-1 h-1 bg-primary rounded-full"></span>
                            </div>
                        </a>
                    </Link>
                </div>
                <div className="flex-none">
                    <div className="dropdown dropdown-end">
                        <div tabIndex={0} role="button" className="btn btn-ghost btn-circle avatar">
                            <div className="w-10 rounded-full">
                                <img
                                    alt="Tailwind CSS Navbar component"
                                    src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.jpg" />
                            </div>
                        </div>
                        <ul
                            tabIndex={0}
                            className="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow">
                            <li>
                                {navItems.map((item, index) => (
                                    <NavLink key={index} to={item.to}>
                                        {item.label}
                                    </NavLink>
                                ))}                               
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </>
    )
}

==================== C:\Code\recipe-app\frontend\src\components\Input.jsx ====================

import React from "react";

export default function Input({ label, disabled, type = "text", value, onChange, required }) {
    return (
        <label className="form-control w-full">
            {label && (
                <div className="label">
                    <span className="label-text text-sm font-medium">{label}</span>
                </div>
            )}
            <input
                type={type}
                placeholder="Type here"
                className="input input-bordered w-full "
                disabled={disabled}
                value={value}
                onChange={onChange}
                required={required}
                {...(type === "number" && {
                    min: "0",
                    inputMode: "numeric",
                    pattern: "[0-9]*",
                    title: "Non-negative integral number"
                })}
            />
        </label>
    );
}


==================== C:\Code\recipe-app\frontend\src\components\MealCard.jsx ====================

import React from "react";
import Card from "./Card";
import { FaPlus, FaPen } from "react-icons/fa";

export default function MealCard({ mealType, meal, side, color, source, icon }) {
    const randomImageNumber = Math.floor(Math.random() * 1000);

    return (
        <div className="flex flex-col gap-2">
            {mealType && (
                <p className="font-bold flex flex-col text-sm">
                    {mealType} <span className={`h-[2px] w-8 bg-${color} mt-[2px]`}></span>
                </p>
            )}
            <Card>
                <div className="flex gap-3 min-h-20 items-center">                   
                    <div className="mask mask-squircle w-16">
                        {meal ?
                            <img src={`https://picsum.photos/500/500?random=${randomImageNumber}`} />
                            :
                            <div className={`bg-${color} w-20 h-20`}></div>
                        }
                    </div>
                    <div className="flex flex-col justify-center items-start flex-1">
                        {source && <span className="text-[8px] uppercase text-black/60 mb-1"><span className="font-bold">{source.author}</span> • {source.book}</span>}
                        {!meal && <span className="text-[8px] uppercase text-black/60 mb-1"><span className="font-bold">Nothing planned yet</span></span>}
                        <span className="font-bold">{meal || "Add a meal"}</span>
                        {side && <span className="text-black/60 text-xs">with {side}</span>}
                        {!meal && <span className="text-black/60 text-xs">Choose something delicious</span>}
                    </div>
                    <button className="btn flex items-center">
                        {icon ? icon : meal ? <FaPen /> : <FaPlus />}
                    </button>
                </div>
            </Card>
        </div>
    );
}


==================== C:\Code\recipe-app\frontend\src\components\Modal.jsx ====================

import React from "react";
import { FaWindowClose } from "react-icons/fa";
import { RxCross2 } from "react-icons/rx";

export default function Modal({ title = "Title", children, onClose }) {
    return (
        <div className="bg-black/30 absolute bottom-0 left-0 z-10 w-screen h-dvh flex items-end justify-center p-3 backdrop-blur-sm">
            <div className="bg-base-100 p-6 w-full rounded-xl shadow-lg">
                <div className="border-b flex items-center justify-between pb-2 mb-2">
                    <p className="text-lg font-bold">{title}</p>
                    {onClose && <RxCross2 className="text-4xl cursor-pointer bg-base-200 rounded-full p-2" onClick={onClose} />}
                </div>
                {children}
            </div>
        </div>
    )
}


==================== C:\Code\recipe-app\frontend\src\components\Select.jsx ====================

import React from "react";

export default function Select({ label, options, disabled, value, onChange }) {
    return (
        <label className="form-control w-full">
            {label && (
                <div className="label">
                    <span className="label-text text-sm font-medium">{label}</span>
                </div>
            )}
            <select
                className="select select-bordered w-full truncate"
                value={value}
                disabled={disabled}
                onChange={onChange}
            >
                <option value="">Pick one</option>
                {options.map((option) => (
                    <option key={option.id} value={option.id} className="truncate">{option.label}</option>
                ))}
            </select>
        </label>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\contact.jsx ====================

import { Form } from "react-router-dom";

export default function Contact() {
    const contact = {
        first: "Your",
        last: "Name",
        avatar: "https://robohash.org/you.png?size=200x200",
        twitter: "your_handle",
        notes: "Some notes",
        favorite: true,
    };

    return (
        <>
            <div id="contact">
                <div>
                    <img
                        key={contact.avatar}
                        src={
                            contact.avatar ||
                            `https://robohash.org/${contact.id}.png?size=200x200`
                        }
                    />
                </div>

                <div>
                    <h1>
                        {contact.first || contact.last ? (
                            <>
                                {contact.first} {contact.last}
                            </>
                        ) : (
                            <i>No Name</i>
                        )}{" "}
                        <Favorite contact={contact} />
                    </h1>

                    {contact.twitter && (
                        <p>
                            <a
                                target="_blank"
                                href={`https://twitter.com/${contact.twitter}`}
                            >
                                {contact.twitter}
                            </a>
                        </p>
                    )}

                    {contact.notes && <p>{contact.notes}</p>}

                    <div>
                        <Form action="edit">
                            <button type="submit">Edit</button>
                        </Form>
                        <Form
                            method="post"
                            action="destroy"
                            onSubmit={(event) => {
                                if (
                                    !confirm(
                                        "Please confirm you want to delete this record."
                                    )
                                ) {
                                    event.preventDefault();
                                }
                            }}
                        >
                            <button type="submit">Delete</button>
                        </Form>
                    </div>
                </div>
            </div>
        </>
    );
}

function Favorite({ contact }) {
    const favorite = contact.favorite;
    return (
        <Form method="post">
            <button
                name="favorite"
                value={favorite ? "false" : "true"}
                aria-label={
                    favorite
                        ? "Remove from favorites"
                        : "Add to favorites"
                }
            >
                {favorite ? "★" : "☆"}
            </button>
        </Form>
    );
}

==================== C:\Code\recipe-app\frontend\src\routes\home.jsx ====================

import React from "react";
import Card from "../components/Card";
import { Link } from "react-router-dom";
import MealCard from "../components/MealCard";
import { FaChevronRight } from "react-icons/fa";
import { recipes, authors, books } from "../dummy-data";

export default function Home() {
    const favoriteMeals = recipes.map(recipe => {
        const author = authors.find(author => author.id === recipe.selectedAuthor)?.label || "Unknown Author";
        const book = books.find(book => book.id === recipe.selectedBook)?.label || "Unknown Book";
        return {
            title: recipe.recipeName,
            source: { author, book },
            badge: recipe.selectedCountry,
        };
    });

    const getColor = (index) => {
        const colors = ["accent", "secondary", "primary"];
        return colors[index % colors.length];
    };

    return (
        <>
            <div className="flex flex-col gap-4">
                <h3 className="font-medium">Meal plans</h3>
                <div className="grid grid-cols-9 gap-4">
                    <div className="col-span-5 flex flex-col">
                        <Link to="meal-plan/1" className="w-full h-full">
                            <Card className="text h-full">
                                <div className="flex gap-2 flex-col h-full">
                                    <div className="flex flex-col grow">
                                        <span className="text-lg font-bold">This week</span>
                                        <span className="text-xs">Mon 1 Jul - Sun 7 Jul</span>
                                    </div>
                                    <div className="flex flex-col gap-1">
                                        <div className="grid grid-cols-2 items-center">
                                            <span className="text-xs">Breakfast</span>
                                            <div className="flex h-[16px]">
                                                <div className="bg-accent w-[52%] h-full rounded-l flex items-center justify-end px-1">
                                                    <span className="text-[10px] font-bold">
                                                        4
                                                    </span>
                                                </div>
                                                <div className="bg-neutral h-full flex-grow rounded-r"></div>
                                            </div>
                                        </div>
                                        <div className="grid grid-cols-2 items-center">
                                            <span className="text-xs">Lunch</span>
                                            <div className="flex h-[16px]">
                                                <div className="bg-secondary w-[33%] h-full rounded-l flex items-center justify-end px-1">
                                                    <span className="text-[10px] font-bold">
                                                        2
                                                    </span>
                                                </div>
                                                <div className="bg-neutral h-full flex-grow rounded-r"></div>
                                            </div>
                                        </div>
                                        <div className="grid grid-cols-2 items-center">
                                            <span className="text-xs">Dinner</span>
                                            <div className="flex h-[16px]">
                                                <div className="bg-primary w-[90%] h-full rounded-l flex items-center justify-end px-1">
                                                    <span className="text-[10px] font-bold">
                                                        6
                                                    </span>
                                                </div>
                                                <div className="bg-neutral h-full flex-grow rounded-r"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        </Link>
                    </div>
                    <div className="flex flex-col gap-4 col-span-4">
                        <Card className="flex-grow">
                            <p className="text-lg font-bold">1</p>
                            <p className="text-xs font-medium text-base-content/60">Upcoming</p>
                        </Card>
                        <Card className="flex-grow">
                            <p className="text-lg font-bold">12</p>
                            <p className="text-xs font-medium text-base-content/60">Previous</p>
                        </Card>
                    </div>
                </div>
                <h3 className="font-medium">Favourite meals</h3>
                {favoriteMeals.map((meal, index) => (
                    <Link to={`/recipe/${index + 1}`} key={index} className="w-full">
                        <MealCard
                            key={index}
                            meal={meal.title}
                            color={getColor(index)}
                            source={meal.source}
                            icon={<FaChevronRight />}
                        />
                    </Link>
                ))}
            </div>
        </>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\meal-plan.jsx ====================

import React, { useState } from "react";
import MealCard from "../components/MealCard";

const days = [
    {
        date: "2024-07-01",
        breakfast: null,
        breakfastSide: null,
        breakfastSource: null,
        lunch: "Ham sandwich",
        lunchSide: "Chips",
        lunchSource: { author: "John Doe", book: "Healthy Lunches" },
        dinner: "Spaghetti bolognese",
        dinnerSide: "Garlic bread",
        dinnerSource: { author: "Jane Smith", book: "Classic Italian Dishes" }
    },
    {
        date: "2024-07-02",
        breakfast: "Pancakes",
        breakfastSide: "Syrup",
        breakfastSource: { author: "Anna Johnson", book: "Breakfast Favorites" },
        lunch: null,
        lunchSide: null,
        lunchSource: null,
        dinner: null,
        dinnerSide: null,
        dinnerSource: null
    },
    {
        date: "2024-07-03",
        breakfast: "Omelette",
        breakfastSide: "Toast",
        breakfastSource: { author: "Anna Johnson", book: "Breakfast Favorites" },
        lunch: null,
        lunchSide: null,
        lunchSource: null,
        dinner: "Beef tacos",
        dinnerSide: "Salsa",
        dinnerSource: { author: "Carlos Gomez", book: "Mexican Cuisine" }
    },
    {
        date: "2024-07-04",
        breakfast: "Smoothie",
        breakfastSide: "Fruit salad",
        breakfastSource: { author: "Sarah Lee", book: "Healthy Breakfasts" },
        lunch: "Vegetable stir-fry",
        lunchSide: "Spring rolls",
        lunchSource: { author: "Emily Wang", book: "Asian Cuisine" },
        dinner: null,
        dinnerSide: null,
        dinnerSource: null
    },
    {
        date: "2024-07-05",
        breakfast: "Yogurt and granola",
        breakfastSide: "Berries",
        breakfastSource: { author: "Sarah Lee", book: "Healthy Breakfasts" },
        lunch: "Turkey wrap",
        lunchSide: "Salad",
        lunchSource: { author: "John Doe", book: "Healthy Lunches" },
        dinner: "Pizza",
        dinnerSide: "Garlic bread",
        dinnerSource: { author: "Luigi Rossi", book: "Italian Classics" }
    },
    {
        date: "2024-07-06",
        breakfast: "French toast",
        breakfastSide: "Maple syrup",
        breakfastSource: { author: "Anna Johnson", book: "Breakfast Favorites" },
        lunch: "Caesar salad",
        lunchSide: "Breadsticks",
        lunchSource: { author: "Mary Brown", book: "Salad Recipes" },
        dinner: "Lasagna",
        dinnerSide: "Caesar salad",
        dinnerSource: { author: "Luigi Rossi", book: "Italian Classics" }
    },
    {
        date: "2024-07-07",
        breakfast: "Bagel with cream cheese",
        breakfastSide: "Orange juice",
        breakfastSource: { author: "Anna Johnson", book: "Breakfast Favorites" },
        lunch: "Quinoa salad",
        lunchSide: "Fruit",
        lunchSource: { author: "Mary Brown", book: "Salad Recipes" },
        dinner: "Steak and potatoes",
        dinnerSide: "Green beans",
        dinnerSource: { author: "Gordon Ramsey", book: "Ultimate Cooking" }
    }
];
const getDayOfWeek = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-GB', { weekday: 'short' }).slice(0, 3);
};

const MealPlan = () => {
    const [selectedDate, setSelectedDate] = useState(days[0].date);
    const selectedDay = days.find(day => day.date === selectedDate);  

    return (
        <>
            <h1 className="font-bold">Meal plan details</h1>
            <div className="w-full flex gap-3 my-4 justify-between">
                {days.map((day, index) => (
                    <div
                        key={index}
                        className="flex flex-col items-center "
                        onClick={() => setSelectedDate(day.date)}
                    >
                        <div className="text-[10px] uppercase font-medium text-black/70">{getDayOfWeek(day.date)}</div>
                        <div className={`flex items-center justify-center text-sm font-medium cursor-pointer w-8 h-8 rounded border ${day.date === selectedDate ? 'bg-neutral text-neutral-content' : 'bg-base-100'}`}>
                            <div>{day.date.slice(-2)}</div>
                        </div>
                        <div className="flex justify-center gap-1 mt-1">
                            {day.breakfast && <span className="w-1 h-1 bg-accent rounded-full"></span>}
                            {day.lunch && <span className="w-1 h-1 bg-secondary rounded-full"></span>}
                            {day.dinner && <span className="w-1 h-1 bg-primary rounded-full"></span>}
                        </div>
                    </div>
                ))}
            </div>
            <div className="flex flex-col gap-4">
                <MealCard mealType="Breakfast" meal={selectedDay.breakfast} side={selectedDay.breakfastSide} source={selectedDay.breakfastSource} color="accent" />
                <MealCard mealType="Lunch" meal={selectedDay.lunch} side={selectedDay.lunchSide} source={selectedDay.lunchSource} color="secondary" />
                <MealCard mealType="Dinner" meal={selectedDay.dinner} side={selectedDay.dinnerSide} source={selectedDay.dinnerSource} color="primary" />
            </div>
        </>
    );
}

export default MealPlan;


==================== C:\Code\recipe-app\frontend\src\routes\recipe-editor.jsx ====================

import React, { useState, useEffect } from "react";
import Input from "../components/Input";
import Select from "../components/Select";
import Card from "../components/Card";
import { FaChevronRight, FaPlus } from "react-icons/fa";
import Modal from "../components/Modal";
import FlagRadio from "../components/FlagRadio";
import { NavLink, useParams } from "react-router-dom";
import {authors, books, recipes } from "../dummy-data"

export default function RecipeEditor() {
    const { recipeId } = useParams();
    const [step, setStep] = useState(1);
    const [recipeName, setRecipeName] = useState("");
    const [selectedAuthor, setSelectedAuthor] = useState("");
    const [selectedBook, setSelectedBook] = useState("");
    const [pageNumber, setPageNumber] = useState("");
    const [recipeUrl, setRecipeUrl] = useState("");
    const [selectedType, setSelectedType] = useState("main");
    const [selectedCountry, setSelectedCountry] = useState("");
    const [sourceType, setSourceType] = useState("none");
    const [servings, setServings] = useState(4);
    const [cookingTime, setCookingTime] = useState("");
    const [isAddAuthorModalOpen, setIsAddAuthorModalOpen] = useState(false);
    const [isAddRecipeBookModalOpen, setIsAddRecipeBookModalOpen] = useState(false);
    const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);

    useEffect(() => {
        if (recipeId) {
            const recipe = recipes.find(r => r.id === parseInt(recipeId));
            if (recipe) {
                setRecipeName(recipe.recipeName);
                setSelectedAuthor(recipe.selectedAuthor);
                setSelectedBook(recipe.selectedBook);
                setPageNumber(recipe.pageNumber);
                setRecipeUrl(recipe.recipeUrl);
                setSelectedType(recipe.selectedType);
                setSelectedCountry(recipe.selectedCountry);
                setServings(recipe.servings);
                setCookingTime(recipe.cookingTime);
                setSourceType(recipe.recipeUrl ? "online" : "book");
            }
        }
    }, [recipeId]);

    // const authorOptions = [
    //     { id: 1, label: "Jamie Oliver" },
    //     { id: 2, label: "Pinch of Nom" },
    //     { id: 3, label: "Bored of Lunch" },
    //     { id: 4, label: "Good Food" },
    //     { id: 5, label: "Gino D'Acampo" },
    // ];

    // const bookOptions = [
    //     { id: 1, label: "5 Ingredients", authorId: 1 },
    //     { id: 2, label: "Ministry of Food", authorId: 1 },
    //     { id: 3, label: "Quick & Easy", authorId: 2 },
    //     { id: 4, label: "Everyday Light", authorId: 2 },
    //     { id: 5, label: "The Healthy Air Fryer Book", authorId: 3 },
    //     { id: 6, label: "Healthy Slow Cooker: Even Easier", authorId: 3 },
    //     { id: 7, label: "Ultimate Slow Cooker Recipes", authorId: 4 },
    //     { id: 8, label: "Gino's Italian Escape", authorId: 5 },
    //     { id: 9, label: "Gino's Italy", authorId: 5 },
    // ];

    const sourceTypeOptions = [
        { id: "none", label: "None" },
        { id: "book", label: "Recipe book" },
        { id: "online", label: "Online" }
    ];

    const logState = () => {
        console.log({
            recipeName,
            selectedType,
            servings,
            selectedAuthor,
            selectedBook,
            pageNumber,
            recipeUrl,
            cookingTime,
            selectedCountry,
        });
    };

    const handleRecipeNameChange = (event) => {
        setRecipeName(event.target.value);
    };

    const handleAuthorChange = (event) => {
        setSelectedAuthor(event.target.value);
        setSelectedBook("");
        setSourceType("");
        setSelectedBook("");
        setRecipeUrl("");
    };

    const handleBookChange = (event) => {
        setSelectedBook(event.target.value);
    };

    const handlePageNumberChange = (event) => {
        setPageNumber(event.target.value);
    };

    const handleRecipeUrlChange = (event) => {
        setRecipeUrl(event.target.value);
    };

    const handleTypeChange = (event) => {
        setSelectedType(event.target.value);
    };

    const handleCountryChange = (event) => {
        setSelectedCountry(event.target.value);
    };

    const handleSourceTypeChange = (event) => {
        setSourceType(event.target.value);

        setSelectedBook("");
        setRecipeUrl("");
    };

    const handleServingsChange = (event) => {
        setServings(parseInt(event.target.value));
    };

    const handleCookingTimeChange = (event) => {
        setCookingTime(parseInt(event.target.value));
    };

    const handleNextStep = () => {
        setStep((prevStep) => Math.min(prevStep + 1, 3));
    };

    const handleBackStep = () => {
        setStep((prevStep) => Math.max(prevStep - 1, 1));
    };

    const handleRecipeSubmit = () => {
        logState();
        openSuccessModal();
    }

    const isNextButtonDisabled = () => {
        if (step === 1) {
            return !recipeName || !selectedType;
        }
        if (step === 2) {
            return !selectedAuthor;
        }

        if (step === 3) {
            return !selectedCountry;
        }

        return false;
    };

    const filteredBookOptions = books.filter(book => book.authorId === parseInt(selectedAuthor));

    const openAddAuthorModal = () => {
        setIsAddAuthorModalOpen(true);
    };

    const closeAddAuthorModal = () => {
        setIsAddAuthorModalOpen(false);
    };

    const openAddRecipeBookModal = () => {
        setIsAddRecipeBookModalOpen(true);
    };

    const closeAddRecipeBookModal = () => {
        setIsAddRecipeBookModalOpen(false);
    };

    const openSuccessModal = () => {
        setIsSuccessModalOpen(true);
    };

    const closeSuccessModal = () => {
        setIsSuccessModalOpen(false);
    };

    return (
        <div className="flex flex-col gap-4 h-full">
            <div className="flex gap-3 items-center">
                <div className="flex gap-1 items-center">
                    <span className={`block ${step === 1 ? 'bg-accent' : 'bg-gray-200'} text-accent-content w-5 h-5 text-xs rounded flex items-center justify-center font-bold`}>1</span>
                    {step === 1 && <span className="text-xs font-medium">Details</span>}
                </div>
                <span className="text-[8px] text-black/90"><FaChevronRight /></span>
                <div className="flex gap-1 items-center">
                    <span className={`block ${step === 2 ? 'bg-secondary' : 'bg-gray-200'} text-secondary-content w-5 h-5 text-xs rounded flex items-center justify-center font-bold`}>2</span>
                    {step === 2 && <span className="text-xs font-medium">Author</span>}
                </div>
                <span className="text-[8px] text-black/90"><FaChevronRight /></span>
                <div className="flex gap-1 items-center">
                    <span className={`block ${step === 3 ? 'bg-primary' : 'bg-gray-200'} text-primary-content w-5 h-5 text-xs rounded flex items-center justify-center font-bold`}>3</span>
                    {step === 3 && <span className="text-xs font-medium">Other details</span>}
                </div>
            </div>
            <Card className="grow h-full p-2">
                <div className="flex flex-col justify-between h-full">
                    {step === 1 && (
                        <div className="flex flex-col gap-6">
                            <Input
                                label="Recipe name"
                                onChange={handleRecipeNameChange}
                                required
                                value={recipeName}
                            />

                            <div>
                                <div className="label">
                                    <span className="label-text text-sm font-medium">Type</span>
                                </div>
                                <div className="flex gap-2">
                                    <input
                                        type="radio"
                                        name="meal-type"
                                        className="btn btn-sm"
                                        aria-label="Main"
                                        value="main"
                                        onChange={handleTypeChange}
                                        checked={selectedType === "main"}
                                    />
                                    <input
                                        type="radio"
                                        name="meal-type"
                                        className="btn btn-sm"
                                        aria-label="Side"
                                        value="side"
                                        onChange={handleTypeChange}
                                        checked={selectedType === "side"}
                                    />
                                </div>
                            </div>

                            <div>
                                <div className="label">
                                    <span className="label-text text-sm font-medium">Servings</span>
                                </div>
                                <input
                                    type="range"
                                    min={1}
                                    max={5}
                                    value={servings}
                                    className="range"
                                    step={1}
                                    onChange={handleServingsChange}
                                />
                                <div className="flex w-full justify-between px-2 text-xs">
                                    <span>1</span>
                                    <span>2</span>
                                    <span>3</span>
                                    <span>4</span>
                                    <span>5</span>
                                </div>
                            </div>

                        </div>
                    )}

                    {step === 2 && (
                        <div className="flex flex-col gap-6">
                            <div className="flex gap-2 items-end">
                                <Select
                                    label="Author"
                                    options={authors}
                                    value={selectedAuthor}
                                    onChange={handleAuthorChange}
                                />
                                <button className="btn" onClick={openAddAuthorModal}><FaPlus /></button>
                            </div>
                            <Select
                                label="Recipe type"
                                options={sourceTypeOptions}
                                disabled={!selectedAuthor}
                                value={sourceType}
                                onChange={handleSourceTypeChange}
                            />
                            <div className="flex gap-2 items-end">
                                <div className="w-full max-w-xs flex-shrink-1">
                                    <Select
                                        label="Recipe book"
                                        options={filteredBookOptions}
                                        disabled={sourceType !== "book"}
                                        value={selectedBook}
                                        onChange={handleBookChange}
                                    />
                                </div>
                                <button
                                    className="btn"
                                    onClick={openAddRecipeBookModal}
                                    disabled={sourceType !== "book"}
                                >
                                    <FaPlus />
                                </button>
                            </div>

                            {sourceType === "book" ? (<Input
                                label="Page number"
                                type="number"
                                disabled={!selectedBook}
                                onChange={handlePageNumberChange}
                                value={pageNumber}
                            />) : <Input
                                label="Recipe URL"
                                onChange={handleRecipeUrlChange}
                                disabled={sourceType !== "online"}
                                value={recipeUrl}
                            />
                            }
                        </div>
                    )}

                    {step === 3 && (
                        <div className="flex flex-col gap-6">
                            <Input
                                label="Cooking time (minutes)"
                                type="number"
                                onChange={handleCookingTimeChange}
                                required
                                value={cookingTime}
                            />

                            <div>
                                <div className="label">
                                    <span className="label-text text-sm font-medium">Cuisine</span>
                                </div>
                                <ul className="grid grid-cols-2 gap-2 w-full flex-wrap">
                                    <FlagRadio code="MX" country="Mexican" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="US" country="American" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="CN" country="Chinese" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="GB" country="British" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="IT" country="Italian" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="ES" country="Spanish" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="FR" country="French" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="IN" country="Indian" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="GR" country="Greek" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="JP" country="Japanese" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="KR" country="Korean" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="TH" country="Thai" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                </ul>
                            </div>
                        </div>
                    )}

                    <div className="flex justify-between gap-4">
                        <div>
                            {step > 1 && <button className="btn btn-ghost" onClick={handleBackStep}>Back</button>}
                        </div>
                        <div className="flex gap-4">
                            <button className="btn px-6">Cancel</button>
                            {step < 3 && (
                                <button className={`btn btn-accent px-6`} onClick={handleNextStep} disabled={isNextButtonDisabled()}>
                                    Next
                                </button>
                            )}
                            {step === 3 && (
                                <button className={`btn btn-secondary px-6`} onClick={handleRecipeSubmit} disabled={isNextButtonDisabled()}>
                                    Finish
                                </button>
                            )}
                        </div>
                    </div>
                </div>
            </Card>

            {isAddAuthorModalOpen && (
                <Modal title="Add Author" onClose={closeAddAuthorModal}>
                    <div className="flex flex-col gap-6">

                        <Input label="Author name" className="w-full" />
                        <button className="btn btn-primary">Add author</button>
                    </div>
                </Modal>
            )}

            {isAddRecipeBookModalOpen && (
                <Modal title="Add recipe book" onClose={closeAddRecipeBookModal}>
                    <div className="flex flex-col gap-6">
                        <Input label="Title" className="w-full" />

                        <Select
                            label="Author"
                            options={authorOptions}
                            value={selectedAuthor}
                            onChange={handleAuthorChange}
                            disabled={true}
                        />
                        <button className="btn btn-primary">Add recipe book</button>
                    </div>
                </Modal>
            )}

            {isSuccessModalOpen && (
                <Modal title="Recipe Added!">
                    <div className="flex flex-col gap-6">
                        <p>Fantastic! 🎉 <span className="font-bold">{recipeName}</span>, is now part of the app!</p>
                        <p>But wait, it looks like your recipe still needs some ingredients! Shall we add them now?</p>
                        <button className="btn btn-primary">Let's add ingredients!</button>
                        <NavLink to="/" className="btn">Back to home screen</NavLink>
                    </div>
                </Modal>
            )}


        </div>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\recipe.jsx ====================

import React, { useState, useEffect } from "react";
import { FaHeart } from "react-icons/fa";
import { useParams, Link } from "react-router-dom"; // Import useParams and Link
import { recipes, authors, books } from "../dummy-data"; // Import recipes, authors, and books
import Card from "../components/Card";

export default function Recipe() {
    const { recipeId } = useParams(); // Get recipeId from the URL
    const [recipe, setRecipe] = useState(null);

    useEffect(() => {
        const foundRecipe = recipes.find(r => r.id === parseInt(recipeId));
        if (foundRecipe) {
            const author = authors.find(author => author.id === foundRecipe.selectedAuthor)?.label || "Unknown Author";
            const book = books.find(book => book.id === foundRecipe.selectedBook)?.label || "Unknown Book";

            setRecipe({
                ...foundRecipe,
                author,
                book,
                image: "https://picsum.photos/500/300",
                details: {
                    calories: 345,
                    weight: 250,
                    rating: 4.7,
                    time: foundRecipe.cookingTime,
                },
                tags: ["Breakfast", "Fast", "Easy"],
                ingredients: [
                    { name: "Eggs", quantity: "3 pc" },
                    { name: "Toast bread", quantity: "2 pc" },
                    { name: "Avocado", quantity: "1 pc" },
                    { name: "Tomato", quantity: "1/2 pc" },
                    { name: "Cheese", quantity: "70 g" },
                ],
            });
        }
    }, [recipeId]);

    if (!recipe) {
        return <div>Loading...</div>;
    }

    return (
        <Card>
            <div className="p-2">
                <div className="relative">
                    <img src={recipe.image} alt={recipe.recipeName} className="w-full h-64 object-cover rounded" />
                    <div className="absolute top-2 left-2 bg-white rounded-full p-1">
                        <FaHeart className="text-gray-500" />
                    </div>
                </div>
                <h1 className="text-2xl font-bold mt-4">{recipe.recipeName}</h1>
                <p className="text-sm text-gray-500 mt-2">by {recipe.author}</p>
                <p className="text-sm text-gray-500">from the book {recipe.book}</p>
                <Link to={`/editor/${recipeId}`} className="btn btn-sm btn-accent mt-4">
                    Edit Recipe
                </Link>
                <div className="flex gap-2 mt-4">
                    {recipe.tags.map((tag, index) => (
                        <span key={index} className="bg-green-100 text-green-700 text-xs font-semibold px-2 py-1 rounded">
                            {tag}
                        </span>
                    ))}
                </div>
                <h2 className="text-xl font-semibold mt-4">Ingredients</h2>
                <ul className="list-disc list-inside mt-2">
                    {recipe.ingredients.map((ingredient, index) => (
                        <li key={index}>
                            {ingredient.name} - {ingredient.quantity}
                        </li>
                    ))}
                </ul>
                <div className="mt-4">

                </div>
            </div>
        </Card>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\root.jsx ====================

import { Outlet } from "react-router-dom";
import Header from "../components/Header";

export default function Root() {
    return (
        <div className="flex flex-col h-dvh max-h-dvh bg-base-200 text-base-content items-center">
            <Header />
            <div className="grow overflow-auto p-6 w-full max-w-sm">
                <Outlet />
            </div>
        </div>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\to-do.jsx ====================

import React from "react";
import Card from "../components/Card";

export default function ToDo() {
    return (
        <Card>
            <div className="prose">
                <h3>To do list</h3>
                <ul>
                    <li><s>Recipe editor</s></li>
                    <li>Add step and image upload to recipe editor</li>
                    <li>Ingredient editor inc. add ingredient modal</li>
                    <li>Meal plan list</li>
                    <li>Shopping list</li>
                    <li>Add meal plan modal for home screen inc. calendar</li>
                    <li>Add/edit meal modal on meal plan</li>
                    <li><s>Edit recipe using recipe editor, pre-filled details</s></li>
                    <li>Icons on upcoming and previous cards</li>
                </ul>
            </div>
        </Card>
    );
}

==================== C:\Code\recipe-app\output_server.txt ====================



==================== C:\Code\recipe-app\server\database.py ====================

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite:///../mydatabase2.db"
engine = create_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

==================== C:\Code\recipe-app\server\main.py ====================

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from models import Base
from database import engine
from api.routes import (
    ingredients_router,
    recipes_router,
    users_router,
    ingredient_categories_router,
    ingredient_sub_categories_router,
    recipe_authors_router,
    recipe_books_router,
    recipe_ingredients_router,
    units_router,
    meal_plans_router,
    meal_plan_recipes_router,
    shopping_lists_router,
    shopping_list_ingredients_router,  # Add these lines
)

# Create the tables
Base.metadata.create_all(bind=engine)

# FastAPI instance
app = FastAPI()

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],  # Allows all origins
    allow_credentials=True,
    allow_methods=["*"],  # Allows all methods
    allow_headers=["*"],  # Allows all headers
)

# Include API routes
app.include_router(ingredients_router)
app.include_router(recipes_router)
app.include_router(users_router)
app.include_router(ingredient_categories_router)
app.include_router(ingredient_sub_categories_router)
app.include_router(recipe_authors_router)
app.include_router(recipe_books_router)
app.include_router(recipe_ingredients_router)
app.include_router(units_router)
app.include_router(meal_plans_router)
app.include_router(meal_plan_recipes_router)
app.include_router(shopping_lists_router)  # Add this line
app.include_router(shopping_list_ingredients_router)  # Add this line

@app.get("/")
def read_root():
    return {"Hello": "World"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000, reload=True)


==================== C:\Code\recipe-app\server\api\__init__.py ====================



==================== C:\Code\recipe-app\server\api\routes\ingredients.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import Ingredient as IngredientModel
from schemas.ingredient import Ingredient as IngredientSchema, IngredientCreate, IngredientUpdate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/ingredients")

@router.get("/", response_model=List[IngredientSchema])
def read_ingredients(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    ingredients = db.query(IngredientModel).offset(skip).limit(limit).all()
    return ingredients

@router.post("/", response_model=IngredientSchema, status_code=status.HTTP_201_CREATED)
def create_ingredient(ingredient: IngredientCreate, db: Session = Depends(get_db)):
    db_ingredient = IngredientModel(
        IngredientName=ingredient.IngredientName,
        PurchaseWeightVolume=ingredient.PurchaseWeightVolume,
        PurchaseUnitID=ingredient.PurchaseUnitID,
        SubCategoryID=ingredient.SubCategoryID,
        PurchaseWeightUnitID=ingredient.PurchaseWeightUnitID,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_ingredient)
    db.commit()
    db.refresh(db_ingredient)
    return db_ingredient

@router.put("/{ingredient_id}", response_model=IngredientSchema)
def update_ingredient(ingredient_id: int, ingredient: IngredientUpdate, db: Session = Depends(get_db)):
    db_ingredient = db.query(IngredientModel).filter(IngredientModel.IngredientID == ingredient_id).first()
    if db_ingredient is None:
        raise HTTPException(status_code=404, detail="Ingredient not found")
    for key, value in ingredient.dict().items():
        setattr(db_ingredient, key, value)
    db_ingredient.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_ingredient)
    return db_ingredient

@router.delete("/{ingredient_id}", response_model=IngredientSchema)
def delete_ingredient(ingredient_id: int, db: Session = Depends(get_db)):
    db_ingredient = db.query(IngredientModel).filter(IngredientModel.IngredientID == ingredient_id).first()
    if db_ingredient is None:
        raise HTTPException(status_code=404, detail="Ingredient not found")
    db.delete(db_ingredient)
    db.commit()
    return db_ingredient


==================== C:\Code\recipe-app\server\api\routes\ingredient_categories.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import IngredientCategory as IngredientCategoryModel
from schemas.ingredient_category import IngredientCategory, IngredientCategoryCreate, IngredientCategoryUpdate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/ingredient-categories")

@router.get("/", response_model=List[IngredientCategory])
def read_ingredient_categories(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    ingredient_categories = db.query(IngredientCategoryModel).offset(skip).limit(limit).all()
    return ingredient_categories

@router.post("/", response_model=IngredientCategory, status_code=status.HTTP_201_CREATED)
def create_ingredient_category(ingredient_category: IngredientCategoryCreate, db: Session = Depends(get_db)):
    db_ingredient_category = IngredientCategoryModel(
        CategoryName=ingredient_category.CategoryName,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    try:
        db.add(db_ingredient_category)
        db.commit()
        db.refresh(db_ingredient_category)
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Category name already exists.")
    return db_ingredient_category

@router.put("/{category_id}", response_model=IngredientCategory)
def update_ingredient_category(category_id: int, ingredient_category: IngredientCategoryUpdate, db: Session = Depends(get_db)):
    db_ingredient_category = db.query(IngredientCategoryModel).filter(IngredientCategoryModel.CategoryID == category_id).first()
    if db_ingredient_category is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient category not found")
    for key, value in ingredient_category.dict().items():
        setattr(db_ingredient_category, key, value)
    db_ingredient_category.UpdatedAt = datetime.utcnow()
    try:
        db.commit()
        db.refresh(db_ingredient_category)
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Category name already exists.")
    return db_ingredient_category

@router.delete("/{category_id}", response_model=IngredientCategory)
def delete_ingredient_category(category_id: int, db: Session = Depends(get_db)):
    db_ingredient_category = db.query(IngredientCategoryModel).filter(IngredientCategoryModel.CategoryID == category_id).first()
    if db_ingredient_category is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient category not found")
    db.delete(db_ingredient_category)
    db.commit()
    return db_ingredient_category


==================== C:\Code\recipe-app\server\api\routes\ingredient_sub_categories.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from database import get_db
from models import IngredientSubCategory as IngredientSubCategoryModel
from schemas.ingredient_sub_category import (
    IngredientSubCategory,
    IngredientSubCategoryCreate,
    IngredientSubCategoryUpdate
)
from datetime import datetime

router = APIRouter(prefix="/api/ingredient-sub-categories")

@router.get("/", response_model=List[IngredientSubCategory])
def read_ingredient_sub_categories(skip: int = 0, limit: int = 1000, db: Session = Depends(get_db)):
    ingredient_sub_categories = db.query(IngredientSubCategoryModel).offset(skip).limit(limit).all()
    return ingredient_sub_categories

@router.get("/{sub_category_id}", response_model=IngredientSubCategory)
def read_ingredient_sub_category(sub_category_id: int, db: Session = Depends(get_db)):
    db_ingredient_sub_category = db.query(IngredientSubCategoryModel).filter(IngredientSubCategoryModel.SubCategoryID == sub_category_id).first()
    if not db_ingredient_sub_category:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient sub-category not found")
    return db_ingredient_sub_category

@router.get("/category/{category_id}", response_model=List[IngredientSubCategory])
def read_ingredient_sub_categories_by_category(category_id: int, skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    ingredient_sub_categories = db.query(IngredientSubCategoryModel).filter(IngredientSubCategoryModel.CategoryID == category_id).offset(skip).limit(limit).all()
    return ingredient_sub_categories

@router.post("/", response_model=IngredientSubCategory, status_code=status.HTTP_201_CREATED)
def create_ingredient_sub_category(ingredient_sub_category: IngredientSubCategoryCreate, db: Session = Depends(get_db)):
    db_ingredient_sub_category = IngredientSubCategoryModel(
        SubCategoryName=ingredient_sub_category.SubCategoryName,
        CategoryID=ingredient_sub_category.CategoryID,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_ingredient_sub_category)
    db.commit()
    db.refresh(db_ingredient_sub_category)
    return db_ingredient_sub_category

@router.put("/{sub_category_id}", response_model=IngredientSubCategory)
def update_ingredient_sub_category(sub_category_id: int, ingredient_sub_category: IngredientSubCategoryUpdate, db: Session = Depends(get_db)):
    db_ingredient_sub_category = db.query(IngredientSubCategoryModel).filter(IngredientSubCategoryModel.SubCategoryID == sub_category_id).first()
    if not db_ingredient_sub_category:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient sub-category not found")
    
    for key, value in ingredient_sub_category.dict().items():
        setattr(db_ingredient_sub_category, key, value)
    db_ingredient_sub_category.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_ingredient_sub_category)
    return db_ingredient_sub_category

@router.delete("/{sub_category_id}", response_model=IngredientSubCategory)
def delete_ingredient_sub_category(sub_category_id: int, db: Session = Depends(get_db)):
    db_ingredient_sub_category = db.query(IngredientSubCategoryModel).filter(IngredientSubCategoryModel.SubCategoryID == sub_category_id).first()
    if not db_ingredient_sub_category:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient sub-category not found")
    
    db.delete(db_ingredient_sub_category)
    db.commit()
    return db_ingredient_sub_category


==================== C:\Code\recipe-app\server\api\routes\meal_plans.py ====================

# api/routes/meal_plans.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import MealPlan as MealPlanModel
from schemas.meal_plan import MealPlan as MealPlanSchema, MealPlanCreate, MealPlanUpdate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/meal-plans")

@router.get("/", response_model=List[MealPlanSchema])
def read_meal_plans(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    meal_plans = db.query(MealPlanModel).offset(skip).limit(limit).all()
    return meal_plans

@router.post("/", response_model=MealPlanSchema, status_code=status.HTTP_201_CREATED)
def create_meal_plan(meal_plan: MealPlanCreate, db: Session = Depends(get_db)):
    db_meal_plan = MealPlanModel(
        UserID=meal_plan.UserID,
        PlanName=meal_plan.PlanName,
        StartDate=meal_plan.StartDate,
        EndDate=meal_plan.EndDate,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_meal_plan)
    db.commit()
    db.refresh(db_meal_plan)
    return db_meal_plan

@router.get("/{meal_plan_id}", response_model=MealPlanSchema)
def read_meal_plan(meal_plan_id: int, db: Session = Depends(get_db)):
    meal_plan = db.query(MealPlanModel).filter(MealPlanModel.MealPlanID == meal_plan_id).first()
    if meal_plan is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan not found")
    return meal_plan

@router.put("/{meal_plan_id}", response_model=MealPlanSchema)
def update_meal_plan(meal_plan_id: int, meal_plan: MealPlanUpdate, db: Session = Depends(get_db)):
    db_meal_plan = db.query(MealPlanModel).filter(MealPlanModel.MealPlanID == meal_plan_id).first()
    if db_meal_plan is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan not found")
    for key, value in meal_plan.dict().items():
        setattr(db_meal_plan, key, value)
    db_meal_plan.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_meal_plan)
    return db_meal_plan

@router.delete("/{meal_plan_id}", response_model=MealPlanSchema)
def delete_meal_plan(meal_plan_id: int, db: Session = Depends(get_db)):
    db_meal_plan = db.query(MealPlanModel).filter(MealPlanModel.MealPlanID == meal_plan_id).first()
    if db_meal_plan is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan not found")
    db.delete(db_meal_plan)
    db.commit()
    return db_meal_plan


==================== C:\Code\recipe-app\server\api\routes\meal_plan_recipes.py ====================

# api/routes/meal_plan_recipes.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import MealPlanRecipe as MealPlanRecipeModel
from schemas.meal_plan_recipe import MealPlanRecipe as MealPlanRecipeSchema, MealPlanRecipeCreate, MealPlanRecipeUpdate
from typing import List

router = APIRouter(prefix="/api/meal-plan-recipes")

@router.get("/", response_model=List[MealPlanRecipeSchema])
def read_meal_plan_recipes(skip: int = 0, limit: int = 10000, db: Session = Depends(get_db)):
    meal_plan_recipes = db.query(MealPlanRecipeModel).offset(skip).limit(limit).all()
    return meal_plan_recipes

@router.post("/", response_model=MealPlanRecipeSchema, status_code=status.HTTP_201_CREATED)
def create_meal_plan_recipe(meal_plan_recipe: MealPlanRecipeCreate, db: Session = Depends(get_db)):
    db_meal_plan_recipe = MealPlanRecipeModel(
        MealPlanID=meal_plan_recipe.MealPlanID,
        RecipeID=meal_plan_recipe.RecipeID,
        MealType=meal_plan_recipe.MealType,
        Date=meal_plan_recipe.Date,
    )
    db.add(db_meal_plan_recipe)
    db.commit()
    db.refresh(db_meal_plan_recipe)
    return db_meal_plan_recipe

@router.get("/{meal_plan_recipe_id}", response_model=MealPlanRecipeSchema)
def read_meal_plan_recipe(meal_plan_recipe_id: int, db: Session = Depends(get_db)):
    meal_plan_recipe = db.query(MealPlanRecipeModel).filter(MealPlanRecipeModel.MealPlanRecipeID == meal_plan_recipe_id).first()
    if meal_plan_recipe is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan recipe not found")
    return meal_plan_recipe

@router.put("/{meal_plan_recipe_id}", response_model=MealPlanRecipeSchema)
def update_meal_plan_recipe(meal_plan_recipe_id: int, meal_plan_recipe: MealPlanRecipeUpdate, db: Session = Depends(get_db)):
    db_meal_plan_recipe = db.query(MealPlanRecipeModel).filter(MealPlanRecipeModel.MealPlanRecipeID == meal_plan_recipe_id).first()
    if db_meal_plan_recipe is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan recipe not found")
    for key, value in meal_plan_recipe.dict().items():
        setattr(db_meal_plan_recipe, key, value)
    db.commit()
    db.refresh(db_meal_plan_recipe)
    return db_meal_plan_recipe

@router.delete("/{meal_plan_recipe_id}", response_model=MealPlanRecipeSchema)
def delete_meal_plan_recipe(meal_plan_recipe_id: int, db: Session = Depends(get_db)):
    db_meal_plan_recipe = db.query(MealPlanRecipeModel).filter(MealPlanRecipeModel.MealPlanRecipeID == meal_plan_recipe_id).first()
    if db_meal_plan_recipe is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan recipe not found")
    db.delete(db_meal_plan_recipe)
    db.commit()
    return db_meal_plan_recipe


==================== C:\Code\recipe-app\server\api\routes\recipes.py ====================

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from database import get_db
from models import Recipe as RecipeModel
from schemas.recipe import Recipe as RecipeSchema, RecipeCreate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/recipes")

@router.get("/", response_model=List[RecipeSchema])
def read_recipes(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    recipes = db.query(RecipeModel).offset(skip).limit(limit).all()
    return recipes

@router.post("/", response_model=RecipeSchema, status_code=201)
def create_recipe(recipe: RecipeCreate, db: Session = Depends(get_db)):
    db_recipe = RecipeModel(
        RecipeName=recipe.RecipeName,
        AuthorID=recipe.AuthorID,
        BookID=recipe.BookID,
        PageNumber=recipe.PageNumber,
        OnlineURL=recipe.OnlineURL,
        CookTime=recipe.CookTime,
        Difficulty=recipe.Difficulty,
        Type=recipe.Type,
        ImageURL=recipe.ImageURL,
        Servings=recipe.Servings,
        Cuisine=recipe.Cuisine,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_recipe)
    db.commit()
    db.refresh(db_recipe)
    return db_recipe

@router.get("/{recipe_id}", response_model=RecipeSchema)
def read_recipe(recipe_id: int, db: Session = Depends(get_db)):
    recipe = db.query(RecipeModel).filter(RecipeModel.RecipeID == recipe_id).first()
    if recipe is None:
        raise HTTPException(status_code=404, detail="Recipe not found")
    return recipe

@router.put("/{recipe_id}", response_model=RecipeSchema)
def update_recipe(recipe_id: int, recipe: RecipeCreate, db: Session = Depends(get_db)):
    db_recipe = db.query(RecipeModel).filter(RecipeModel.RecipeID == recipe_id).first()
    if db_recipe is None:
        raise HTTPException(status_code=404, detail="Recipe not found")
    for key, value in recipe.dict().items():
        setattr(db_recipe, key, value)
    db_recipe.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_recipe)
    return db_recipe

@router.delete("/{recipe_id}", response_model=RecipeSchema)
def delete_recipe(recipe_id: int, db: Session = Depends(get_db)):
    db_recipe = db.query(RecipeModel).filter(RecipeModel.RecipeID == recipe_id).first()
    if db_recipe is None:
        raise HTTPException(status_code=404, detail="Recipe not found")
    db.delete(db_recipe)
    db.commit()
    return db_recipe


==================== C:\Code\recipe-app\server\api\routes\recipe_authors.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import RecipeAuthor as RecipeAuthorModel
from schemas.recipe_author import RecipeAuthor as RecipeAuthorSchema, RecipeAuthorCreate, RecipeAuthorUpdate
from typing import List

router = APIRouter(prefix="/api/recipe-authors")

@router.get("/", response_model=List[RecipeAuthorSchema])
def read_recipe_authors(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    recipe_authors = db.query(RecipeAuthorModel).offset(skip).limit(limit).all()
    return recipe_authors

@router.post("/", response_model=RecipeAuthorSchema, status_code=status.HTTP_201_CREATED)
def create_recipe_author(recipe_author: RecipeAuthorCreate, db: Session = Depends(get_db)):
    db_recipe_author = RecipeAuthorModel(
        AuthorName=recipe_author.AuthorName,
        AuthorImageURL=recipe_author.AuthorImageURL,
    )
    db.add(db_recipe_author)
    db.commit()
    db.refresh(db_recipe_author)
    return db_recipe_author

@router.get("/{author_id}", response_model=RecipeAuthorSchema)
def read_recipe_author(author_id: int, db: Session = Depends(get_db)):
    recipe_author = db.query(RecipeAuthorModel).filter(RecipeAuthorModel.AuthorID == author_id).first()
    if recipe_author is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe author not found")
    return recipe_author

@router.put("/{author_id}", response_model=RecipeAuthorSchema)
def update_recipe_author(author_id: int, recipe_author: RecipeAuthorUpdate, db: Session = Depends(get_db)):
    db_recipe_author = db.query(RecipeAuthorModel).filter(RecipeAuthorModel.AuthorID == author_id).first()
    if db_recipe_author is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe author not found")
    for key, value in recipe_author.dict().items():
        setattr(db_recipe_author, key, value)
    db.commit()
    db.refresh(db_recipe_author)
    return db_recipe_author

@router.delete("/{author_id}", response_model=RecipeAuthorSchema)
def delete_recipe_author(author_id: int, db: Session = Depends(get_db)):
    db_recipe_author = db.query(RecipeAuthorModel).filter(RecipeAuthorModel.AuthorID == author_id).first()
    if db_recipe_author is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe author not found")
    db.delete(db_recipe_author)
    db.commit()
    return db_recipe_author


==================== C:\Code\recipe-app\server\api\routes\recipe_books.py ====================

# api/routes/recipe_books.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import RecipeBook as RecipeBookModel
from schemas.recipe_book import RecipeBook as RecipeBookSchema, RecipeBookCreate, RecipeBookUpdate
from typing import List

router = APIRouter(prefix="/api/recipe-books")

@router.get("/", response_model=List[RecipeBookSchema])
def read_recipe_books(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    recipe_books = db.query(RecipeBookModel).offset(skip).limit(limit).all()
    return recipe_books

@router.post("/", response_model=RecipeBookSchema, status_code=status.HTTP_201_CREATED)
def create_recipe_book(recipe_book: RecipeBookCreate, db: Session = Depends(get_db)):
    db_recipe_book = RecipeBookModel(
        AuthorID=recipe_book.AuthorID,
        BookName=recipe_book.BookName,
        CoverArtURL=recipe_book.CoverArtURL,
    )
    db.add(db_recipe_book)
    db.commit()
    db.refresh(db_recipe_book)
    return db_recipe_book

@router.get("/{book_id}", response_model=RecipeBookSchema)
def read_recipe_book(book_id: int, db: Session = Depends(get_db)):
    recipe_book = db.query(RecipeBookModel).filter(RecipeBookModel.BookID == book_id).first()
    if recipe_book is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe book not found")
    return recipe_book

@router.put("/{book_id}", response_model=RecipeBookSchema)
def update_recipe_book(book_id: int, recipe_book: RecipeBookUpdate, db: Session = Depends(get_db)):
    db_recipe_book = db.query(RecipeBookModel).filter(RecipeBookModel.BookID == book_id).first()
    if db_recipe_book is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe book not found")
    for key, value in recipe_book.dict().items():
        setattr(db_recipe_book, key, value)
    db.commit()
    db.refresh(db_recipe_book)
    return db_recipe_book

@router.delete("/{book_id}", response_model=RecipeBookSchema)
def delete_recipe_book(book_id: int, db: Session = Depends(get_db)):
    db_recipe_book = db.query(RecipeBookModel).filter(RecipeBookModel.BookID == book_id).first()
    if db_recipe_book is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe book not found")
    db.delete(db_recipe_book)
    db.commit()
    return db_recipe_book


==================== C:\Code\recipe-app\server\api\routes\recipe_ingredients.py ====================

# api/routes/recipe_ingredients.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from database import get_db
from models import RecipeIngredient as RecipeIngredientModel
from schemas.recipe_ingredient import (
    RecipeIngredient as RecipeIngredientSchema,
    RecipeIngredientCreate,
    RecipeIngredientUpdate
)
from datetime import datetime

router = APIRouter(prefix="/api/recipe-ingredients")

@router.get("/", response_model=List[RecipeIngredientSchema])
def read_recipe_ingredients(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    recipe_ingredients = db.query(RecipeIngredientModel).offset(skip).limit(limit).all()
    return recipe_ingredients

@router.post("/", response_model=RecipeIngredientSchema, status_code=status.HTTP_201_CREATED)
def create_recipe_ingredient(recipe_ingredient: RecipeIngredientCreate, db: Session = Depends(get_db)):
    db_recipe_ingredient = RecipeIngredientModel(
        RecipeID=recipe_ingredient.RecipeID,
        IngredientID=recipe_ingredient.IngredientID,
        SectionID=recipe_ingredient.SectionID,
        Quantity=recipe_ingredient.Quantity,
        UnitID=recipe_ingredient.UnitID
    )
    db.add(db_recipe_ingredient)
    db.commit()
    db.refresh(db_recipe_ingredient)
    return db_recipe_ingredient

@router.put("/{recipe_ingredient_id}", response_model=RecipeIngredientSchema)
def update_recipe_ingredient(recipe_ingredient_id: int, recipe_ingredient: RecipeIngredientUpdate, db: Session = Depends(get_db)):
    db_recipe_ingredient = db.query(RecipeIngredientModel).filter(RecipeIngredientModel.RecipeIngredientID == recipe_ingredient_id).first()
    if db_recipe_ingredient is None:
        raise HTTPException(status_code=404, detail="Recipe ingredient not found")
    for key, value in recipe_ingredient.dict().items():
        setattr(db_recipe_ingredient, key, value)
    db_recipe_ingredient.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_recipe_ingredient)
    return db_recipe_ingredient

@router.delete("/{recipe_ingredient_id}", response_model=RecipeIngredientSchema)
def delete_recipe_ingredient(recipe_ingredient_id: int, db: Session = Depends(get_db)):
    db_recipe_ingredient = db.query(RecipeIngredientModel).filter(RecipeIngredientModel.RecipeIngredientID == recipe_ingredient_id).first()
    if db_recipe_ingredient is None:
        raise HTTPException(status_code=404, detail="Recipe ingredient not found")
    db.delete(db_recipe_ingredient)
    db.commit()
    return db_recipe_ingredient


==================== C:\Code\recipe-app\server\api\routes\shopping_lists.py ====================

# api/routes/shopping_lists.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import ShoppingList as ShoppingListModel
from schemas.shopping_list import ShoppingList as ShoppingListSchema, ShoppingListCreate, ShoppingListUpdate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/shopping-lists")

@router.get("/", response_model=List[ShoppingListSchema])
def read_shopping_lists(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    shopping_lists = db.query(ShoppingListModel).offset(skip).limit(limit).all()
    return shopping_lists

@router.post("/", response_model=ShoppingListSchema, status_code=status.HTTP_201_CREATED)
def create_shopping_list(shopping_list: ShoppingListCreate, db: Session = Depends(get_db)):
    db_shopping_list = ShoppingListModel(
        UserID=shopping_list.UserID,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_shopping_list)
    db.commit()
    db.refresh(db_shopping_list)
    return db_shopping_list

@router.get("/{shopping_list_id}", response_model=ShoppingListSchema)
def read_shopping_list(shopping_list_id: int, db: Session = Depends(get_db)):
    shopping_list = db.query(ShoppingListModel).filter(ShoppingListModel.ShoppingListID == shopping_list_id).first()
    if shopping_list is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list not found")
    return shopping_list

@router.put("/{shopping_list_id}", response_model=ShoppingListSchema)
def update_shopping_list(shopping_list_id: int, shopping_list: ShoppingListUpdate, db: Session = Depends(get_db)):
    db_shopping_list = db.query(ShoppingListModel).filter(ShoppingListModel.ShoppingListID == shopping_list_id).first()
    if db_shopping_list is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list not found")
    for key, value in shopping_list.dict().items():
        setattr(db_shopping_list, key, value)
    db_shopping_list.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_shopping_list)
    return db_shopping_list

@router.delete("/{shopping_list_id}", response_model=ShoppingListSchema)
def delete_shopping_list(shopping_list_id: int, db: Session = Depends(get_db)):
    db_shopping_list = db.query(ShoppingListModel).filter(ShoppingListModel.ShoppingListID == shopping_list_id).first()
    if db_shopping_list is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list not found")
    db.delete(db_shopping_list)
    db.commit()
    return db_shopping_list


==================== C:\Code\recipe-app\server\api\routes\shopping_list_ingredients.py ====================

# api/routes/shopping_list_ingredients.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import ShoppingListIngredient as ShoppingListIngredientModel
from schemas.shopping_list_ingredient import ShoppingListIngredient as ShoppingListIngredientSchema, ShoppingListIngredientCreate, ShoppingListIngredientUpdate
from typing import List

router = APIRouter(prefix="/api/shopping-list-ingredients")

@router.get("/", response_model=List[ShoppingListIngredientSchema])
def read_shopping_list_ingredients(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    shopping_list_ingredients = db.query(ShoppingListIngredientModel).offset(skip).limit(limit).all()
    return shopping_list_ingredients

@router.post("/", response_model=ShoppingListIngredientSchema, status_code=status.HTTP_201_CREATED)
def create_shopping_list_ingredient(shopping_list_ingredient: ShoppingListIngredientCreate, db: Session = Depends(get_db)):
    db_shopping_list_ingredient = ShoppingListIngredientModel(
        ShoppingListID=shopping_list_ingredient.ShoppingListID,
        MealPlanRecipeID=shopping_list_ingredient.MealPlanRecipeID,
        IngredientID=shopping_list_ingredient.IngredientID,
        Quantity=shopping_list_ingredient.Quantity,
        UnitID=shopping_list_ingredient.UnitID,
        IsManual=shopping_list_ingredient.IsManual,
        AlreadyHave=shopping_list_ingredient.AlreadyHave,
        Purchased=shopping_list_ingredient.Purchased,
    )
    db.add(db_shopping_list_ingredient)
    db.commit()
    db.refresh(db_shopping_list_ingredient)
    return db_shopping_list_ingredient

@router.get("/{shopping_list_ingredient_id}", response_model=ShoppingListIngredientSchema)
def read_shopping_list_ingredient(shopping_list_ingredient_id: int, db: Session = Depends(get_db)):
    shopping_list_ingredient = db.query(ShoppingListIngredientModel).filter(ShoppingListIngredientModel.ShoppingListIngredientID == shopping_list_ingredient_id).first()
    if shopping_list_ingredient is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list ingredient not found")
    return shopping_list_ingredient

@router.put("/{shopping_list_ingredient_id}", response_model=ShoppingListIngredientSchema)
def update_shopping_list_ingredient(shopping_list_ingredient_id: int, shopping_list_ingredient: ShoppingListIngredientUpdate, db: Session = Depends(get_db)):
    db_shopping_list_ingredient = db.query(ShoppingListIngredientModel).filter(ShoppingListIngredientModel.ShoppingListIngredientID == shopping_list_ingredient_id).first()
    if db_shopping_list_ingredient is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list ingredient not found")
    for key, value in shopping_list_ingredient.dict().items():
        setattr(db_shopping_list_ingredient, key, value)
    db.commit()
    db.refresh(db_shopping_list_ingredient)
    return db_shopping_list_ingredient

@router.delete("/{shopping_list_ingredient_id}", response_model=ShoppingListIngredientSchema)
def delete_shopping_list_ingredient(shopping_list_ingredient_id: int, db: Session = Depends(get_db)):
    db_shopping_list_ingredient = db.query(ShoppingListIngredientModel).filter(ShoppingListIngredientModel.ShoppingListIngredientID == shopping_list_ingredient_id).first()
    if db_shopping_list_ingredient is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list ingredient not found")
    db.delete(db_shopping_list_ingredient)
    db.commit()
    return db_shopping_list_ingredient


==================== C:\Code\recipe-app\server\api\routes\units.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from database import get_db
from models import Unit as UnitModel
from schemas.unit import Unit as UnitSchema, UnitCreate, UnitUpdate

router = APIRouter(prefix="/api/units")

@router.get("/", response_model=List[UnitSchema])
def read_units(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    units = db.query(UnitModel).offset(skip).limit(limit).all()
    return units

@router.post("/", response_model=UnitSchema, status_code=status.HTTP_201_CREATED)
def create_unit(unit: UnitCreate, db: Session = Depends(get_db)):
    db_unit = UnitModel(
        UnitName=unit.UnitName,
        Abbreviation=unit.Abbreviation,
    )
    db.add(db_unit)
    db.commit()
    db.refresh(db_unit)
    return db_unit

@router.put("/{unit_id}", response_model=UnitSchema)
def update_unit(unit_id: int, unit: UnitUpdate, db: Session = Depends(get_db)):
    db_unit = db.query(UnitModel).filter(UnitModel.UnitID == unit_id).first()
    if db_unit is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Unit not found")
    for key, value in unit.dict().items():
        setattr(db_unit, key, value)
    db.commit()
    db.refresh(db_unit)
    return db_unit

@router.delete("/{unit_id}", response_model=UnitSchema)
def delete_unit(unit_id: int, db: Session = Depends(get_db)):
    db_unit = db.query(UnitModel).filter(UnitModel.UnitID == unit_id).first()
    if db_unit is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Unit not found")
    db.delete(db_unit)
    db.commit()
    return db_unit


==================== C:\Code\recipe-app\server\api\routes\users.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from database import get_db
from models import User as UserModel
from schemas.user import UserRead, UserCreate, UserLogin
from typing import List
from datetime import datetime
import bcrypt

router = APIRouter(prefix="/api/users")

@router.get("/", response_model=List[UserRead])
def read_users(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    users = db.query(UserModel).offset(skip).limit(limit).all()
    return users

@router.post("/", response_model=UserRead, status_code=status.HTTP_201_CREATED)
def create_user(user: UserCreate, db: Session = Depends(get_db)):
    hashed_password = bcrypt.hashpw(user.Password.encode('utf-8'), bcrypt.gensalt())
    db_user = UserModel(
        Username=user.Username,
        PasswordHash=hashed_password.decode('utf-8'),
        Email=user.Email,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    try:
        db.add(db_user)
        db.commit()
        db.refresh(db_user)
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Username or Email already exists.")
    return db_user

@router.post("/login")
def login_user(user: UserLogin, db: Session = Depends(get_db)):
    db_user = db.query(UserModel).filter(UserModel.Username == user.Username).first()
    if not db_user or not bcrypt.checkpw(user.Password.encode('utf-8'), db_user.PasswordHash.encode('utf-8')):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid username or password")
    return {"message": "Login successful"}

@router.get("/{user_id}", response_model=UserRead)
def read_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(UserModel).filter(UserModel.UserID == user_id).first()
    if user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    return user

@router.put("/{user_id}", response_model=UserRead)
def update_user(user_id: int, user: UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(UserModel).filter(UserModel.UserID == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    for key, value in user.dict().items():
        if key == "Password":
            value = bcrypt.hashpw(value.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        setattr(db_user, key, value)
    db_user.UpdatedAt = datetime.utcnow()
    try:
        db.commit()
        db.refresh(db_user)
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Username or Email already exists.")
    return db_user

@router.delete("/{user_id}", response_model=UserRead)
def delete_user(user_id: int, db: Session = Depends(get_db)):
    db_user = db.query(UserModel).filter(UserModel.UserID == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    db.delete(db_user)
    db.commit()
    return db_user


==================== C:\Code\recipe-app\server\api\routes\__init__.py ====================

from .ingredients import router as ingredients_router
from .recipes import router as recipes_router
from .users import router as users_router
from .ingredient_categories import router as ingredient_categories_router
from .ingredient_sub_categories import router as ingredient_sub_categories_router
from .recipe_authors import router as recipe_authors_router
from .recipe_books import router as recipe_books_router
from .recipe_ingredients import router as recipe_ingredients_router
from .units import router as units_router
from .meal_plans import router as meal_plans_router
from .meal_plan_recipes import router as meal_plan_recipes_router
from .shopping_lists import router as shopping_lists_router
from .shopping_list_ingredients import router as shopping_list_ingredients_router

__all__ = [
    "ingredients_router",
    "recipes_router",
    "users_router",
    "ingredient_categories_router",
    "ingredient_sub_categories_router",
    "recipe_authors_router",
    "recipe_books_router",
    "recipe_ingredients_router",
    "units_router",
    "meal_plans_router",
    "meal_plan_recipes_router",
    "shopping_lists_router",
    "shopping_list_ingredients_router",
]


==================== C:\Code\recipe-app\server\models\base.py ====================

from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


==================== C:\Code\recipe-app\server\models\ingredient.py ====================

from sqlalchemy import Column, Integer, String, Float, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class Ingredient(Base):
    __tablename__ = "Ingredients"

    IngredientID = Column(Integer, primary_key=True)
    SubCategoryID = Column(Integer, ForeignKey("IngredientSubCategories.SubCategoryID"), nullable=False)
    IngredientName = Column(String, nullable=False)
    PurchaseUnitID = Column(Integer, ForeignKey("Units.UnitID"))
    PurchaseWeightVolume = Column(Float)
    PurchaseWeightUnitID = Column(Integer, ForeignKey("Units.UnitID"))
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    subcategory = relationship("IngredientSubCategory", back_populates="ingredients")
    recipes = relationship("RecipeIngredient", back_populates="ingredient")
    shopping_list_ingredients = relationship("ShoppingListIngredient", back_populates="ingredient")


==================== C:\Code\recipe-app\server\models\ingredient_category.py ====================

from sqlalchemy import Column, Integer, String, TIMESTAMP
from sqlalchemy.orm import relationship
from .base import Base
from datetime import datetime

class IngredientCategory(Base):
    __tablename__ = "IngredientCategories"

    CategoryID = Column(Integer, primary_key=True, index=True, autoincrement=True)
    CategoryName = Column(String, nullable=False, unique=True)
    CreatedAt = Column(TIMESTAMP, default=datetime.utcnow)
    UpdatedAt = Column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    subcategories = relationship("IngredientSubCategory", order_by="IngredientSubCategory.SubCategoryID", back_populates="category")


==================== C:\Code\recipe-app\server\models\ingredient_sub_category.py ====================

from sqlalchemy import Column, Integer, String, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class IngredientSubCategory(Base):
    __tablename__ = "IngredientSubCategories"

    SubCategoryID = Column(Integer, primary_key=True)
    CategoryID = Column(Integer, ForeignKey("IngredientCategories.CategoryID"), nullable=False)
    SubCategoryName = Column(String, nullable=False)
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    category = relationship("IngredientCategory", back_populates="subcategories")
    ingredients = relationship("Ingredient", order_by="Ingredient.IngredientID", back_populates="subcategory")


==================== C:\Code\recipe-app\server\models\meal_plan.py ====================

from sqlalchemy import Column, Integer, String, Date, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class MealPlan(Base):
    __tablename__ = "MealPlans"

    MealPlanID = Column(Integer, primary_key=True)
    UserID = Column(Integer, ForeignKey("Users.UserID"), nullable=False)
    PlanName = Column(String)
    StartDate = Column(Date)
    EndDate = Column(Date)
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    user = relationship("User", back_populates="meal_plans")
    recipes = relationship("MealPlanRecipe", back_populates="meal_plan")


==================== C:\Code\recipe-app\server\models\meal_plan_recipe.py ====================

from sqlalchemy import Column, Integer, String, Date, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class MealPlanRecipe(Base):
    __tablename__ = "MealPlanRecipes"

    MealPlanRecipeID = Column(Integer, primary_key=True)
    MealPlanID = Column(Integer, ForeignKey("MealPlans.MealPlanID"), nullable=False)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    MealType = Column(String)
    Date = Column(Date, nullable=False)

    meal_plan = relationship("MealPlan", back_populates="recipes")
    recipe = relationship("Recipe", back_populates="meal_plan_recipes")
    shopping_list_ingredients = relationship("ShoppingListIngredient", back_populates="meal_plan_recipe")


==================== C:\Code\recipe-app\server\models\recipe.py ====================

from sqlalchemy import Column, Integer, String, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class Recipe(Base):
    __tablename__ = "Recipes"

    RecipeID = Column(Integer, primary_key=True)
    UserID = Column(Integer, ForeignKey("Users.UserID"))
    RecipeName = Column(String, nullable=False)
    AuthorID = Column(Integer, ForeignKey("RecipeAuthors.AuthorID"))
    BookID = Column(Integer, ForeignKey("RecipeBooks.BookID"))
    PageNumber = Column(Integer)
    OnlineURL = Column(String)
    CookTime = Column(Integer)
    Difficulty = Column(String)
    Type = Column(String)
    ImageURL = Column(String)
    Servings = Column(Integer)
    Cuisine = Column(String)
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    user = relationship("User", back_populates="recipes")
    author = relationship("RecipeAuthor", back_populates="recipes")
    book = relationship("RecipeBook", back_populates="recipes")
    ingredients = relationship("RecipeIngredient", back_populates="recipe")
    sections = relationship("RecipeIngredientSection", back_populates="recipe")
    reviews = relationship("RecipeReview", back_populates="recipe")
    steps = relationship("RecipeStep", back_populates="recipe")
    tags = relationship("RecipeTag", back_populates="recipe")
    meal_plan_recipes = relationship("MealPlanRecipe", back_populates="recipe")


==================== C:\Code\recipe-app\server\models\recipe_author.py ====================

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from .base import Base

class RecipeAuthor(Base):
    __tablename__ = "RecipeAuthors"

    AuthorID = Column(Integer, primary_key=True)
    AuthorName = Column(String, nullable=False)
    AuthorImageURL = Column(String)

    books = relationship("RecipeBook", back_populates="author")
    recipes = relationship("Recipe", back_populates="author")


==================== C:\Code\recipe-app\server\models\recipe_book.py ====================

# models/recipe_book.py
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeBook(Base):
    __tablename__ = "RecipeBooks"

    BookID = Column(Integer, primary_key=True)
    AuthorID = Column(Integer, ForeignKey("RecipeAuthors.AuthorID"), nullable=False)
    BookName = Column(String, nullable=False)
    CoverArtURL = Column(String)

    author = relationship("RecipeAuthor", back_populates="books")
    recipes = relationship("Recipe", back_populates="book")


==================== C:\Code\recipe-app\server\models\recipe_ingredient.py ====================

from sqlalchemy import Column, Integer, Float, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeIngredient(Base):
    __tablename__ = "RecipeIngredients"

    RecipeIngredientID = Column(Integer, primary_key=True)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    IngredientID = Column(Integer, ForeignKey("Ingredients.IngredientID"), nullable=False)
    SectionID = Column(Integer, ForeignKey("RecipeIngredientSections.SectionID"))
    Quantity = Column(Float)
    UnitID = Column(Integer, ForeignKey("Units.UnitID"))

    recipe = relationship("Recipe", back_populates="ingredients")
    ingredient = relationship("Ingredient", back_populates="recipes")
    section = relationship("RecipeIngredientSection", back_populates="ingredients")
    unit = relationship("Unit", back_populates="recipe_ingredients")


==================== C:\Code\recipe-app\server\models\recipe_ingredient_section.py ====================

from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeIngredientSection(Base):
    __tablename__ = "RecipeIngredientSections"

    SectionID = Column(Integer, primary_key=True)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    SectionName = Column(String, nullable=False)

    recipe = relationship("Recipe", back_populates="sections")
    ingredients = relationship("RecipeIngredient", back_populates="section")


==================== C:\Code\recipe-app\server\models\recipe_review.py ====================

from sqlalchemy import Column, Integer, Float, String, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeReview(Base):
    __tablename__ = "RecipeReviews"

    ReviewID = Column(Integer, primary_key=True)
    UserID = Column(Integer, ForeignKey("Users.UserID"), nullable=False)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    Rating = Column(Float, nullable=False)
    ReviewText = Column(String)
    CreatedAt = Column(TIMESTAMP)

    user = relationship("User", back_populates="reviews")
    recipe = relationship("Recipe", back_populates="reviews")


==================== C:\Code\recipe-app\server\models\recipe_step.py ====================

from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeStep(Base):
    __tablename__ = "RecipeSteps"

    StepID = Column(Integer, primary_key=True)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    StepNumber = Column(Integer, nullable=False)
    Description = Column(String, nullable=False)

    recipe = relationship("Recipe", back_populates="steps")


==================== C:\Code\recipe-app\server\models\recipe_tag.py ====================

from sqlalchemy import Column, Integer, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeTag(Base):
    __tablename__ = "RecipeTags"

    RecipeTagID = Column(Integer, primary_key=True)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    TagID = Column(Integer, ForeignKey("Tags.TagID"), nullable=False)

    recipe = relationship("Recipe", back_populates="tags")
    tag = relationship("Tag", back_populates="recipes")


==================== C:\Code\recipe-app\server\models\shopping_list.py ====================

from sqlalchemy import Column, Integer, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class ShoppingList(Base):
    __tablename__ = "ShoppingLists"

    ShoppingListID = Column(Integer, primary_key=True)
    UserID = Column(Integer, ForeignKey("Users.UserID"), nullable=False)
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    user = relationship("User", back_populates="shopping_lists")
    ingredients = relationship("ShoppingListIngredient", back_populates="shopping_list")


==================== C:\Code\recipe-app\server\models\shopping_list_ingredient.py ====================

from sqlalchemy import Column, Integer, Float, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class ShoppingListIngredient(Base):
    __tablename__ = "ShoppingListIngredients"

    ShoppingListIngredientID = Column(Integer, primary_key=True)
    ShoppingListID = Column(Integer, ForeignKey("ShoppingLists.ShoppingListID"), nullable=False)
    MealPlanRecipeID = Column(Integer, ForeignKey("MealPlanRecipes.MealPlanRecipeID"))
    IngredientID = Column(Integer, ForeignKey("Ingredients.IngredientID"), nullable=False)
    Quantity = Column(Float)
    UnitID = Column(Integer, ForeignKey("Units.UnitID"))
    IsManual = Column(Boolean)
    AlreadyHave = Column(Boolean)
    Purchased = Column(Boolean)

    shopping_list = relationship("ShoppingList", back_populates="ingredients")
    meal_plan_recipe = relationship("MealPlanRecipe", back_populates="shopping_list_ingredients")
    ingredient = relationship("Ingredient", back_populates="shopping_list_ingredients")
    unit = relationship("Unit", back_populates="shopping_list_ingredients")


==================== C:\Code\recipe-app\server\models\tag.py ====================

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from .base import Base

class Tag(Base):
    __tablename__ = "Tags"

    TagID = Column(Integer, primary_key=True)
    TagName = Column(String, nullable=False, unique=True)

    recipes = relationship("RecipeTag", back_populates="tag")


==================== C:\Code\recipe-app\server\models\unit.py ====================

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from .base import Base

class Unit(Base):
    __tablename__ = "Units"

    UnitID = Column(Integer, primary_key=True)
    UnitName = Column(String, nullable=False, unique=True)
    Abbreviation = Column(String, nullable=False, unique=True)
    
    recipe_ingredients = relationship("RecipeIngredient", back_populates="unit")
    shopping_list_ingredients = relationship("ShoppingListIngredient", back_populates="unit")
    unit_conversions_from = relationship("UnitConversion", foreign_keys="[UnitConversion.FromUnitID]", back_populates="from_unit")
    unit_conversions_to = relationship("UnitConversion", foreign_keys="[UnitConversion.ToUnitID]", back_populates="to_unit")


==================== C:\Code\recipe-app\server\models\unit_conversion.py ====================

from sqlalchemy import Column, Integer, Float, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class UnitConversion(Base):
    __tablename__ = "UnitConversions"

    FromUnitID = Column(Integer, ForeignKey("Units.UnitID"), primary_key=True)
    ToUnitID = Column(Integer, ForeignKey("Units.UnitID"), primary_key=True)
    ConversionFactor = Column(Float, nullable=False)

    from_unit = relationship("Unit", foreign_keys=[FromUnitID], back_populates="unit_conversions_from")
    to_unit = relationship("Unit", foreign_keys=[ToUnitID], back_populates="unit_conversions_to")


==================== C:\Code\recipe-app\server\models\user.py ====================

from sqlalchemy import Column, Integer, String, DateTime
from datetime import datetime
from sqlalchemy.orm import relationship
from .base import Base

class User(Base):
    __tablename__ = 'Users'
    UserID = Column(Integer, primary_key=True, index=True, autoincrement=True)
    Username = Column(String, unique=True, index=True, nullable=False)
    PasswordHash = Column(String, nullable=False)
    Email = Column(String, unique=True, index=True, nullable=False)
    CreatedAt = Column(DateTime, default=datetime.utcnow)
    UpdatedAt = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    recipes = relationship("Recipe", back_populates="user")
    meal_plans = relationship("MealPlan", back_populates="user")
    reviews = relationship("RecipeReview", back_populates="user")
    shopping_lists = relationship("ShoppingList", back_populates="user")


==================== C:\Code\recipe-app\server\models\__init__.py ====================

from .base import Base
from .user import User
from .recipe_author import RecipeAuthor
from .recipe_book import RecipeBook
from .recipe import Recipe
from .ingredient_category import IngredientCategory
from .ingredient_sub_category import IngredientSubCategory
from .ingredient import Ingredient
from .unit import Unit
from .meal_plan import MealPlan
from .meal_plan_recipe import MealPlanRecipe
from .recipe_ingredient import RecipeIngredient
from .recipe_ingredient_section import RecipeIngredientSection
from .recipe_review import RecipeReview
from .recipe_step import RecipeStep
from .recipe_tag import RecipeTag
from .shopping_list import ShoppingList
from .shopping_list_ingredient import ShoppingListIngredient
from .tag import Tag
from .unit_conversion import UnitConversion


==================== C:\Code\recipe-app\server\schemas\ingredient.py ====================

from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class IngredientBase(BaseModel):
    IngredientName: str
    PurchaseWeightVolume: float
    PurchaseUnitID: Optional[int]
    SubCategoryID: int
    PurchaseWeightUnitID: Optional[int]

class IngredientCreate(IngredientBase):
    pass

class IngredientUpdate(IngredientBase):
    pass

class Ingredient(IngredientBase):
    IngredientID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\ingredient_category.py ====================

from pydantic import BaseModel
from datetime import datetime
from typing import List, Optional

class IngredientCategoryBase(BaseModel):
    CategoryName: str

class IngredientCategoryCreate(IngredientCategoryBase):
    pass

class IngredientCategoryUpdate(IngredientCategoryBase):
    pass

class IngredientCategory(IngredientCategoryBase):
    CategoryID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\ingredient_sub_category.py ====================

# schemas/ingredient_sub_category.py

from pydantic import BaseModel
from datetime import datetime

class IngredientSubCategoryBase(BaseModel):
    SubCategoryName: str
    CategoryID: int

class IngredientSubCategoryCreate(IngredientSubCategoryBase):
    pass

class IngredientSubCategoryUpdate(IngredientSubCategoryBase):
    pass

class IngredientSubCategory(IngredientSubCategoryBase):
    SubCategoryID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode: True


==================== C:\Code\recipe-app\server\schemas\meal_plan.py ====================

# schemas/meal_plan.py
from pydantic import BaseModel
from datetime import datetime, date
from typing import List, Optional

class MealPlanBase(BaseModel):
    UserID: int
    PlanName: Optional[str] = None
    StartDate: Optional[date] = None
    EndDate: Optional[date] = None

class MealPlanCreate(MealPlanBase):
    pass

class MealPlanUpdate(MealPlanBase):
    pass

class MealPlan(MealPlanBase):
    MealPlanID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\meal_plan_recipe.py ====================

# schemas/meal_plan_recipe.py
from pydantic import BaseModel
from datetime import date

class MealPlanRecipeBase(BaseModel):
    MealPlanID: int
    RecipeID: int
    MealType: str
    Date: date

class MealPlanRecipeCreate(MealPlanRecipeBase):
    pass

class MealPlanRecipeUpdate(MealPlanRecipeBase):
    pass

class MealPlanRecipe(MealPlanRecipeBase):
    MealPlanRecipeID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\recipe.py ====================

from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class RecipeBase(BaseModel):
    RecipeName: str
    AuthorID: Optional[int] = None
    BookID: Optional[int] = None
    PageNumber: Optional[int] = None
    OnlineURL: Optional[str] = None
    CookTime: Optional[int] = None
    Difficulty: Optional[str] = None
    Type: Optional[str] = None
    ImageURL: Optional[str] = None
    Servings: Optional[int] = None
    Cuisine: Optional[str] = None

class RecipeCreate(RecipeBase):
    pass

class Recipe(RecipeBase):
    RecipeID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\recipe_author.py ====================

from pydantic import BaseModel
from typing import Optional

class RecipeAuthorBase(BaseModel):
    AuthorName: str
    AuthorImageURL: Optional[str] = None

class RecipeAuthorCreate(RecipeAuthorBase):
    pass

class RecipeAuthorUpdate(RecipeAuthorBase):
    pass

class RecipeAuthor(RecipeAuthorBase):
    AuthorID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\recipe_book.py ====================

# schemas/recipe_book.py
from pydantic import BaseModel
from typing import Optional

class RecipeBookBase(BaseModel):
    AuthorID: int
    BookName: str
    CoverArtURL: Optional[str] = None

class RecipeBookCreate(RecipeBookBase):
    pass

class RecipeBookUpdate(RecipeBookBase):
    pass

class RecipeBook(RecipeBookBase):
    BookID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\recipe_ingredient.py ====================

# schemas/recipe_ingredient.py
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class RecipeIngredientBase(BaseModel):
    RecipeID: int
    IngredientID: int
    SectionID: Optional[int] = None
    Quantity: Optional[float] = None
    UnitID: Optional[int] = None

class RecipeIngredientCreate(RecipeIngredientBase):
    pass

class RecipeIngredientUpdate(RecipeIngredientBase):
    pass

class RecipeIngredient(RecipeIngredientBase):
    RecipeIngredientID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\shopping_list.py ====================

# schemas/shopping_list.py
from pydantic import BaseModel
from datetime import datetime
from typing import List, Optional

class ShoppingListBase(BaseModel):
    UserID: int

class ShoppingListCreate(ShoppingListBase):
    pass

class ShoppingListUpdate(ShoppingListBase):
    pass

class ShoppingList(ShoppingListBase):
    ShoppingListID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\shopping_list_ingredient.py ====================

# schemas/shopping_list_ingredient.py
from pydantic import BaseModel
from typing import Optional

class ShoppingListIngredientBase(BaseModel):
    ShoppingListID: int
    MealPlanRecipeID: Optional[int]
    IngredientID: int
    Quantity: Optional[float]
    UnitID: Optional[int]
    IsManual: Optional[bool]
    AlreadyHave: Optional[bool]
    Purchased: Optional[bool]

class ShoppingListIngredientCreate(ShoppingListIngredientBase):
    pass

class ShoppingListIngredientUpdate(ShoppingListIngredientBase):
    pass

class ShoppingListIngredient(ShoppingListIngredientBase):
    ShoppingListIngredientID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\unit.py ====================

from pydantic import BaseModel
from datetime import datetime

class UnitBase(BaseModel):
    UnitName: str
    Abbreviation: str

class UnitCreate(UnitBase):
    pass

class UnitUpdate(UnitBase):
    pass

class Unit(UnitBase):
    UnitID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\user.py ====================

from pydantic import BaseModel, EmailStr
from datetime import datetime
from typing import Optional

class UserBase(BaseModel):
    Username: str
    Email: EmailStr

class UserCreate(UserBase):
    Password: str

class UserRead(UserBase):
    UserID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True

class UserLogin(BaseModel):
    Username: str
    Password: str


==================== C:\Code\recipe-app\server.txt ====================



==================== C:\Code\recipe-app\backend\mydatabase2.db ====================



==================== C:\Code\recipe-app\backend\run.py ====================

from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)


==================== C:\Code\recipe-app\backend\app\base.py ====================

from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class TimestampMixin(object):
    CreatedAt = db.Column(db.DateTime, default=datetime.utcnow)
    UpdatedAt = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


==================== C:\Code\recipe-app\backend\app\extensions.py ====================

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


==================== C:\Code\recipe-app\backend\app\generic_crud.py ====================

from flask import Blueprint
from .utils import get_all, get_by_id, create_record, update_record, delete_record
from . import db

def create_crud_blueprint(model, url_prefix):
    bp = Blueprint(model.__tablename__, __name__, url_prefix=url_prefix)

    @bp.route('/', methods=['GET'])
    def get_records():
        return get_all(model)

    @bp.route('/<int:id>', methods=['GET'])
    def get_record(id):
        return get_by_id(model, id)

    @bp.route('/', methods=['POST'])
    def create():
        return create_record(model)

    @bp.route('/<int:id>', methods=['PUT'])
    def update(id):
        return update_record(model, id)

    @bp.route('/<int:id>', methods=['DELETE'])
    def delete(id):
        return delete_record(model, id)

    return bp


==================== C:\Code\recipe-app\backend\app\models.py ====================

from werkzeug.security import generate_password_hash, check_password_hash
from .extensions import db
from .base import TimestampMixin

class IngredientCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientCategories'
    CategoryID = db.Column(db.Integer, primary_key=True)
    CategoryName = db.Column(db.String, unique=True, nullable=False)

    def to_dict(self):
        return {
            'CategoryID': self.CategoryID,
            'CategoryName': self.CategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Ingredient(db.Model, TimestampMixin):
    __tablename__ = 'Ingredients'
    IngredientID = db.Column(db.Integer, primary_key=True)
    SubCategoryID = db.Column(db.Integer, db.ForeignKey('IngredientSubCategories.SubCategoryID'), nullable=False)
    IngredientName = db.Column(db.String, nullable=False)
    PurchaseUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))
    PurchaseWeightVolume = db.Column(db.Float)
    PurchaseWeightUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))

    def to_dict(self):
        return {
            'IngredientID': self.IngredientID,
            'SubCategoryID': self.SubCategoryID,
            'IngredientName': self.IngredientName,
            'PurchaseUnitID': self.PurchaseUnitID,
            'PurchaseWeightVolume': self.PurchaseWeightVolume,
            'PurchaseWeightUnitID': self.PurchaseWeightUnitID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class IngredientSubCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientSubCategories'
    SubCategoryID = db.Column(db.Integer, primary_key=True)
    CategoryID = db.Column(db.Integer, db.ForeignKey('IngredientCategories.CategoryID'), nullable=False)
    SubCategoryName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SubCategoryID': self.SubCategoryID,
            'CategoryID': self.CategoryID,
            'SubCategoryName': self.SubCategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class MealPlanRecipe(db.Model):
    __tablename__ = 'MealPlanRecipes'
    MealPlanRecipeID = db.Column(db.Integer, primary_key=True)
    MealPlanID = db.Column(db.Integer, db.ForeignKey('MealPlans.MealPlanID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    MealType = db.Column(db.String)
    Date = db.Column(db.Date, nullable=False)

    def to_dict(self):
        return {
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'MealPlanID': self.MealPlanID,
            'RecipeID': self.RecipeID,
            'MealType': self.MealType,
            'Date': self.Date
        }

class MealPlan(db.Model, TimestampMixin):
    __tablename__ = 'MealPlans'
    MealPlanID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    PlanName = db.Column(db.String)
    StartDate = db.Column(db.Date)
    EndDate = db.Column(db.Date)

    def to_dict(self):
        return {
            'MealPlanID': self.MealPlanID,
            'UserID': self.UserID,
            'PlanName': self.PlanName,
            'StartDate': self.StartDate,
            'EndDate': self.EndDate,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeAuthor(db.Model):
    __tablename__ = 'RecipeAuthors'
    AuthorID = db.Column(db.Integer, primary_key=True)
    AuthorName = db.Column(db.String, nullable=False)
    AuthorImageURL = db.Column(db.String)

    def to_dict(self):
        return {
            'AuthorID': self.AuthorID,
            'AuthorName': self.AuthorName,
            'AuthorImageURL': self.AuthorImageURL
        }

class RecipeBook(db.Model):
    __tablename__ = 'RecipeBooks'
    BookID = db.Column(db.Integer, primary_key=True)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='CASCADE'), nullable=False)
    BookName = db.Column(db.String, nullable=False)
    CoverArtURL = db.Column(db.String)

    def to_dict(self):
        return {
            'BookID': self.BookID,
            'AuthorID': self.AuthorID,
            'BookName': self.BookName,
            'CoverArtURL': self.CoverArtURL
        }

class RecipeIngredient(db.Model):
    __tablename__ = 'RecipeIngredients'
    RecipeIngredientID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    SectionID = db.Column(db.Integer, db.ForeignKey('RecipeIngredientSections.SectionID', ondelete='CASCADE'))
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))

    def to_dict(self):
        return {
            'RecipeIngredientID': self.RecipeIngredientID,
            'RecipeID': self.RecipeID,
            'IngredientID': self.IngredientID,
            'SectionID': self.SectionID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID
        }

class RecipeIngredientSection(db.Model):
    __tablename__ = 'RecipeIngredientSections'
    SectionID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    SectionName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SectionID': self.SectionID,
            'RecipeID': self.RecipeID,
            'SectionName': self.SectionName
        }

class RecipeReview(db.Model):
    __tablename__ = 'RecipeReviews'
    ReviewID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    Rating = db.Column(db.Float, nullable=False)
    ReviewText = db.Column(db.String)

    def to_dict(self):
        return {
            'ReviewID': self.ReviewID,
            'UserID': self.UserID,
            'RecipeID': self.RecipeID,
            'Rating': self.Rating,
            'ReviewText': self.ReviewText
        }

class Recipe(db.Model, TimestampMixin):
    __tablename__ = 'Recipes'
    RecipeID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='SET NULL'))
    RecipeName = db.Column(db.String, nullable=False)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='SET NULL'))
    BookID = db.Column(db.Integer, db.ForeignKey('RecipeBooks.BookID', ondelete='SET NULL'))
    PageNumber = db.Column(db.Integer)
    OnlineURL = db.Column(db.String)
    CookTime = db.Column(db.Integer)
    Difficulty = db.Column(db.String)
    Type = db.Column(db.String)
    ImageURL = db.Column(db.String)
    Servings = db.Column(db.Integer)
    Cuisine = db.Column(db.String)

    def to_dict(self):
        return {
            'RecipeID': self.RecipeID,
            'UserID': self.UserID,
            'RecipeName': self.RecipeName,
            'AuthorID': self.AuthorID,
            'BookID': self.BookID,
            'PageNumber': self.PageNumber,
            'OnlineURL': self.OnlineURL,
            'CookTime': self.CookTime,
            'Difficulty': self.Difficulty,
            'Type': self.Type,
            'ImageURL': self.ImageURL,
            'Servings': self.Servings,
            'Cuisine': self.Cuisine,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeStep(db.Model):
    __tablename__ = 'RecipeSteps'
    StepID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    StepNumber = db.Column(db.Integer, nullable=False)
    Description = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'StepID': self.StepID,
            'RecipeID': self.RecipeID,
            'StepNumber': self.StepNumber,
            'Description': self.Description
        }

class RecipeTag(db.Model):
    __tablename__ = 'RecipeTags'
    RecipeTagID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    TagID = db.Column(db.Integer, db.ForeignKey('Tags.TagID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'RecipeTagID': self.RecipeTagID,
            'RecipeID': self.RecipeID,
            'TagID': self.TagID
        }

class ShoppingListIngredient(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingListIngredients'
    ShoppingListIngredientID = db.Column(db.Integer, primary_key=True)
    ShoppingListID = db.Column(db.Integer, db.ForeignKey('ShoppingLists.ShoppingListID', ondelete='CASCADE'), nullable=False)
    MealPlanRecipeID = db.Column(db.Integer, db.ForeignKey('MealPlanRecipes.MealPlanRecipeID', ondelete='CASCADE'))
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))
    IsManual = db.Column(db.Boolean)
    AlreadyHave = db.Column(db.Boolean)
    Purchased = db.Column(db.Boolean)

    def to_dict(self):
        return {
            'ShoppingListIngredientID': self.ShoppingListIngredientID,
            'ShoppingListID': self.ShoppingListID,
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'IngredientID': self.IngredientID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID,
            'IsManual': self.IsManual,
            'AlreadyHave': self.AlreadyHave,
            'Purchased': self.Purchased,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class ShoppingList(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingLists'
    ShoppingListID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'ShoppingListID': self.ShoppingListID,
            'UserID': self.UserID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Tag(db.Model):
    __tablename__ = 'Tags'
    TagID = db.Column(db.Integer, primary_key=True)
    TagName = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'TagID': self.TagID,
            'TagName': self.TagName
        }

class UnitConversion(db.Model):
    __tablename__ = 'UnitConversions'
    FromUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ToUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ConversionFactor = db.Column(db.Float, nullable=False)

    def to_dict(self):
        return {
            'FromUnitID': self.FromUnitID,
            'ToUnitID': self.ToUnitID,
            'ConversionFactor': self.ConversionFactor
        }

class Unit(db.Model):
    __tablename__ = 'Units'
    UnitID = db.Column(db.Integer, primary_key=True)
    UnitName = db.Column(db.String, nullable=False, unique=True)
    Abbreviation = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'UnitID': self.UnitID,
            'UnitName': self.UnitName,
            'Abbreviation': self.Abbreviation
        }

class User(db.Model, TimestampMixin):
    __tablename__ = 'Users'
    UserID = db.Column(db.Integer, primary_key=True)
    Username = db.Column(db.String, nullable=False, unique=True)
    PasswordHash = db.Column(db.String, nullable=False)
    Email = db.Column(db.String, nullable=False, unique=True)

    def set_password(self, password):
        self.PasswordHash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.PasswordHash, password)

    def to_dict(self):
        return {
            'UserID': self.UserID,
            'Username': self.Username,
            'Email': self.Email,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }


==================== C:\Code\recipe-app\backend\app\utils.py ====================

from flask import request, jsonify
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from .extensions import db
from .models import User
from datetime import datetime

def get_all(model):
    try:
        records = model.query.all()
        return jsonify([record.to_dict() for record in records]), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def get_by_id(model, id):
    try:
        record = model.query.get_or_404(id)
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def create_record(model):
    try:
        data = request.get_json()
        if issubclass(model, TimestampMixin):
            if 'CreatedAt' not in data:
                data['CreatedAt'] = datetime.utcnow()
            if 'UpdatedAt' not in data:
                data['UpdatedAt'] = datetime.utcnow()

        if model == User:
            password = data.pop('Password')
            user = model(**data)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            return jsonify(user.to_dict()), 201
        else:
            record = model(**data)
            db.session.add(record)
            db.session.commit()
            return jsonify(record.to_dict()), 201
    except IntegrityError as e:
        db.session.rollback()
        return jsonify({'error': 'A record with that unique value already exists.'}), 400
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def update_record(model, id):
    try:
        data = request.get_json()
        record = model.query.get_or_404(id)
        for key, value in data.items():
            setattr(record, key, value)
        if issubclass(model, TimestampMixin):
            record.UpdatedAt = datetime.utcnow()
        db.session.commit()
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def delete_record(model, id):
    try:
        record = model.query.get_or_404(id)
        db.session.delete(record)
        db.session.commit()
        return '', 204
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500


==================== C:\Code\recipe-app\backend\app\__init__.py ====================

from flask import Flask
from .extensions import db
from .models import IngredientCategory, Ingredient, IngredientSubCategory, MealPlanRecipe, MealPlan, RecipeAuthor, RecipeBook, RecipeIngredient, RecipeIngredientSection, RecipeReview, Recipe, RecipeStep, RecipeTag, ShoppingListIngredient, ShoppingList, Tag, UnitConversion, Unit, User
from .generic_crud import create_crud_blueprint
from sqlalchemy import inspect

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../../mydatabase2.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    db.init_app(app)
    
    with app.app_context():
        # Print all tables in the database
        inspector = inspect(db.engine)
        print(inspector.get_table_names())

    # Register blueprints
    app.register_blueprint(create_crud_blueprint(IngredientCategory, '/ingredient_categories'))
    app.register_blueprint(create_crud_blueprint(Ingredient, '/ingredients'))
    app.register_blueprint(create_crud_blueprint(IngredientSubCategory, '/ingredient_subcategories'))
    app.register_blueprint(create_crud_blueprint(MealPlanRecipe, '/meal_plan_recipes'))
    app.register_blueprint(create_crud_blueprint(MealPlan, '/meal_plans'))
    app.register_blueprint(create_crud_blueprint(RecipeAuthor, '/recipe_authors'))
    app.register_blueprint(create_crud_blueprint(RecipeBook, '/recipe_books'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredient, '/recipe_ingredients'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredientSection, '/recipe_ingredient_sections'))
    app.register_blueprint(create_crud_blueprint(RecipeReview, '/recipe_reviews'))
    app.register_blueprint(create_crud_blueprint(Recipe, '/recipes'))
    app.register_blueprint(create_crud_blueprint(RecipeStep, '/recipe_steps'))
    app.register_blueprint(create_crud_blueprint(RecipeTag, '/recipe_tags'))
    app.register_blueprint(create_crud_blueprint(ShoppingListIngredient, '/shopping_list_ingredients'))
    app.register_blueprint(create_crud_blueprint(ShoppingList, '/shopping_lists'))
    app.register_blueprint(create_crud_blueprint(Tag, '/tags'))
    app.register_blueprint(create_crud_blueprint(UnitConversion, '/unit_conversions'))
    app.register_blueprint(create_crud_blueprint(Unit, '/units'))
    app.register_blueprint(create_crud_blueprint(User, '/users'))

    return app


==================== C:\Code\recipe-app\backend\instance\mydatabase2.db ====================



==================== C:\Code\recipe-app\backend\mydatabase2.db ====================



==================== C:\Code\recipe-app\backend\run.py ====================

from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=True)


==================== C:\Code\recipe-app\backend\app\base.py ====================

from datetime import datetime
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class TimestampMixin(object):
    CreatedAt = db.Column(db.DateTime, default=datetime.utcnow)
    UpdatedAt = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


==================== C:\Code\recipe-app\backend\app\extensions.py ====================

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


==================== C:\Code\recipe-app\backend\app\generic_crud.py ====================

from flask import Blueprint
from .utils import get_all, get_by_id, create_record, update_record, delete_record
from . import db

def create_crud_blueprint(model, url_prefix):
    bp = Blueprint(model.__tablename__, __name__, url_prefix=url_prefix)

    @bp.route('/', methods=['GET'])
    def get_records():
        return get_all(model)

    @bp.route('/<int:id>', methods=['GET'])
    def get_record(id):
        return get_by_id(model, id)

    @bp.route('/', methods=['POST'])
    def create():
        return create_record(model)

    @bp.route('/<int:id>', methods=['PUT'])
    def update(id):
        return update_record(model, id)

    @bp.route('/<int:id>', methods=['DELETE'])
    def delete(id):
        return delete_record(model, id)

    return bp


==================== C:\Code\recipe-app\backend\app\models.py ====================

from werkzeug.security import generate_password_hash, check_password_hash
from .extensions import db
from .base import TimestampMixin

class IngredientCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientCategories'
    CategoryID = db.Column(db.Integer, primary_key=True)
    CategoryName = db.Column(db.String, unique=True, nullable=False)

    def to_dict(self):
        return {
            'CategoryID': self.CategoryID,
            'CategoryName': self.CategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Ingredient(db.Model, TimestampMixin):
    __tablename__ = 'Ingredients'
    IngredientID = db.Column(db.Integer, primary_key=True)
    SubCategoryID = db.Column(db.Integer, db.ForeignKey('IngredientSubCategories.SubCategoryID'), nullable=False)
    IngredientName = db.Column(db.String, nullable=False)
    PurchaseUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))
    PurchaseWeightVolume = db.Column(db.Float)
    PurchaseWeightUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID'))

    def to_dict(self):
        return {
            'IngredientID': self.IngredientID,
            'SubCategoryID': self.SubCategoryID,
            'IngredientName': self.IngredientName,
            'PurchaseUnitID': self.PurchaseUnitID,
            'PurchaseWeightVolume': self.PurchaseWeightVolume,
            'PurchaseWeightUnitID': self.PurchaseWeightUnitID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class IngredientSubCategory(db.Model, TimestampMixin):
    __tablename__ = 'IngredientSubCategories'
    SubCategoryID = db.Column(db.Integer, primary_key=True)
    CategoryID = db.Column(db.Integer, db.ForeignKey('IngredientCategories.CategoryID'), nullable=False)
    SubCategoryName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SubCategoryID': self.SubCategoryID,
            'CategoryID': self.CategoryID,
            'SubCategoryName': self.SubCategoryName,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class MealPlanRecipe(db.Model):
    __tablename__ = 'MealPlanRecipes'
    MealPlanRecipeID = db.Column(db.Integer, primary_key=True)
    MealPlanID = db.Column(db.Integer, db.ForeignKey('MealPlans.MealPlanID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    MealType = db.Column(db.String)
    Date = db.Column(db.Date, nullable=False)

    def to_dict(self):
        return {
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'MealPlanID': self.MealPlanID,
            'RecipeID': self.RecipeID,
            'MealType': self.MealType,
            'Date': self.Date
        }

class MealPlan(db.Model, TimestampMixin):
    __tablename__ = 'MealPlans'
    MealPlanID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    PlanName = db.Column(db.String)
    StartDate = db.Column(db.Date)
    EndDate = db.Column(db.Date)

    def to_dict(self):
        return {
            'MealPlanID': self.MealPlanID,
            'UserID': self.UserID,
            'PlanName': self.PlanName,
            'StartDate': self.StartDate,
            'EndDate': self.EndDate,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeAuthor(db.Model):
    __tablename__ = 'RecipeAuthors'
    AuthorID = db.Column(db.Integer, primary_key=True)
    AuthorName = db.Column(db.String, nullable=False)
    AuthorImageURL = db.Column(db.String)

    def to_dict(self):
        return {
            'AuthorID': self.AuthorID,
            'AuthorName': self.AuthorName,
            'AuthorImageURL': self.AuthorImageURL
        }

class RecipeBook(db.Model):
    __tablename__ = 'RecipeBooks'
    BookID = db.Column(db.Integer, primary_key=True)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='CASCADE'), nullable=False)
    BookName = db.Column(db.String, nullable=False)
    CoverArtURL = db.Column(db.String)

    def to_dict(self):
        return {
            'BookID': self.BookID,
            'AuthorID': self.AuthorID,
            'BookName': self.BookName,
            'CoverArtURL': self.CoverArtURL
        }

class RecipeIngredient(db.Model):
    __tablename__ = 'RecipeIngredients'
    RecipeIngredientID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    SectionID = db.Column(db.Integer, db.ForeignKey('RecipeIngredientSections.SectionID', ondelete='CASCADE'))
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))

    def to_dict(self):
        return {
            'RecipeIngredientID': self.RecipeIngredientID,
            'RecipeID': self.RecipeID,
            'IngredientID': self.IngredientID,
            'SectionID': self.SectionID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID
        }

class RecipeIngredientSection(db.Model):
    __tablename__ = 'RecipeIngredientSections'
    SectionID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    SectionName = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'SectionID': self.SectionID,
            'RecipeID': self.RecipeID,
            'SectionName': self.SectionName
        }

class RecipeReview(db.Model):
    __tablename__ = 'RecipeReviews'
    ReviewID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    Rating = db.Column(db.Float, nullable=False)
    ReviewText = db.Column(db.String)

    def to_dict(self):
        return {
            'ReviewID': self.ReviewID,
            'UserID': self.UserID,
            'RecipeID': self.RecipeID,
            'Rating': self.Rating,
            'ReviewText': self.ReviewText
        }

class Recipe(db.Model, TimestampMixin):
    __tablename__ = 'Recipes'
    RecipeID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='SET NULL'))
    RecipeName = db.Column(db.String, nullable=False)
    AuthorID = db.Column(db.Integer, db.ForeignKey('RecipeAuthors.AuthorID', ondelete='SET NULL'))
    BookID = db.Column(db.Integer, db.ForeignKey('RecipeBooks.BookID', ondelete='SET NULL'))
    PageNumber = db.Column(db.Integer)
    OnlineURL = db.Column(db.String)
    CookTime = db.Column(db.Integer)
    Difficulty = db.Column(db.String)
    Type = db.Column(db.String)
    ImageURL = db.Column(db.String)
    Servings = db.Column(db.Integer)
    Cuisine = db.Column(db.String)

    def to_dict(self):
        return {
            'RecipeID': self.RecipeID,
            'UserID': self.UserID,
            'RecipeName': self.RecipeName,
            'AuthorID': self.AuthorID,
            'BookID': self.BookID,
            'PageNumber': self.PageNumber,
            'OnlineURL': self.OnlineURL,
            'CookTime': self.CookTime,
            'Difficulty': self.Difficulty,
            'Type': self.Type,
            'ImageURL': self.ImageURL,
            'Servings': self.Servings,
            'Cuisine': self.Cuisine,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class RecipeStep(db.Model):
    __tablename__ = 'RecipeSteps'
    StepID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    StepNumber = db.Column(db.Integer, nullable=False)
    Description = db.Column(db.String, nullable=False)

    def to_dict(self):
        return {
            'StepID': self.StepID,
            'RecipeID': self.RecipeID,
            'StepNumber': self.StepNumber,
            'Description': self.Description
        }

class RecipeTag(db.Model):
    __tablename__ = 'RecipeTags'
    RecipeTagID = db.Column(db.Integer, primary_key=True)
    RecipeID = db.Column(db.Integer, db.ForeignKey('Recipes.RecipeID', ondelete='CASCADE'), nullable=False)
    TagID = db.Column(db.Integer, db.ForeignKey('Tags.TagID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'RecipeTagID': self.RecipeTagID,
            'RecipeID': self.RecipeID,
            'TagID': self.TagID
        }

class ShoppingListIngredient(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingListIngredients'
    ShoppingListIngredientID = db.Column(db.Integer, primary_key=True)
    ShoppingListID = db.Column(db.Integer, db.ForeignKey('ShoppingLists.ShoppingListID', ondelete='CASCADE'), nullable=False)
    MealPlanRecipeID = db.Column(db.Integer, db.ForeignKey('MealPlanRecipes.MealPlanRecipeID', ondelete='CASCADE'))
    IngredientID = db.Column(db.Integer, db.ForeignKey('Ingredients.IngredientID', ondelete='CASCADE'), nullable=False)
    Quantity = db.Column(db.Float)
    UnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='SET NULL'))
    IsManual = db.Column(db.Boolean)
    AlreadyHave = db.Column(db.Boolean)
    Purchased = db.Column(db.Boolean)

    def to_dict(self):
        return {
            'ShoppingListIngredientID': self.ShoppingListIngredientID,
            'ShoppingListID': self.ShoppingListID,
            'MealPlanRecipeID': self.MealPlanRecipeID,
            'IngredientID': self.IngredientID,
            'Quantity': self.Quantity,
            'UnitID': self.UnitID,
            'IsManual': self.IsManual,
            'AlreadyHave': self.AlreadyHave,
            'Purchased': self.Purchased,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class ShoppingList(db.Model, TimestampMixin):
    __tablename__ = 'ShoppingLists'
    ShoppingListID = db.Column(db.Integer, primary_key=True)
    UserID = db.Column(db.Integer, db.ForeignKey('Users.UserID', ondelete='CASCADE'), nullable=False)

    def to_dict(self):
        return {
            'ShoppingListID': self.ShoppingListID,
            'UserID': self.UserID,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }

class Tag(db.Model):
    __tablename__ = 'Tags'
    TagID = db.Column(db.Integer, primary_key=True)
    TagName = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'TagID': self.TagID,
            'TagName': self.TagName
        }

class UnitConversion(db.Model):
    __tablename__ = 'UnitConversions'
    FromUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ToUnitID = db.Column(db.Integer, db.ForeignKey('Units.UnitID', ondelete='CASCADE'), primary_key=True)
    ConversionFactor = db.Column(db.Float, nullable=False)

    def to_dict(self):
        return {
            'FromUnitID': self.FromUnitID,
            'ToUnitID': self.ToUnitID,
            'ConversionFactor': self.ConversionFactor
        }

class Unit(db.Model):
    __tablename__ = 'Units'
    UnitID = db.Column(db.Integer, primary_key=True)
    UnitName = db.Column(db.String, nullable=False, unique=True)
    Abbreviation = db.Column(db.String, nullable=False, unique=True)

    def to_dict(self):
        return {
            'UnitID': self.UnitID,
            'UnitName': self.UnitName,
            'Abbreviation': self.Abbreviation
        }

class User(db.Model, TimestampMixin):
    __tablename__ = 'Users'
    UserID = db.Column(db.Integer, primary_key=True)
    Username = db.Column(db.String, nullable=False, unique=True)
    PasswordHash = db.Column(db.String, nullable=False)
    Email = db.Column(db.String, nullable=False, unique=True)

    def set_password(self, password):
        self.PasswordHash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.PasswordHash, password)

    def to_dict(self):
        return {
            'UserID': self.UserID,
            'Username': self.Username,
            'Email': self.Email,
            'CreatedAt': self.CreatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.CreatedAt else None,
            'UpdatedAt': self.UpdatedAt.strftime('%Y-%m-%d %H:%M:%S') if self.UpdatedAt else None
        }


==================== C:\Code\recipe-app\backend\app\utils.py ====================

from flask import request, jsonify
from sqlalchemy.exc import SQLAlchemyError, IntegrityError
from .extensions import db
from .models import User
from datetime import datetime

def get_all(model):
    try:
        records = model.query.all()
        return jsonify([record.to_dict() for record in records]), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def get_by_id(model, id):
    try:
        record = model.query.get_or_404(id)
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        return jsonify({'error': str(e)}), 500

def create_record(model):
    try:
        data = request.get_json()
        if issubclass(model, TimestampMixin):
            if 'CreatedAt' not in data:
                data['CreatedAt'] = datetime.utcnow()
            if 'UpdatedAt' not in data:
                data['UpdatedAt'] = datetime.utcnow()

        if model == User:
            password = data.pop('Password')
            user = model(**data)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            return jsonify(user.to_dict()), 201
        else:
            record = model(**data)
            db.session.add(record)
            db.session.commit()
            return jsonify(record.to_dict()), 201
    except IntegrityError as e:
        db.session.rollback()
        return jsonify({'error': 'A record with that unique value already exists.'}), 400
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def update_record(model, id):
    try:
        data = request.get_json()
        record = model.query.get_or_404(id)
        for key, value in data.items():
            setattr(record, key, value)
        if issubclass(model, TimestampMixin):
            record.UpdatedAt = datetime.utcnow()
        db.session.commit()
        return jsonify(record.to_dict()), 200
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500

def delete_record(model, id):
    try:
        record = model.query.get_or_404(id)
        db.session.delete(record)
        db.session.commit()
        return '', 204
    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({'error': str(e)}), 500


==================== C:\Code\recipe-app\backend\app\__init__.py ====================

from flask import Flask
from .extensions import db
from .models import IngredientCategory, Ingredient, IngredientSubCategory, MealPlanRecipe, MealPlan, RecipeAuthor, RecipeBook, RecipeIngredient, RecipeIngredientSection, RecipeReview, Recipe, RecipeStep, RecipeTag, ShoppingListIngredient, ShoppingList, Tag, UnitConversion, Unit, User
from .generic_crud import create_crud_blueprint
from sqlalchemy import inspect

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///../../mydatabase2.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

    db.init_app(app)
    
    with app.app_context():
        # Print all tables in the database
        inspector = inspect(db.engine)
        print(inspector.get_table_names())

    # Register blueprints
    app.register_blueprint(create_crud_blueprint(IngredientCategory, '/ingredient_categories'))
    app.register_blueprint(create_crud_blueprint(Ingredient, '/ingredients'))
    app.register_blueprint(create_crud_blueprint(IngredientSubCategory, '/ingredient_subcategories'))
    app.register_blueprint(create_crud_blueprint(MealPlanRecipe, '/meal_plan_recipes'))
    app.register_blueprint(create_crud_blueprint(MealPlan, '/meal_plans'))
    app.register_blueprint(create_crud_blueprint(RecipeAuthor, '/recipe_authors'))
    app.register_blueprint(create_crud_blueprint(RecipeBook, '/recipe_books'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredient, '/recipe_ingredients'))
    app.register_blueprint(create_crud_blueprint(RecipeIngredientSection, '/recipe_ingredient_sections'))
    app.register_blueprint(create_crud_blueprint(RecipeReview, '/recipe_reviews'))
    app.register_blueprint(create_crud_blueprint(Recipe, '/recipes'))
    app.register_blueprint(create_crud_blueprint(RecipeStep, '/recipe_steps'))
    app.register_blueprint(create_crud_blueprint(RecipeTag, '/recipe_tags'))
    app.register_blueprint(create_crud_blueprint(ShoppingListIngredient, '/shopping_list_ingredients'))
    app.register_blueprint(create_crud_blueprint(ShoppingList, '/shopping_lists'))
    app.register_blueprint(create_crud_blueprint(Tag, '/tags'))
    app.register_blueprint(create_crud_blueprint(UnitConversion, '/unit_conversions'))
    app.register_blueprint(create_crud_blueprint(Unit, '/units'))
    app.register_blueprint(create_crud_blueprint(User, '/users'))

    return app


==================== C:\Code\recipe-app\backend\instance\mydatabase2.db ====================



==================== C:\Code\recipe-app\client\.eslintrc.cjs ====================

module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}


==================== C:\Code\recipe-app\client\index.html ====================

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


==================== C:\Code\recipe-app\client\postcss.config.js ====================

export default {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  };
  

==================== C:\Code\recipe-app\client\README.md ====================

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh


==================== C:\Code\recipe-app\client\tailwind.config.js ====================

/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [
      require('daisyui'),
    ],
    daisyui: {
      themes: ["light", "dark", "cupcake", "bumblebee", "emerald", "corporate", "synthwave", "retro", "cyberpunk", "valentine", "halloween", "garden", "forest", "aqua", "lofi", "pastel", "fantasy", "wireframe", "black", "luxury", "dracula", "cmyk", "autumn", "business", "acid", "lemonade", "night", "coffee", "winter"],
    },
  }
  

==================== C:\Code\recipe-app\client\vite.config.js ====================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ''),
      },
    },
  },
});


==================== C:\Code\recipe-app\client\public\vite.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

==================== C:\Code\recipe-app\client\src\App.css ====================



==================== C:\Code\recipe-app\client\src\App.jsx ====================

import React from 'react';
import AppRoutes from './routes';
import NavBar from './components/NavBar';
import { useAuth } from './context/AuthContext';
import SideBar from './components/SideBar';

function App() {
  const { isAuthenticated } = useAuth();

  return (
    <div className="flex flex-col min-h-screen">
      <NavBar />
      <div className="flex grow">
        {isAuthenticated && <SideBar />}
        <AppRoutes />
      </div>
    </div>
  );
}

export default App;


==================== C:\Code\recipe-app\client\src\index.css ====================

@tailwind base;
@tailwind components;
@tailwind utilities;


==================== C:\Code\recipe-app\client\src\main.jsx ====================

import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';
import { AuthProvider } from './context/AuthContext';
import { DataProvider } from './context/DataContext';

const rootElement = document.getElementById('root');
const root = createRoot(rootElement);

root.render(
  <BrowserRouter>
    <AuthProvider>
      <DataProvider>
        <App />
      </DataProvider>
    </AuthProvider>
  </BrowserRouter>
);


==================== C:\Code\recipe-app\client\src\routes.jsx ====================

// src/routes.jsx

import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import Register from './pages/Register';
import ManageCategories from './pages/ManageCategories';
import ManageSubCategories from './pages/ManageSubCategories';
import ManageIngredients from './pages/ManageIngredients';
import ManageRecipes from './pages/ManageRecipes';
import ManageAuthors from './pages/ManageAuthors';
import ManageRecipeBooks from './pages/ManageRecipeBooks';
import ManageMealPlans from './pages/ManageMealPlans';
import PrivateRoute from './components/PrivateRoute';
import MealPlanDetails from './pages/MealPlanDetails';

import Home from './pages/Home';

function AppRoutes() {
  return (
    <Routes>
      <Route path="login" element={<Login />} />
      <Route path="register" element={<Register />} />
      <Route path="/" element={<PrivateRoute><Home /></PrivateRoute>} />
      <Route path="/meal-plan/:mealPlanId" element={<PrivateRoute><MealPlanDetails /></PrivateRoute>} />
      <Route path="admin">
        <Route index element={<PrivateRoute><Dashboard /></PrivateRoute>} />
        <Route path="manage-categories" element={<PrivateRoute><ManageCategories /></PrivateRoute>} />
        <Route path="manage-sub-categories" element={<PrivateRoute><ManageSubCategories /></PrivateRoute>} />
        <Route path="manage-ingredients" element={<PrivateRoute><ManageIngredients /></PrivateRoute>} />
        <Route path="manage-recipes" element={<PrivateRoute><ManageRecipes /></PrivateRoute>} />
        <Route path="manage-authors" element={<PrivateRoute><ManageAuthors /></PrivateRoute>} />
        <Route path="manage-recipe-books" element={<PrivateRoute><ManageRecipeBooks /></PrivateRoute>} />
        <Route path="manage-meal-plans" element={<PrivateRoute><ManageMealPlans /></PrivateRoute>} />
      </Route>

    </Routes>
  );
}

export default AppRoutes;


==================== C:\Code\recipe-app\client\src\supabaseClient.js ====================

// src/supabaseClient.js

import { createClient } from '@supabase/supabase-js';

const SUPABASE_URL = 'https://fovbbeeexjqmcivjaujs.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZvdmJiZWVleGpxbWNpdmphdWpzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTk1Nzg2NjksImV4cCI6MjAzNTE1NDY2OX0.F3M2b5cR9gKJo5muAZ45bgs8LKkf8znkMlixf7wN_88';

export const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);


==================== C:\Code\recipe-app\client\src\assets\react.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

==================== C:\Code\recipe-app\client\src\components\AddAuthorModal.jsx ====================

// src/components/AddAuthorModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';

function AddAuthorModal() {
  const [authorName, setAuthorName] = useState('');
  const [authorImageURL, setAuthorImageURL] = useState('');
  const { createAuthor } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createAuthor(authorName, authorImageURL);
      document.getElementById('add_author_modal').close();
    } catch (error) {
      alert('Failed to add author');
    }
  };

  return (
    <Modal id="add_author_modal" title="Add Author">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Author Name"
          value={authorName}
          onChange={(e) => setAuthorName(e.target.value)}
          required
        />
        <TextInput
          label="Author Image URL"
          value={authorImageURL}
          onChange={(e) => setAuthorImageURL(e.target.value)}
        />
        <Button>Add Author</Button>
      </form>
    </Modal>
  );
}

export default AddAuthorModal;


==================== C:\Code\recipe-app\client\src\components\AddCategoryModal.jsx ====================

// src/components/AddCategoryModal.jsx
import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Button from './ui/Button';

function AddCategoryModal() {
  const [categoryName, setCategoryName] = useState('');
  const { createCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await createCategory(categoryName);
      document.getElementById('add_category_modal').close();
    } catch (error) {
      alert('Failed to add category');
    }
  };

  return (
    <Modal id="add_category_modal" title="Add Category">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Category Name"
          value={categoryName}
          onChange={(e) => setCategoryName(e.target.value)}
          required
        />
        <Button>Add Category</Button>
      </form>
    </Modal>
  );
}

export default AddCategoryModal;


==================== C:\Code\recipe-app\client\src\components\AddIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import TextInput from './ui/TextInput';
import Modal from './ui/Modal';
import Select from './ui/Select';
import Button from './ui/Button';

function AddIngredientModal({ onIngredientAdded = () => {} }) {
  const [ingredientName, setIngredientName] = useState('');
  const [purchaseWeightVolume, setPurchaseWeightVolume] = useState('');
  const [purchaseUnitId, setPurchaseUnitId] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const [subCategoryId, setSubCategoryId] = useState('');
  const [purchaseWeightUnitId, setPurchaseWeightUnitId] = useState('');

  const { categories, subCategories, units, createIngredient } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const ingredient = {
      IngredientName: ingredientName,
      PurchaseWeightVolume: purchaseWeightVolume,
      PurchaseUnitID: purchaseUnitId,
      SubCategoryID: subCategoryId,
      PurchaseWeightUnitID: purchaseWeightUnitId,
    };

    try {
      const newIngredient = await createIngredient(ingredient);
      onIngredientAdded(newIngredient);
      document.getElementById('add_ingredient_modal').close();
    } catch (error) {
      alert('Failed to add ingredient');
    }
  };

  const filteredSubCategories = subCategories.filter(
    (subCategory) => subCategory.CategoryID === parseInt(categoryId)
  );

  const unitOptions = units.map((unit) => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  const subCategoryOptions = filteredSubCategories.map((subCategory) => ({
    value: subCategory.SubCategoryID,
    label: subCategory.SubCategoryName,
  }));

  return (
    <Modal id="add_ingredient_modal" title="Add Ingredient" className="modal modal-bottom sm:modal-middle">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Ingredient Name"
          value={ingredientName}
          onChange={(e) => setIngredientName(e.target.value)}
          required
        />
        <TextInput
          label="Purchase Weight Volume"
          value={purchaseWeightVolume}
          onChange={(e) => setPurchaseWeightVolume(e.target.value)}
          required
        />
        <Select
          label="Purchase Unit"
          value={purchaseUnitId}
          onChange={(e) => setPurchaseUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Select
          label="Sub-Category"
          value={subCategoryId}
          onChange={(e) => setSubCategoryId(e.target.value)}
          required
          options={subCategoryOptions}
          defaultOption="Select a sub-category"
          disabled={!categoryId} // Disable until a category is selected
        />
        <Select
          label="Purchase Weight Unit"
          value={purchaseWeightUnitId}
          onChange={(e) => setPurchaseWeightUnitId(e.target.value)}
          required
          options={unitOptions}
          defaultOption="Select a unit"
        />
        <Button>Add Ingredient</Button>
      </form>
    </Modal>
  );
}

export default AddIngredientModal;


==================== C:\Code\recipe-app\client\src\components\AddMealPlanModal.jsx ====================

// src/components/AddMealPlanModal.jsx

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';

function AddMealPlanModal() {
  const [planName, setPlanName] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const { createMealPlan } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const mealPlan = {
      PlanName: planName,
      StartDate: startDate,
      EndDate: endDate,
      UserID: 1, // Adjust as needed
    };

    try {
      await createMealPlan(mealPlan);
      document.getElementById('add_meal_plan_modal').close();
    } catch (error) {
      alert('Failed to add meal plan');
    }
  };

  return (
    <Modal id="add_meal_plan_modal" title="Add Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Plan Name"
          value={planName}
          onChange={(e) => setPlanName(e.target.value)}
          required
        />
        <TextInput
          label="Start Date"
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          required
        />
        <TextInput
          label="End Date"
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          required
        />
        <Button>Add Meal Plan</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanModal;


==================== C:\Code\recipe-app\client\src\components\AddMealPlanRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import Select from './ui/Select';
import { format, isValid } from 'date-fns';
import TextInput from './ui/TextInput';

function AddMealPlanRecipeModal({ mealPlanId, defaultDate, defaultMealType, defaultRecipeId, mealPlanRecipeId }) {

  const [recipeId, setRecipeId] = useState('');
  const [date, setDate] = useState(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
  const [mealType, setMealType] = useState(defaultMealType || '');
  const [currentMealPlanRecipeId, setCurrentMealPlanRecipeId] = useState(mealPlanRecipeId);

  const { recipes, createMealPlanRecipe, updateMealPlanRecipe } = useData();

  useEffect(() => {
    setDate(defaultDate && isValid(new Date(defaultDate)) ? format(new Date(defaultDate), 'yyyy-MM-dd') : '');
    setMealType(defaultMealType || '');
    setRecipeId(defaultRecipeId || '');
    setCurrentMealPlanRecipeId(mealPlanRecipeId || '');
  }, [defaultDate, defaultMealType, defaultRecipeId, mealPlanRecipeId]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!mealPlanId || !recipeId || !mealType || !date) {
      alert('All fields are required.');
      return;
    }

    const mealPlanRecipe = {
      MealPlanID: mealPlanId,
      RecipeID: recipeId,
      MealType: mealType,
      Date: date,
    };

    console.log("Submitting mealPlanRecipeId:", currentMealPlanRecipeId);

    try {
      if (currentMealPlanRecipeId) {
        // Update the existing meal plan recipe
        await updateMealPlanRecipe(currentMealPlanRecipeId, mealPlanRecipe);
      } else {
        // Create a new meal plan recipe
        await createMealPlanRecipe(mealPlanRecipe);
      }
      document.getElementById('add_meal_plan_recipe_modal').close();
      setRecipeId('');
      setMealType('');
      setDate('');
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add/update meal plan recipe');
    }
  };

  const recipeOptions = recipes.map(recipe => ({
    value: recipe.RecipeID,
    label: recipe.RecipeName,
  }));

  return (
    <Modal id="add_meal_plan_recipe_modal" title="Add/Update Meal in Meal Plan">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <Select
          label="Recipe"
          value={recipeId}
          onChange={(e) => setRecipeId(e.target.value)}
          required
          options={recipeOptions}
          defaultOption="Select a recipe"
        />
        <TextInput
          label="Date"
          type="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          required
        />
        <Select
          label="Meal Type"
          value={mealType}
          onChange={(e) => setMealType(e.target.value)}
          required
          options={[
            { value: 'Breakfast', label: 'Breakfast' },
            { value: 'Lunch', label: 'Lunch' },
            { value: 'Dinner', label: 'Dinner' }
          ]}
          defaultOption="Select a meal type"
        />
        <Button type="submit">{currentMealPlanRecipeId ? 'Update Meal' : 'Add Meal'}</Button>
      </form>
    </Modal>
  );
}

export default AddMealPlanRecipeModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeBookModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeBookModal() {
  const [bookName, setBookName] = useState('');
  const [authorID, setAuthorID] = useState('');
  const [coverArtURL, setCoverArtURL] = useState('');

  const { authors, createRecipeBook } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const recipeBook = {
      AuthorID: authorID,
      BookName: bookName,
      CoverArtURL: coverArtURL
    };

    try {
      await createRecipeBook(recipeBook);
      document.getElementById('add_recipe_book_modal').close();
    } catch (error) {
      alert('Failed to add book');
    }
  };

  const authorOptions = authors.map(author => ({
    value: author.AuthorID,
    label: author.AuthorName,
  }));

  return (
    <Modal id="add_recipe_book_modal" title="Add Recipe Book">
      <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
        <TextInput
          label="Book Name"
          value={bookName}
          onChange={(e) => setBookName(e.target.value)}
          required
        />
        <Select
          label="Author"
          value={authorID}
          onChange={(e) => setAuthorID(e.target.value)}
          required
          options={authorOptions}
          defaultOption="Select an author"
        />
        <TextInput
          label="Cover Art URL"
          value={coverArtURL}
          onChange={(e) => setCoverArtURL(e.target.value)}
        />
        <Button>Add Book</Button>
      </form>
    </Modal>
  );
}

export default AddRecipeBookModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeIngredientModal.jsx ====================

import React, { useState, useEffect } from 'react';
import Fuse from 'fuse.js';
import { useData } from '../context/DataContext';
import AddIngredientModal from './AddIngredientModal';
import Table from './ui/Table';
import Button from './ui/Button';
import Modal from './ui/Modal';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeIngredientModal({ recipeId }) {
  const [selectedIngredientId, setSelectedIngredientId] = useState('');
  const [quantity, setQuantity] = useState('');
  const [selectedUnitId, setSelectedUnitId] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredIngredients, setFilteredIngredients] = useState([]);
  const [defaultUnitId, setDefaultUnitId] = useState('');

  const { ingredients, units, categories, subCategories, createRecipeIngredient } = useData();

  useEffect(() => {
    if (ingredients.length && categories.length && subCategories.length) {
      const updatedIngredients = ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      });
      setFilteredIngredients(updatedIngredients);
    }
  }, [ingredients, categories, subCategories]);

  const handleSearch = (e) => {
    const term = e.target.value;
    setSearchTerm(term);

    if (term === '') {
      setFilteredIngredients(ingredients.map((ingredient) => {
        const subCategory = subCategories.find(
          (sub) => sub.SubCategoryID === ingredient.SubCategoryID
        );
        const category = subCategory
          ? categories.find((cat) => cat.CategoryID === subCategory.CategoryID)
          : null;

        return {
          ...ingredient,
          CategoryName: category ? category.CategoryName : '',
          SubCategoryName: subCategory ? subCategory.SubCategoryName : '',
        };
      }));
    } else {
      const fuse = new Fuse(filteredIngredients, {
        keys: ['IngredientName', 'CategoryName', 'SubCategoryName'],
        threshold: 0.3, // Adjust the threshold as needed
      });

      const result = fuse.search(term);
      setFilteredIngredients(result.map((r) => r.item));
    }
  };

  const handleAddClick = (ingredientId) => {
    const ingredient = ingredients.find((ing) => ing.IngredientID === ingredientId);
    if (ingredient) {
      setSelectedIngredientId(ingredientId);
      setDefaultUnitId(ingredient.PurchaseUnitID || ''); // Handle missing PurchaseUnitID
      setSelectedUnitId(ingredient.PurchaseUnitID || ''); // Set the default unit id
      document.getElementById('quantity_unit_modal').showModal();
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const data = {
      RecipeID: recipeId,
      IngredientID: selectedIngredientId,
      Quantity: parseFloat(quantity),
      UnitID: selectedUnitId || defaultUnitId,
    };

    try {
      await createRecipeIngredient(data);
      window.location.reload(); // Refresh the page to show the new ingredient
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add ingredient');
    }
  };

  const handleAddNewIngredient = () => {
    document.getElementById('add_ingredient_modal').showModal();
  };

  const handleNewIngredientAdded = (newIngredient) => {
    if (newIngredient && newIngredient.PurchaseUnitID) {
      setFilteredIngredients((prevIngredients) => [
        ...prevIngredients,
        {
          ...newIngredient,
          CategoryName: '',
          SubCategoryName: '',
        },
      ]);

      // Automatically select the newly added ingredient and open the quantity/unit modal
      setSelectedIngredientId(newIngredient.IngredientID);
      setDefaultUnitId(newIngredient.PurchaseUnitID);
      setSelectedUnitId(newIngredient.PurchaseUnitID);
      setQuantity(''); // Reset the quantity
      document.getElementById('quantity_unit_modal').showModal();
    } else {
      alert('New ingredient does not have a PurchaseUnitID');
    }
  };

  const headers = ['Ingredient', 'Category', 'Sub-Category', 'Action'];
  const data = filteredIngredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientName,
      ingredient.CategoryName,
      ingredient.SubCategoryName,
      <Button
        size="sm"
        variant="primary"
        outline={true}
        onClick={() => handleAddClick(ingredient.IngredientID)}
      >
        Add
      </Button>
    ],
  }));

  const unitOptions = units.map(unit => ({
    value: unit.UnitID,
    label: unit.UnitName,
  }));

  return (
    <div>
      <Modal id="add_recipe_ingredient_modal" title="Add Ingredient to Recipe" wide={true}>
        <div className='flex flex-col gap-4 mb-8'>
          <TextInput
            label="Search Ingredient"
            value={searchTerm}
            onChange={handleSearch}
            placeholder="Type to search ingredients..."
          />

          <Button
            outline={true}
            size='sm'
            onClick={handleAddNewIngredient}
          >Add New Ingredient</Button>
        </div>
        <Table headers={headers} data={data} />
      </Modal>

      <Modal id="quantity_unit_modal" title="Enter Quantity and Unit">
        <form onSubmit={handleSubmit} className="flex gap-4 flex-col mt-4">
          <TextInput
            label="Quantity"
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
            required
          />

          <Select
            label="Unit"
            value={selectedUnitId || defaultUnitId}
            onChange={(e) => setSelectedUnitId(e.target.value)}
            required
            options={unitOptions}
            defaultOption="Select a unit"
          />
          <Button>Add Ingredient</Button>
        </form>
      </Modal>

      <AddIngredientModal onIngredientAdded={handleNewIngredientAdded} />
    </div>
  );
}

export default AddRecipeIngredientModal;


==================== C:\Code\recipe-app\client\src\components\AddRecipeModal.jsx ====================

import React, { useState, useEffect } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddRecipeModal() {
    const [recipeName, setRecipeName] = useState('');
    const [authorID, setAuthorID] = useState('');
    const [bookID, setBookID] = useState('');
    const [pageNumber, setPageNumber] = useState('');
    const [onlineURL, setOnlineURL] = useState('');
    const [cookTime, setCookTime] = useState('');
    const [difficulty, setDifficulty] = useState('');
    const [type, setType] = useState('');
    const [imageURL, setImageURL] = useState('');
    const [servings, setServings] = useState('');
    const [cuisine, setCuisine] = useState('');
    const [filteredBooks, setFilteredBooks] = useState([]);

    const { authors, recipeBooks, createRecipe } = useData();

    useEffect(() => {
        if (authorID) {
            setFilteredBooks(recipeBooks.filter(book => book.AuthorID === parseInt(authorID)));
        } else {
            setFilteredBooks([]);
        }
    }, [authorID, recipeBooks]);

    const handleAuthorChange = (e) => {
        setAuthorID(e.target.value);
        setBookID(''); // Reset book selection when author changes
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        const recipe = {
            RecipeName: recipeName,
            AuthorID: parseInt(authorID) || null,
            BookID: parseInt(bookID) || null,
            PageNumber: parseInt(pageNumber) || null,
            OnlineURL: onlineURL,
            CookTime: parseInt(cookTime) || null,
            Difficulty: difficulty,
            Type: type,
            ImageURL: imageURL,
            Servings: parseInt(servings) || null,
            Cuisine: cuisine,
        };

        try {
            await createRecipe(recipe);
            document.getElementById('add_recipe_modal').close();
        } catch (error) {
            alert('Failed to add recipe');
        }
    };

    const authorOptions = authors.map(author => ({
        value: author.AuthorID,
        label: author.AuthorName
    }));

    const bookOptions = filteredBooks.map(book => ({
        value: book.BookID,
        label: book.BookName
    }));

    return (
        <Modal id="add_recipe_modal" title="Add Recipe">
            <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
                <TextInput
                    label="Recipe Name"
                    value={recipeName}
                    onChange={(e) => setRecipeName(e.target.value)}
                    required
                />
                <Select
                    label="Author"
                    value={authorID}
                    onChange={handleAuthorChange}
                    options={authorOptions}
                    defaultOption="Select an author"
                />
                <Select
                    label="Book"
                    value={bookID}
                    onChange={(e) => setBookID(e.target.value)}
                    options={bookOptions}
                    defaultOption="Select a book"
                    disabled={!authorID}
                />
                <TextInput
                    label="Page Number"
                    type="number"
                    value={pageNumber}
                    onChange={(e) => setPageNumber(e.target.value)}
                    disabled={!bookID}
                />
                <TextInput
                    label="Online URL"
                    type="url"
                    value={onlineURL}
                    onChange={(e) => setOnlineURL(e.target.value)}
                />
                <TextInput
                    label="Cook Time (minutes)"
                    type="number"
                    value={cookTime}
                    onChange={(e) => setCookTime(e.target.value)}
                    required
                />
                <TextInput
                    label="Difficulty"
                    value={difficulty}
                    onChange={(e) => setDifficulty(e.target.value)}
                />
                <TextInput
                    label="Type"
                    value={type}
                    onChange={(e) => setType(e.target.value)}
                />
                <TextInput
                    label="Image URL"
                    type="url"
                    value={imageURL}
                    onChange={(e) => setImageURL(e.target.value)}
                />
                <TextInput
                    label="Servings"
                    type="number"
                    value={servings}
                    onChange={(e) => setServings(e.target.value)}
                    required
                />
                <TextInput
                    label="Cuisine"
                    value={cuisine}
                    onChange={(e) => setCuisine(e.target.value)}
                />
                <Button>Add Recipe</Button>
            </form>
        </Modal>
    );
}

export default AddRecipeModal;


==================== C:\Code\recipe-app\client\src\components\AddSubCategoryModal.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Modal from './ui/Modal';
import Button from './ui/Button';
import TextInput from './ui/TextInput';
import Select from './ui/Select';

function AddSubCategoryModal() {
  const [subCategoryName, setSubCategoryName] = useState('');
  const [categoryId, setCategoryId] = useState('');
  const { categories, createSubCategory } = useData();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const subCategory = {
      SubCategoryName: subCategoryName,
      CategoryID: categoryId,
    };

    try {
      await createSubCategory(subCategory);
      document.getElementById('add_sub_category_modal').close();
    } catch (error) {
      console.error('Error adding sub-category:', error);
      alert('Failed to add sub-category');
    }
  };

  const categoryOptions = categories.map((category) => ({
    value: category.CategoryID,
    label: category.CategoryName,
  }));

  return (
    <Modal id="add_sub_category_modal" title="Add Sub-Category">
      <form onSubmit={handleSubmit} className="flex gap-4 flex-col">
        <TextInput
          label="Sub-Category Name"
          value={subCategoryName}
          onChange={(e) => setSubCategoryName(e.target.value)}
          required
        />        
        <Select
          label="Category"
          value={categoryId}
          onChange={(e) => setCategoryId(e.target.value)}
          required
          options={categoryOptions}
          defaultOption="Select a category"
        />
        <Button>Add Sub-Category</Button>
      </form>
    </Modal>
  );
}

export default AddSubCategoryModal;


==================== C:\Code\recipe-app\client\src\components\AuthorTable.jsx ====================

// src/components/AuthorTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Button from './ui/Button';
import Table from './ui/Table';
import DeleteButton from './ui/DeleteButton';

function AuthorTable() {
  const { authors, deleteAuthor } = useData();

  const handleDelete = async (authorId) => {
    if (window.confirm('Are you sure you want to delete this author?')) {
      await deleteAuthor(authorId);
    }
  };

  const headers = ['#', 'Author Name', 'Actions'];

  const data = authors.map((author, index) => ({
    id: author.AuthorID,
    cells: [
      index + 1,
      author.AuthorName,
      <DeleteButton onClick={() => handleDelete(author.AuthorID)} />      
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default AuthorTable;


==================== C:\Code\recipe-app\client\src\components\Calendar.jsx ====================

// src/components/Calendar.jsx
import React from 'react';
import Button from './ui/Button';
import { format, eachDayOfInterval, parseISO } from 'date-fns';

const Calendar = ({ mealPlan, mealPlanRecipes, recipes, onAddMeal, onModifyMeal }) => {
  const days = eachDayOfInterval({
    start: parseISO(mealPlan.StartDate),
    end: parseISO(mealPlan.EndDate),
  });

  const getMealForDay = (date, mealType) => {
    return mealPlanRecipes.find(
      (mpr) => mpr.Date === format(date, 'yyyy-MM-dd') && mpr.MealType === mealType
    );
  };

  const getRecipeName = (recipeId) => {
    const recipe = recipes.find(r => r.RecipeID === recipeId);
    return recipe ? recipe.RecipeName : 'Unknown Recipe';
  };

  return (
    <div className="grid grid-cols-1 gap-4">
      {days.map((day) => (
        <div key={day} className="border p-2">
          <h3 className="font-bold">{format(day, 'eee, MMM d')}</h3>
          {['Breakfast', 'Lunch', 'Dinner'].map((mealType) => {
            const meal = getMealForDay(day, mealType);
            return (
              <div key={mealType} className="my-2">
                <h4 className="font-semibold">{mealType}</h4>
                {meal ? (
                  <div>
                    <div>{getRecipeName(meal.RecipeID)}</div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="secondary"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID)}
                      >
                        Modify
                      </Button>
                      <Button
                        size="sm"
                        variant="error"
                        outline
                        onClick={() => onModifyMeal(meal.MealPlanRecipeID, true)}
                      >
                        Remove
                      </Button>
                    </div>
                  </div>
                ) : (
                  <Button
                    size="sm"
                    variant="secondary"
                    outline
                    onClick={() => onAddMeal(day, mealType)}
                  >
                    Add {mealType}
                  </Button>
                )}
              </div>
            );
          })}
        </div>
      ))}
    </div>
  );
};

export default Calendar;


==================== C:\Code\recipe-app\client\src\components\CategoryTable.jsx ====================

// src/components/CategoryTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function CategoryTable() {
  const { categories, subCategories, deleteCategory } = useData();

  const handleDelete = async (categoryId) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      await deleteCategory(categoryId);
    }
  };

  const headers = ['ID', 'Category Name', 'Sub-Categories', 'Actions'];

  const data = categories.map((category, index) => {
    const categorySubCategories = subCategories.filter(sub => sub.CategoryID === category.CategoryID).map(sub => sub.SubCategoryName).join(', ');

    return {
      id: category.CategoryID,
      cells: [
        category.CategoryID,
        category.CategoryName,
        categorySubCategories || 'None',
        <DeleteButton onClick={() => handleDelete(category.CategoryID)} />
      ],
    };
  });

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default CategoryTable;


==================== C:\Code\recipe-app\client\src\components\IngredientTable.jsx ====================

// src/components/IngredientTable.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function IngredientTable() {
  const { ingredients, categories, subCategories, units, deleteIngredient } = useData();

  const handleDelete = async (ingredientId) => {
    if (window.confirm('Are you sure you want to delete this ingredient?')) {
      try {
        await deleteIngredient(ingredientId);
      } catch (error) {
        alert('Failed to delete ingredient');
      }
    }
  };

  const getSubCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    return subCategory ? subCategory.SubCategoryName : 'Unknown';
  };

  const getCategoryName = (subCategoryId) => {
    const subCategory = subCategories.find(subCategory => subCategory.SubCategoryID === subCategoryId);
    if (subCategory) {
      const category = categories.find(category => category.CategoryID === subCategory.CategoryID);
      return category ? category.CategoryName : 'Unknown';
    }
    return 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const headers = ['ID', 'Ingredient Name', 'Purchase Weight Volume', 'Purchase Unit', 'Category', 'Subcategory', 'Purchase Weight Unit', 'Actions'];

  const data = ingredients.map((ingredient) => ({
    id: ingredient.IngredientID,
    cells: [
      ingredient.IngredientID,
      ingredient.IngredientName,
      ingredient.PurchaseWeightVolume,
      getUnitName(ingredient.PurchaseUnitID),
      getCategoryName(ingredient.SubCategoryID),
      getSubCategoryName(ingredient.SubCategoryID),
      getUnitName(ingredient.PurchaseWeightUnitID),
      <DeleteButton onClick={() => handleDelete(ingredient.IngredientID)} />
    ],
  }));

  return (
    <>
      <Table headers={headers} data={data} />
    </>
  );
}

export default IngredientTable;


==================== C:\Code\recipe-app\client\src\components\MealPlanRecipeTable.jsx ====================

// src/components/MealPlanRecipeTable.jsx

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanRecipeTable({ mealPlanId }) {
    const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

    const handleDelete = async (mealPlanRecipeId) => {
        if (window.confirm('Are you sure you want to delete this meal?')) {
            try {
                await deleteMealPlanRecipe(mealPlanRecipeId);
            } catch (error) {
                alert('Failed to delete meal');
            }
        }
    };

    const getRecipeName = (recipeId) => {
        const recipe = recipes.find(recipe => recipe.RecipeID === recipeId);
        return recipe ? recipe.RecipeName : 'Unknown';
    };

    const headers = ['ID', 'Recipe', 'Meal Type', 'Date', 'Actions'];

    const data = mealPlanRecipes
        .filter(mpr => mpr.MealPlanID === mealPlanId)
        .map((mealPlanRecipe) => ({
            id: mealPlanRecipe.MealPlanRecipeID,
            cells: [
                mealPlanRecipe.MealPlanRecipeID,
                getRecipeName(mealPlanRecipe.RecipeID),
                mealPlanRecipe.MealType,
                mealPlanRecipe.Date,
                <DeleteButton onClick={() => handleDelete(mealPlanRecipe.MealPlanRecipeID)} />,
            ],
        }));

    function handleAddClick() {
        document.getElementById('add_meal_plan_recipe_modal').showModal();
    }

    return (
        <div className="overflow-x-auto">
            <Button size='sm' outline={true} variant='secondary' onClick={handleAddClick}>Add meal</Button>
            <Table headers={headers} data={data} />
        </div>
    );
}

export default MealPlanRecipeTable;


==================== C:\Code\recipe-app\client\src\components\MealPlanTable.jsx ====================

import React from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function MealPlanTable({ onManageMeals }) {
  const { mealPlans, deleteMealPlan } = useData();

  const handleDelete = async (mealPlanId) => {
    if (window.confirm('Are you sure you want to delete this meal plan?')) {
      try {
        await deleteMealPlan(mealPlanId);
      } catch (error) {
        alert('Failed to delete meal plan');
      }
    }
  };

  const headers = ['ID', 'Plan Name', 'Start Date', 'End Date', 'Actions'];

  const data = mealPlans.map((mealPlan) => ({
    id: mealPlan.MealPlanID,
    cells: [
      mealPlan.MealPlanID,
      mealPlan.PlanName,
      mealPlan.StartDate,
      mealPlan.EndDate,
      <div className="flex gap-2">
        <Button
          size="sm"
          variant="primary"
          outline={true}
          onClick={() => onManageMeals(mealPlan)}
        >
          Manage Meals
        </Button>
        <DeleteButton onClick={() => handleDelete(mealPlan.MealPlanID)} />
      </div>
    ],
  }));

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default MealPlanTable;


==================== C:\Code\recipe-app\client\src\components\NavBar.jsx ====================

// src/components/NavBar.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import ThemeSwitcher from './ThemeSwitcher';
import { useAuth } from '../context/AuthContext';

const NavBar = () => {
  const { isAuthenticated, logout } = useAuth();

  return (
    <nav className="navbar justify-between bg-base-300">
      <a className="btn btn-ghost text-lg">
        <img alt="Logo" src="../vite.svg" className="w-4" />
        Recipe App
      </a>
      <div className="dropdown dropdown-end sm:hidden">
        <button className="btn btn-ghost">
          <i className="fa-solid fa-bars text-lg"></i>
        </button>

        <ul tabIndex="0" className="dropdown-content menu z-[1] bg-base-200 p-6 rounded-box shadow w-56 gap-2">
          <li><a>About</a></li>
          <li><a>Pricing</a></li>
          <li><a>Blog</a></li>
          <li><a>Contact</a></li>
          <a className="btn btn-sm btn-primary">Log in</a>
        </ul>
      </div>
      <div className="hidden sm:flex gap-2">
        <ThemeSwitcher />       
        {isAuthenticated ? (
          <button
            onClick={logout}
            className="btn btn-primary btn-sm"
          >
            Logout
          </button>
        ) : (
          <>
            <Link to="/register" className="btn btn-ghost btn-sm">Register</Link>
            <Link to="/login" className="btn btn-primary btn-sm">Login</Link>
          </>
        )}
      </div>
    </nav>
  );
};

export default NavBar;


==================== C:\Code\recipe-app\client\src\components\PrivateRoute.jsx ====================

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import SideBar from './SideBar';

const PrivateRoute = ({ children }) => {
  const { isAuthenticated } = useAuth();

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  return (
    <div className="flex grow">     
      <div className="flex flex-col px-8 py-6 grow">
        {children}
      </div>
    </div>
  );
};

export default PrivateRoute;


==================== C:\Code\recipe-app\client\src\components\RecipeBookTable.jsx ====================

// src/components/RecipeBookTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';

function RecipeBookTable() {
  const { recipeBooks, authors, deleteRecipeBook } = useData();

  const handleDelete = async (bookId) => {
    if (window.confirm('Are you sure you want to delete this book?')) {
      try {
        await deleteRecipeBook(bookId);
      } catch (error) {
        alert('Failed to delete book');
      }
    }
  };

  const getAuthorName = (authorId) => {
    const author = authors.find(author => author.AuthorID === authorId);
    return author ? author.AuthorName : 'Unknown';
  };

  const headers = ['#', 'Book Name', 'Author Name', 'Actions'];

  const data = useMemo(() => 
    recipeBooks.map((book, index) => ({
      id: book.BookID,
      cells: [
        index + 1,
        book.BookName,
        getAuthorName(book.AuthorID),
        <DeleteButton onClick={() => handleDelete(book.BookID)} />,
      ],
    })),
    [recipeBooks, authors]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeBookTable;


==================== C:\Code\recipe-app\client\src\components\RecipeTable.jsx ====================

// src/components/RecipeTable.jsx
import React, { useMemo } from 'react';
import { useData } from '../context/DataContext';
import DeleteButton from './ui/DeleteButton';
import Table from './ui/Table';
import Button from './ui/Button';

function RecipeTable({ onAddIngredients }) {
  const { recipes, ingredients, units, recipeIngredients, deleteRecipe } = useData();

  const handleDelete = async (recipeId) => {
    if (window.confirm('Are you sure you want to delete this recipe?')) {
      try {
        await deleteRecipe(recipeId);
      } catch (error) {
        alert('Failed to delete recipe');
      }
    }
  };

  const getIngredientName = (ingredientId) => {
    const ingredient = ingredients.find(ingredient => ingredient.IngredientID === ingredientId);
    return ingredient ? ingredient.IngredientName : 'Unknown';
  };

  const getUnitName = (unitId) => {
    const unit = units.find(unit => unit.UnitID === unitId);
    return unit ? unit.UnitName : 'Unknown';
  };

  const renderIngredients = (recipeId) => {
    const filteredIngredients = recipeIngredients.filter(ri => ri.RecipeID === recipeId);
    return filteredIngredients.map(ingredient => (
      <li key={ingredient.RecipeIngredientID}>
        {ingredient.Quantity} {getUnitName(ingredient.UnitID)} of {getIngredientName(ingredient.IngredientID)}
      </li>
    ));
  };

  const headers = ['#', 'Recipe Name', 'Author ID', 'Ingredients', 'Actions'];

  const data = useMemo(() =>
    recipes.map((recipe, index) => ({
      id: recipe.RecipeID,
      cells: [
        index + 1,
        recipe.RecipeName,
        recipe.AuthorID,
        <ul className='list-disc ml-4'>
          {renderIngredients(recipe.RecipeID)}
        </ul>,
        <div className='flex gap-2'>
          <Button
            size="sm"
            variant="primary"
            outline={true}
            onClick={() => onAddIngredients(recipe.RecipeID)}
          >
            Add Ingredients
          </Button>
          <DeleteButton onClick={() => handleDelete(recipe.RecipeID)} />
        </div>
      ],
    })),
    [recipes, recipeIngredients, ingredients, units]
  );

  return (
    <div className="overflow-x-auto">
      <Table headers={headers} data={data} />
    </div>
  );
}

export default RecipeTable;


==================== C:\Code\recipe-app\client\src\components\ShoppingList.jsx ====================

// src/components/ShoppingList.jsx

import React from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';

function ShoppingList({ mealPlanId }) {
    const { getShoppingList } = useData();
    const shoppingList = getShoppingList(mealPlanId);

    const headers = ['Ingredient Name', 'Quantity', 'Unit'];

    const data = shoppingList.map((ingredient) => ({
        id: ingredient.IngredientID,
        cells: [
            ingredient.IngredientName,
            ingredient.Quantity,
            ingredient.unit ? ingredient.unit.UnitName : 'Unknown'
        ],
    }));

    return (
        <div className="overflow-x-auto">
            <Table headers={headers} data={data} />
        </div>
    );
}

export default ShoppingList;


==================== C:\Code\recipe-app\client\src\components\ShoppingListModal.jsx ====================

// src/components/ShoppingListModal.jsx

import React from 'react';
import Modal from './ui/Modal';

function ShoppingListModal({ shoppingList }) {
    return (
        <Modal id="shopping_list_modal" title="Generated Shopping List">
            {shoppingList ? (
                <ul className="list-disc ml-4">
                    {shoppingList.map((item, index) => (
                        <li key={index}>{item.Quantity} {item.UnitName} of {item.IngredientName}</li>
                    ))}
                </ul>
            ) : (
                <p>No items in the shopping list.</p>
            )}
        </Modal>
    );
}

export default ShoppingListModal;


==================== C:\Code\recipe-app\client\src\components\SideBar.jsx ====================

// src/components/SideBar.jsx

import React from "react";
import { NavLink } from "react-router-dom";
import { FaTachometerAlt, FaList, FaSitemap, FaLeaf, FaBook, FaUser, FaUtensils, FaCalendarAlt } from "react-icons/fa";

const menuItems = [
  { title: "Ingredients", isTitle: true },
  { title: "Categories", link: "/admin/manage-categories", Icon: FaList },
  { title: "Sub-categories", link: "/admin/manage-sub-categories", Icon: FaSitemap },
  { title: "Ingredients", link: "/admin/manage-ingredients", Icon: FaLeaf },
  { title: "Recipes", isTitle: true },
  { title: "Recipes", link: "/admin/manage-recipes", Icon: FaUtensils },
  { title: "Authors", link: "/admin/manage-authors", Icon: FaUser },
  { title: "Recipe books", link: "/admin/manage-recipe-books", Icon: FaBook },
  { title: "Meal Plans", link: "/admin/manage-meal-plans", Icon: FaCalendarAlt },
];

const MenuItem = ({ item }) => {
  if (item.isTitle) {
    return <li className="menu-title">{item.title}</li>;
  }

  const { Icon } = item;

  return (
    <li>
      <NavLink to={item.link} className={({ isActive }) => (isActive ? "active" : "")}>
        <Icon className="inline mr-2" />
        {item.title}
      </NavLink>
    </li>
  );
};

export default function SideBar() {
  return (
    <aside className="sticky top-0 overflow-y-auto w-60 bg-base-200 p-4 min-w-60">
      <ul className="menu px-0 gap-1">
        {menuItems.map((item, index) => (
          <MenuItem key={index} item={item} />
        ))}
      </ul>
    </aside>
  );
}


==================== C:\Code\recipe-app\client\src\components\SubCategoryTable.jsx ====================

// src/components/SubCategoryTable.jsx
import React, { useState, useMemo } from 'react';
import { useData } from '../context/DataContext';
import Table from './ui/Table';
import Button from './ui/Button';
import DeleteButton from './ui/DeleteButton';

function SubCategoryTable() {
  const [selectedCategories, setSelectedCategories] = useState([]);
  const { categories, subCategories, deleteSubCategory } = useData();

  const handleDelete = async (subCategoryId) => {
    if (window.confirm('Are you sure you want to delete this sub-category?')) {
      try {
        await deleteSubCategory(subCategoryId);
      } catch (error) {
        alert('Failed to delete sub-category');
      }
    }
  };

  const getCategoryName = (categoryId) => {
    const category = categories.find(category => category.CategoryID === categoryId);
    return category ? category.CategoryName : 'Unknown';
  };

  const handleCategoryChange = (e) => {
    const selectedValue = parseInt(e.target.value);
    setSelectedCategories(prevSelected =>
      prevSelected.includes(selectedValue)
        ? prevSelected.filter(id => id !== selectedValue)
        : [...prevSelected, selectedValue]
    );
  };

  const filteredSubCategories = useMemo(() => 
    selectedCategories.length > 0
      ? subCategories.filter(subCategory => selectedCategories.includes(subCategory.CategoryID))
      : subCategories,
    [subCategories, selectedCategories]
  );

  const headers = ['#', 'Sub-Category Name', 'Category Name', 'Actions'];

  const data = useMemo(() =>
    filteredSubCategories.map((subCategory, index) => ({
      id: subCategory.SubCategoryID,
      cells: [
        index + 1,
        subCategory.SubCategoryName,
        getCategoryName(subCategory.CategoryID),
        <DeleteButton key={subCategory.SubCategoryID} onClick={() => handleDelete(subCategory.SubCategoryID)} />
      ],
    })),
    [filteredSubCategories, categories]
  );

  return (
    <div className="overflow-x-auto">
      <div className="flex items-center mb-4">
        <label className="mr-2">Filter by Category:</label>
        <select
          className="select select-bordered"
          value=""
          onChange={handleCategoryChange}
        >
          <option value="" disabled>Select Categories</option>
          {categories.map(category => (
            <option
              key={category.CategoryID}
              value={category.CategoryID}
              disabled={selectedCategories.includes(category.CategoryID)}
            >
              {category.CategoryName}
            </option>
          ))}
        </select>
      </div>
      <div className="mb-4">
        {selectedCategories.map(categoryId => (
          <div key={categoryId} className="badge badge-primary mr-2">
            {getCategoryName(categoryId)}
            <button
              type="button"
              className="ml-1"
              onClick={() => setSelectedCategories(selectedCategories.filter(id => id !== categoryId))}
            >
              ✕
            </button>
          </div>
        ))}
      </div>
      <Table headers={headers} data={data} />
    </div>
  );
}

export default SubCategoryTable;


==================== C:\Code\recipe-app\client\src\components\ThemeSwitcher.jsx ====================

import React, { useEffect, useState } from 'react';

const ThemeSwitcher = () => {
  const [theme, setTheme] = useState('light');

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      document.documentElement.setAttribute('data-theme', savedTheme);
      setTheme(savedTheme);
    }
  }, []);

  const handleThemeChange = (event) => {
    const selectedTheme = event.target.value;
    document.documentElement.setAttribute('data-theme', selectedTheme);
    localStorage.setItem('theme', selectedTheme);
    setTheme(selectedTheme);
  };

  return (   
    <div className="dropdown dropdown-end">
      <select className="btn btn-ghost btn-sm" value={theme} onChange={handleThemeChange}>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
        <option value="cupcake">Cupcake</option>
        <option value="bumblebee">Bumblebee</option>
        <option value="emerald">Emerald</option>
        <option value="corporate">Corporate</option>
        <option value="synthwave">Synthwave</option>
        <option value="retro">Retro</option>
        <option value="cyberpunk">Cyberpunk</option>
        <option value="valentine">Valentine</option>
        <option value="halloween">Halloween</option>
        <option value="garden">Garden</option>
        <option value="forest">Forest</option>
        <option value="aqua">Aqua</option>
        <option value="lofi">Lofi</option>
        <option value="pastel">Pastel</option>
        <option value="fantasy">Fantasy</option>
        <option value="wireframe">Wireframe</option>
        <option value="black">Black</option>
        <option value="luxury">Luxury</option>
        <option value="dracula">Dracula</option>
        <option value="cmyk">CMYK</option>
        <option value="autumn">Autumn</option>
        <option value="business">Business</option>
        <option value="acid">Acid</option>
        <option value="lemonade">Lemonade</option>
        <option value="night">Night</option>
        <option value="coffee">Coffee</option>
        <option value="winter">Winter</option>
      </select>
    </div>
  );
};

export default ThemeSwitcher;


==================== C:\Code\recipe-app\client\src\components\ui\Button.jsx ====================

// src/components/ui/Button.jsx
import React from 'react';

const Button = ({ type, variant = 'primary', size = 'md', outline = false, block = false, circle = false, square = false, className = '', onClick, children }) => {
  const baseClass = 'btn';
  const variantClass = `btn-${variant}`;
  const sizeClass = `btn-${size}`;
  const outlineClass = outline ? 'btn-outline' : '';
  const blockClass = block ? 'btn-block' : '';
  const circleClass = circle ? 'btn-circle' : '';
  const squareClass = square ? 'btn-square' : '';

  const classes = `${baseClass} ${variantClass} ${sizeClass} ${outlineClass} ${blockClass} ${circleClass} ${squareClass} ${className}`;

  return (
    <button type={type} className={classes} onClick={onClick}>
      {children}
    </button>
  );
};

export default Button;


==================== C:\Code\recipe-app\client\src\components\ui\Card.jsx ====================

// src/components/ui/Card.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import Button from './Button';

const Card = ({ title, count, link, children }) => {
    return (
        <div className="card bg-base-100 w-96 shadow-xl">
            <div className="card-body">
                <h2 className="card-title">{title}</h2>
                {count && <p className="text-2xl font-bold">{count}</p>}
                {children}
                <div className="card-actions justify-end">
                    <Link to={link}>
                        <Button
                            variant='secondary'
                            outline={true}
                        >
                            Manage
                        </Button>
                    </Link>
                </div>
            </div>
        </div>
    );
};

export default Card;


==================== C:\Code\recipe-app\client\src\components\ui\DeleteButton.jsx ====================

// src/components/ui/DeleteButton.jsx
import React from 'react';
import Button from './Button';

const DeleteButton = ({ onClick }) => (
  <Button
    size="sm"
    variant="error"
    outline={true}
    onClick={onClick}
  >
    Delete
  </Button>
);

export default DeleteButton;


==================== C:\Code\recipe-app\client\src\components\ui\Modal.jsx ====================

import React from 'react';

const Modal = ({ id, title, children, wide }) => {
    const modalBoxClass = wide ? 'modal-box w-11/12 max-w-5xl' : 'modal-box';
    const modalClass = wide ? 'modal' : 'modal modal-bottom sm:modal-middle';

    return (
        <dialog id={id} className={modalClass}>
            <div className={modalBoxClass}>
                <form method="dialog">
                    <button className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                </form>
                <h3 className="font-bold text-lg">{title}</h3>
                {children}
            </div>
        </dialog>
    );
};

export default Modal;


==================== C:\Code\recipe-app\client\src\components\ui\Select.jsx ====================

// src/components/ui/Select.jsx
import React from 'react';

const Select = ({ label, value, onChange, required, options, defaultOption, disabled }) => {
  return (
    <label className="form-control">
      <div className="label">
        <span className="label-text">{label}</span>
      </div>
      <select
        className="select select-bordered"
        value={value}
        onChange={onChange}
        required={required}
        disabled={disabled}
      >
        <option value="" disabled>{defaultOption}</option>
        {options.map((option) => (
          <option key={option.value} value={option.value} disabled={option.disabled}>
            {option.label}
          </option>
        ))}
      </select>
    </label>
  );
};

export default Select;


==================== C:\Code\recipe-app\client\src\components\ui\Table.jsx ====================

// src/components/ui/Table.jsx
import React, { useState } from 'react';
import { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';

const Table = ({ headers, data }) => {
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'ascending' });

  const sortedData = React.useMemo(() => {
    let sortableData = [...data];
    if (sortConfig.key) {
      sortableData.sort((a, b) => {
        const aKey = a.cells[headers.indexOf(sortConfig.key)];
        const bKey = b.cells[headers.indexOf(sortConfig.key)];

        if (aKey < bKey) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aKey > bKey) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableData;
  }, [data, sortConfig, headers]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const getSortIcon = (header) => {
    if (sortConfig.key === header) {
      return sortConfig.direction === 'ascending' ? <FaSortUp /> : <FaSortDown />;
    }
    return <FaSort />;
  };

  return (
    <div className="overflow-x-auto">
      <table className="table table-zebra">
        <thead>
          <tr>
            {headers.map((header, index) => (
              <th key={index} onClick={() => requestSort(header)} className="cursor-pointer">
                <div className="flex items-center">
                  {header}
                  <span className="ml-2">{getSortIcon(header)}</span>
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row, rowIndex) => (
            <tr key={row.id || rowIndex}>
              {row.cells.map((cell, cellIndex) => (
                <td key={cellIndex}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Table;


==================== C:\Code\recipe-app\client\src\components\ui\TextInput.jsx ====================

import React from 'react';

const TextInput = ({ label, type = 'text', value, onChange, required = false, placeholder = '', className = 'input input-bordered', min, max }) => {
  return (
    <label className="form-control">
      {label && (
        <div className="label">
          <span className="label-text">{label}</span>
        </div>
      )}
      <input
        type={type}
        className={className}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
        min={min}
        max={max}
      />
    </label>
  );
};

export default TextInput;


==================== C:\Code\recipe-app\client\src\context\AuthContext.jsx ====================

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const storedAuth = localStorage.getItem('isAuthenticated');
    if (storedAuth === 'true') {
      setIsAuthenticated(true);
    }
    setLoading(false); // Indicate that the auth status has been checked
  }, []);

  const login = async (username, password) => {
    const response = await fetch('http://localhost:8000/api/users/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Password: password }),
    });

    if (response.ok) {
      setIsAuthenticated(true);
      localStorage.setItem('isAuthenticated', 'true');
      navigate('/');
    } else {
      alert('Login failed');
    }
  };

  const logout = () => {
    setIsAuthenticated(false);
    localStorage.removeItem('isAuthenticated');
    navigate('/login');
  };

  if (loading) {
    return <div>Loading...</div>; // Display a loading message or spinner while checking auth status
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


==================== C:\Code\recipe-app\client\src\context\DataContext.jsx ====================

import React, { createContext, useContext, useEffect, useState } from 'react';
import * as apiService from '../services/apiService';

const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [authors, setAuthors] = useState([]);
  const [recipeBooks, setRecipeBooks] = useState([]);
  const [recipes, setRecipes] = useState([]);
  const [units, setUnits] = useState([]);
  const [recipeIngredients, setRecipeIngredients] = useState([]);
  const [mealPlans, setMealPlans] = useState([]);
  const [mealPlanRecipes, setMealPlanRecipes] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [
          categoriesData,
          subCategoriesData,
          ingredientsData,
          authorsData,
          recipeBooksData,
          recipesData,
          unitsData,
          recipeIngredientsData,
          mealPlansData,
          mealPlanRecipesData,
        ] = await Promise.all([
          apiService.getCategories(),
          apiService.getSubCategories(),
          apiService.getIngredients(),
          apiService.getAuthors(),
          apiService.getRecipeBooks(),
          apiService.getRecipes(),
          apiService.getUnits(),
          apiService.getRecipeIngredients(),
          apiService.getMealPlans(),
          apiService.getMealPlanRecipes(),
        ]);

        setCategories(categoriesData);
        setSubCategories(subCategoriesData);
        setIngredients(ingredientsData);
        setAuthors(authorsData);
        setRecipeBooks(recipeBooksData);
        setRecipes(recipesData);
        setUnits(unitsData);
        setRecipeIngredients(recipeIngredientsData);
        setMealPlans(mealPlansData);
        setMealPlanRecipes(mealPlanRecipesData);
      } catch (error) {
        console.error(error);
      }
    };

    fetchData();
  }, []);

  // Categories CRUD
  const createCategory = async (categoryName) => {
    try {
      const newCategory = await apiService.addCategory(categoryName);
      setCategories([...categories, newCategory]);
    } catch (error) {
      console.error('Error adding category:', error);
    }
  };

  const updateCategory = async (categoryId, categoryName) => {
    try {
      const updatedCategory = await apiService.updateCategory(categoryId, categoryName);
      setCategories(categories.map(cat => (cat.CategoryID === categoryId ? updatedCategory : cat)));
    } catch (error) {
      console.error('Error updating category:', error);
    }
  };

  const deleteCategory = async (categoryId) => {
    try {
      await apiService.deleteCategory(categoryId);
      setCategories(categories.filter(cat => cat.CategoryID !== categoryId));
    } catch (error) {
      console.error('Error deleting category:', error);
    }
  };

  // SubCategories CRUD
  const createSubCategory = async (subCategory) => {
    try {
      const newSubCategory = await apiService.addSubCategory(subCategory);
      setSubCategories([...subCategories, newSubCategory]);
    } catch (error) {
      console.error('Error adding subcategory:', error);
    }
  };

  const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    try {
      const updatedSubCategory = await apiService.updateSubCategory(subCategoryId, subCategoryName, categoryId);
      setSubCategories(subCategories.map(sub => (sub.SubCategoryID === subCategoryId ? updatedSubCategory : sub)));
    } catch (error) {
      console.error('Error updating subcategory:', error);
    }
  };

  const deleteSubCategory = async (subCategoryId) => {
    try {
      await apiService.deleteSubCategory(subCategoryId);
      setSubCategories(subCategories.filter(sub => sub.SubCategoryID !== subCategoryId));
    } catch (error) {
      console.error('Error deleting subcategory:', error);
    }
  };

  // Ingredients CRUD
  const createIngredient = async (ingredient) => {
    try {
      const newIngredient = await apiService.addIngredient(ingredient);
      setIngredients([...ingredients, newIngredient]);
    } catch (error) {
      console.error('Error adding ingredient:', error);
    }
  };

  const updateIngredient = async (ingredientId, ingredient) => {
    try {
      const updatedIngredient = await apiService.updateIngredient(ingredientId, ingredient);
      setIngredients(ingredients.map(ing => (ing.IngredientID === ingredientId ? updatedIngredient : ing)));
    } catch (error) {
      console.error('Error updating ingredient:', error);
    }
  };

  const deleteIngredient = async (ingredientId) => {
    try {
      await apiService.deleteIngredient(ingredientId);
      setIngredients(ingredients.filter(ing => ing.IngredientID !== ingredientId));
    } catch (error) {
      console.error('Error deleting ingredient:', error);
    }
  };

  // Authors CRUD
  const createAuthor = async (authorName, authorImageURL) => {
    try {
      const newAuthor = await apiService.addAuthor(authorName, authorImageURL);
      setAuthors([...authors, newAuthor]);
    } catch (error) {
      console.error('Error adding author:', error);
    }
  };

  const updateAuthor = async (authorId, author) => {
    try {
      const updatedAuthor = await apiService.updateAuthor(authorId, author);
      setAuthors(authors.map(auth => (auth.AuthorID === authorId ? updatedAuthor : auth)));
    } catch (error) {
      console.error('Error updating author:', error);
    }
  };

  const deleteAuthor = async (authorId) => {
    try {
      await apiService.deleteAuthor(authorId);
      setAuthors(authors.filter(auth => auth.AuthorID !== authorId));
    } catch (error) {
      console.error('Error deleting author:', error);
    }
  };

  // Recipe Books CRUD
  const createRecipeBook = async (recipeBook) => {
    try {
      const newRecipeBook = await apiService.addRecipeBook(recipeBook);
      setRecipeBooks([...recipeBooks, newRecipeBook]);
    } catch (error) {
      console.error('Error adding recipe book:', error);
    }
  };

  const updateRecipeBook = async (recipeBookId, recipeBook) => {
    try {
      const updatedRecipeBook = await apiService.updateRecipeBook(recipeBookId, recipeBook);
      setRecipeBooks(recipeBooks.map(book => (book.BookID === recipeBookId ? updatedRecipeBook : book)));
    } catch (error) {
      console.error('Error updating recipe book:', error);
    }
  };

  const deleteRecipeBook = async (recipeBookId) => {
    try {
      await apiService.deleteRecipeBook(recipeBookId);
      setRecipeBooks(recipeBooks.filter(book => book.BookID !== recipeBookId));
    } catch (error) {
      console.error('Error deleting recipe book:', error);
    }
  };

  // Recipes CRUD
  const createRecipe = async (recipe) => {
    try {
      const newRecipe = await apiService.addRecipe(recipe);
      setRecipes([...recipes, newRecipe]);
    } catch (error) {
      console.error('Error adding recipe:', error);
      throw error; // Ensure to rethrow the error to be caught in the component
    }
  };

  const updateRecipe = async (recipeId, recipe) => {
    try {
      const updatedRecipe = await apiService.updateRecipe(recipeId, recipe);
      setRecipes(recipes.map(rec => (rec.RecipeID === recipeId ? updatedRecipe : rec)));
    } catch (error) {
      console.error('Error updating recipe:', error);
    }
  };

  const deleteRecipe = async (recipeId) => {
    try {
      await apiService.deleteRecipe(recipeId);
      setRecipes(recipes.filter(rec => rec.RecipeID !== recipeId));
    } catch (error) {
      console.error('Error deleting recipe:', error);
    }
  };

  const createRecipeIngredient = async (recipeIngredient) => {
    try {
      const newRecipeIngredient = await apiService.addRecipeIngredient(recipeIngredient);
      setRecipeIngredients([...recipeIngredients, newRecipeIngredient]);
    } catch (error) {
      console.error('Error adding recipe ingredient:', error);
    }
  };

  // Meal Plans CRUD
  const createMealPlan = async (mealPlan) => {
    try {
      const newMealPlan = await apiService.addMealPlan(mealPlan);
      setMealPlans([...mealPlans, newMealPlan]);
    } catch (error) {
      console.error('Error adding meal plan:', error);
    }
  };

  const updateMealPlan = async (mealPlanId, mealPlan) => {
    try {
      const updatedMealPlan = await apiService.updateMealPlan(mealPlanId, mealPlan);
      setMealPlans(mealPlans.map(mp => (mp.MealPlanID === mealPlanId ? updatedMealPlan : mp)));
    } catch (error) {
      console.error('Error updating meal plan:', error);
    }
  };

  const deleteMealPlan = async (mealPlanId) => {
    try {
      await apiService.deleteMealPlan(mealPlanId);
      setMealPlans(mealPlans.filter(mp => mp.MealPlanID !== mealPlanId));
    } catch (error) {
      console.error('Error deleting meal plan:', error);
    }
  };

  // Meal Plan Recipes CRUD
  const createMealPlanRecipe = async (mealPlanRecipe) => {
    try {
      const newMealPlanRecipe = await apiService.addMealPlanRecipe(mealPlanRecipe);
      setMealPlanRecipes([...mealPlanRecipes, newMealPlanRecipe]);
    } catch (error) {
      console.error('Error adding meal plan recipe:', error);
    }
  };

  const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    try {
      const updatedMealPlanRecipe = await apiService.updateMealPlanRecipe(mealPlanRecipeId, mealPlanRecipe);
      setMealPlanRecipes(prev => prev.map(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId ? updatedMealPlanRecipe : mpr));
    } catch (error) {
      console.error('Error updating meal plan recipe:', error);
    }
  };

  const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    try {
      await apiService.deleteMealPlanRecipe(mealPlanRecipeId);
      setMealPlanRecipes(mealPlanRecipes.filter(mpr => mpr.MealPlanRecipeID !== mealPlanRecipeId));
    } catch (error) {
      console.error('Error deleting meal plan recipe:', error);
    }
  };

  const getShoppingList = (mealPlanId) => {
    const filteredMealPlanRecipes = mealPlanRecipes.filter(mpr => mpr.MealPlanID === mealPlanId);

    const ingredientMap = new Map();

    filteredMealPlanRecipes.forEach(mpr => {
      const recipeId = mpr.RecipeID;
      const recipeIngredientsForRecipe = recipeIngredients.filter(ri => ri.RecipeID === recipeId);

      recipeIngredientsForRecipe.forEach(ri => {
        const ingredient = ingredients.find(ing => ing.IngredientID === ri.IngredientID);
        const unit = units.find(unit => unit.UnitID === ri.UnitID);
        if (ingredient) {
          const existing = ingredientMap.get(ingredient.IngredientID);
          if (existing) {
            existing.Quantity += ri.Quantity;
          } else {
            ingredientMap.set(ingredient.IngredientID, {
              ...ingredient,
              Quantity: ri.Quantity,
              unit: unit || { UnitName: 'Unknown' }
            });
          }
        }
      });
    });

    return Array.from(ingredientMap.values());
  };

  return (
    <DataContext.Provider
      value={{
        categories, createCategory, updateCategory, deleteCategory,
        subCategories, createSubCategory, updateSubCategory, deleteSubCategory,
        ingredients, createIngredient, updateIngredient, deleteIngredient,
        authors, createAuthor, updateAuthor, deleteAuthor,
        recipeBooks, createRecipeBook, updateRecipeBook, deleteRecipeBook,
        recipes, createRecipe, updateRecipe, deleteRecipe,
        units, recipeIngredients, createRecipeIngredient,
        mealPlans, createMealPlan, updateMealPlan, deleteMealPlan,
        mealPlanRecipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe,
        getShoppingList,
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => useContext(DataContext);


==================== C:\Code\recipe-app\client\src\pages\Dashboard.jsx ====================

// src/pages/Home.jsx
import React from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';

function Dashboard() {
  const { categories, subCategories, ingredients, authors, recipeBooks, recipes } = useData();

  const items = [
    { name: 'Categories', count: categories.length, link: '/manage-categories' },
    { name: 'Subcategories', count: subCategories.length, link: '/manage-sub-categories' },
    { name: 'Ingredients', count: ingredients.length, link: '/manage-ingredients' },
    { name: 'Authors', count: authors.length, link: '/manage-authors' },
    { name: 'Recipe Books', count: recipeBooks.length, link: '/manage-recipe-books' },
    { name: 'Recipes', count: recipes.length, link: '/manage-recipes' },
  ];

  return (
    <div className="flex flex-wrap gap-4 p-6">
      {items.map((item, index) => (
        <Card key={index} title={item.name} count={item.count} link={item.link} />
      ))}
    </div>
  );
}

export default Dashboard;


==================== C:\Code\recipe-app\client\src\pages\Home.jsx ====================

import React, { useState } from 'react';
import { useData } from '../context/DataContext';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import AddMealPlanModal from '../components/AddMealPlanModal';
import { format, isWithinInterval, parseISO, startOfWeek, endOfWeek, isFuture, isPast } from 'date-fns';
import { Link } from 'react-router-dom';

const Home = () => {
  const { mealPlans } = useData();
  const [isModalOpen, setIsModalOpen] = useState(false);

  const categorizeMealPlans = (mealPlans) => {
    const now = new Date();
    const currentWeekStart = startOfWeek(now, { weekStartsOn: 1 });
    const currentWeekEnd = endOfWeek(now, { weekStartsOn: 1 });

    const currentWeekPlans = mealPlans.filter(plan =>
      isWithinInterval(parseISO(plan.StartDate), { start: currentWeekStart, end: currentWeekEnd }) ||
      isWithinInterval(parseISO(plan.EndDate), { start: currentWeekStart, end: currentWeekEnd })
    );

    const upcomingPlans = mealPlans.filter(plan =>
      isFuture(parseISO(plan.StartDate)) && !currentWeekPlans.includes(plan)
    );

    const previousPlans = mealPlans.filter(plan =>
      isPast(parseISO(plan.EndDate)) && !currentWeekPlans.includes(plan)
    );

    return { currentWeekPlans, upcomingPlans, previousPlans };
  };

  const { currentWeekPlans, upcomingPlans, previousPlans } = categorizeMealPlans(mealPlans);

  const renderMealPlanCard = (plan) => (
    <Link to={`/meal-plan/${plan.MealPlanID}`} key={plan.MealPlanID}>
      <Card title={plan.PlanName} count={1}>
        <p>Start: {format(parseISO(plan.StartDate), 'yyyy-MM-dd')}</p>
        <p>End: {format(parseISO(plan.EndDate), 'yyyy-MM-dd')}</p>
      </Card>
    </Link>
  );

  const openModal = () => {
    setIsModalOpen(true);
    document.getElementById('add_meal_plan_modal').showModal();
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Current Week</h1>
      {currentWeekPlans.length > 0 ? (
        <div className="flex flex-wrap gap-4 mb-8">
          {currentWeekPlans.map(renderMealPlanCard)}
        </div>
      ) : (
        <div className="mb-8">
          <p>No current meal plans for this week.</p>
          <Button onClick={openModal}>Add Meal Plan</Button>
        </div>
      )}

      <h2 className="text-xl font-bold mb-4">Upcoming Meal Plans</h2>
      <div className="flex flex-wrap gap-4 mb-8">
        {upcomingPlans.map(renderMealPlanCard)}
      </div>

      <h2 className="text-xl font-bold mb-4">Previous Meal Plans</h2>
      <div className="flex flex-wrap gap-4 mb-8">
        {previousPlans.map(renderMealPlanCard)}
      </div>

      {isModalOpen && <AddMealPlanModal />}
    </div>
  );
};

export default Home;


==================== C:\Code\recipe-app\client\src\pages\Login.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import TextInput from '../components/ui/TextInput';
import Button from '../components/ui/Button';

function Login() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const { login } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        await login(username, password);
    };

    return (
        <div className="flex items-start p-8 justify-center w-full">
            <div className="flex flex-col w-96 rounded-box bg-base-200 p-6 gap-4">
                <h1 className="text-3xl font-bold self-center">Log in</h1>
                {/* <span className="self-center flex gap-2">
                    Don't have an account?
                    <a className="link link-secondary" onClick={() => navigate('/register')}>Register</a>
                </span>
                <a className="btn btn-neutral">
                    <i className="fa-brands fa-google text-primary"></i>
                    Log in with Google
                </a>
                <div className="divider">OR</div> */}
                <form onSubmit={handleSubmit} className='flex gap-4 flex-col'>
                    <TextInput
                        label="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                    />
                    <label className="form-control w-full">
                        <div className="label">
                            <span className="label-text">Password</span>
                            <a className="label-text link link-accent">Forgot password?</a>
                        </div>
                        <TextInput
                            type="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            required
                        />
                    </label>
                    <div className="form-control">
                        <label className="cursor-pointer label self-start gap-2">
                            <input type="checkbox" className="checkbox" />
                            <span className="label-text">Remember me</span>
                        </label>
                    </div>
                    <Button type="submit">Log in</Button>
                </form>
            </div>
        </div>
    );
}

export default Login;


==================== C:\Code\recipe-app\client\src\pages\ManageAuthors.jsx ====================

// src/pages/ManageAuthors.jsx
import React from 'react';
import AuthorTable from '../components/AuthorTable';
import AddAuthorModal from '../components/AddAuthorModal';

function ManageAuthors() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Authors</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_author_modal').showModal()}>Add Author</button>
      </div>
      <AuthorTable />
      <AddAuthorModal />
    </div>
  );
}

export default ManageAuthors;


==================== C:\Code\recipe-app\client\src\pages\ManageCategories.jsx ====================

// src/pages/ManageCategories.jsx
import React from 'react';
import CategoryTable from '../components/CategoryTable';
import AddCategoryModal from '../components/AddCategoryModal';

function ManageCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_category_modal').showModal()}>Add Category</button>
      </div>
      <CategoryTable />
      <AddCategoryModal />
    </div>
  );
}

export default ManageCategories;


==================== C:\Code\recipe-app\client\src\pages\ManageIngredients.jsx ====================

// src/pages/ManageIngredients.jsx
import React from 'react';
import IngredientTable from '../components/IngredientTable';
import AddIngredientModal from '../components/AddIngredientModal';

function ManageIngredients() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Ingredients</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_ingredient_modal').showModal()}>Add Ingredient</button>
      </div>
      <IngredientTable />
      <AddIngredientModal />
    </div>
  );
}

export default ManageIngredients;


==================== C:\Code\recipe-app\client\src\pages\ManageMealPlans.jsx ====================

// src/pages/ManageMealPlans.jsx

import React, { useState } from 'react';
import MealPlanTable from '../components/MealPlanTable';
import AddMealPlanModal from '../components/AddMealPlanModal';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';
import Calendar from '../components/Calendar';
import ShoppingList from '../components/ShoppingList';
import { useData } from '../context/DataContext';

function ManageMealPlans() {
  const [selectedMealPlan, setSelectedMealPlan] = useState(null);
  const [addingMeal, setAddingMeal] = useState(null);
  const [modifyingMeal, setModifyingMeal] = useState(null);
  const { mealPlanRecipes, recipes, deleteMealPlanRecipe } = useData();

  const handleAddMeals = (mealPlan) => {
    setSelectedMealPlan(mealPlan);
  };

  const handleAddMeal = (date, mealType) => {
    setAddingMeal({ date, mealType });
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = async (mealPlanRecipeId, remove = false) => {
    if (remove) {
      if (window.confirm('Are you sure you want to remove this meal?')) {
        try {
          await deleteMealPlanRecipe(mealPlanRecipeId);
        } catch (error) {
          console.log(error);
          alert('Failed to remove meal');
        }
      }
    } else {
      const mealPlanRecipe = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
      if (mealPlanRecipe) {
        setModifyingMeal(mealPlanRecipe);
        setAddingMeal({
          date: mealPlanRecipe.Date,
          mealType: mealPlanRecipe.MealType,
          recipeId: mealPlanRecipe.RecipeID,
          mealPlanRecipeId: mealPlanRecipeId
        });
        document.getElementById('add_meal_plan_recipe_modal').showModal();
      } else {
        console.error('Meal plan recipe not found:', mealPlanRecipeId);
      }
    }
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Meal Plans</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_meal_plan_modal').showModal()}>Add Meal Plan</button>
      </div>
      <MealPlanTable onManageMeals={handleAddMeals} />
      {selectedMealPlan && (
        <>
          <h2 className="text-2xl font-bold mt-6">Meals for Selected Plan</h2>
          <Calendar
            mealPlan={selectedMealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === selectedMealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
          />
          <h2 className="text-2xl font-bold mt-6">Shopping List</h2>
          <ShoppingList mealPlanId={selectedMealPlan.MealPlanID} />
        </>
      )}
      <AddMealPlanModal />
      {selectedMealPlan && (
        <AddMealPlanRecipeModal
          mealPlanId={selectedMealPlan.MealPlanID}
          startDate={selectedMealPlan.StartDate}
          endDate={selectedMealPlan.EndDate}
          defaultDate={addingMeal?.date}
          defaultMealType={addingMeal?.mealType}
          defaultRecipeId={addingMeal?.recipeId}
          mealPlanRecipeId={addingMeal?.mealPlanRecipeId}
        />
      )}
    </div>
  );
}

export default ManageMealPlans;


==================== C:\Code\recipe-app\client\src\pages\ManageRecipeBooks.jsx ====================

// src/pages/ManageRecipeBooks.jsx
import React from 'react';
import RecipeBookTable from '../components/RecipeBookTable';
import AddRecipeBookModal from '../components/AddRecipeBookModal';

function ManageRecipeBooks() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipe Books</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_recipe_book_modal').showModal()}>Add Recipe Book</button>
      </div>
      <RecipeBookTable />
      <AddRecipeBookModal />
    </div>
  );
}

export default ManageRecipeBooks;


==================== C:\Code\recipe-app\client\src\pages\ManageRecipes.jsx ====================

// src/pages/ManageRecipes.jsx
import React, { useState } from 'react';
import RecipeTable from '../components/RecipeTable';
import AddRecipeModal from '../components/AddRecipeModal';
import AddRecipeIngredientModal from '../components/AddRecipeIngredientModal';
import Button from '../components/ui/Button';

function ManageRecipes() {
  const [selectedRecipeId, setSelectedRecipeId] = useState(null);

  const handleAddIngredients = (recipeId) => {
    setSelectedRecipeId(recipeId);
    document.getElementById('add_recipe_ingredient_modal').showModal();
  };

  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Recipes</h1>
      <div>
        <Button
          size='sm'
          variant='secondary'
          outline={true}
          onClick={() => document.getElementById('add_recipe_modal').showModal()}
        >
          Add Recipe
        </Button>       
      </div>
      <RecipeTable onAddIngredients={handleAddIngredients} />
      <AddRecipeModal />
      <AddRecipeIngredientModal recipeId={selectedRecipeId} />
    </div>
  );
}

export default ManageRecipes;


==================== C:\Code\recipe-app\client\src\pages\ManageSubCategories.jsx ====================

// src/pages/ManageSubCategories.jsx
import React from 'react';
import SubCategoryTable from '../components/SubCategoryTable';
import AddSubCategoryModal from '../components/AddSubCategoryModal';

function ManageSubCategories() {
  return (
    <div className="flex flex-col p-6 gap-4">
      <h1 className="text-3xl font-bold">Manage Sub-Categories</h1>
      <div>
        <button className="btn btn-sm btn-secondary btn-outline" onClick={() => document.getElementById('add_sub_category_modal').showModal()}>Add Sub-Category</button>
      </div>
      <SubCategoryTable />
      <AddSubCategoryModal />
    </div>
  );
}

export default ManageSubCategories;


==================== C:\Code\recipe-app\client\src\pages\MealPlanDetails.jsx ====================

import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { useData } from '../context/DataContext';
import Calendar from '../components/Calendar';
import Button from '../components/ui/Button';
import AddMealPlanRecipeModal from '../components/AddMealPlanRecipeModal';

const MealPlanDetails = () => {
  const { mealPlanId } = useParams();
  const { mealPlans, mealPlanRecipes, recipes, createMealPlanRecipe, updateMealPlanRecipe, deleteMealPlanRecipe } = useData();
  const mealPlan = mealPlans.find(mp => mp.MealPlanID === parseInt(mealPlanId));
  const [selectedMeal, setSelectedMeal] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleAddMeal = (date, mealType) => {
    setSelectedMeal({ date, mealType, mealPlanRecipeId: null });
    setIsModalOpen(true);
    document.getElementById('add_meal_plan_recipe_modal').showModal();
  };

  const handleModifyMeal = (mealPlanRecipeId) => {
    const meal = mealPlanRecipes.find(mpr => mpr.MealPlanRecipeID === mealPlanRecipeId);
    if (meal) {
      setSelectedMeal({
        date: meal.Date,
        mealType: meal.MealType,
        recipeId: meal.RecipeID,
        mealPlanRecipeId: meal.MealPlanRecipeID,
      });
      setIsModalOpen(true);
      document.getElementById('add_meal_plan_recipe_modal').showModal();
    }
  };

  const handleSaveMeal = async (mealPlanRecipe) => {
    if (selectedMeal.mealPlanRecipeId) {
      await updateMealPlanRecipe(selectedMeal.mealPlanRecipeId, mealPlanRecipe);
    } else {
      await createMealPlanRecipe(mealPlanRecipe);
    }
    setIsModalOpen(false);
  };

  const handleRemoveMeal = async (mealPlanRecipeId) => {
    if (window.confirm('Are you sure you want to remove this meal?')) {
      await deleteMealPlanRecipe(mealPlanRecipeId);
    }
  };

  return (
    <div className="p-6">
      {mealPlan ? (
        <>
          <h1 className="text-2xl font-bold mb-4">{mealPlan.PlanName}</h1>
          <Calendar
            mealPlan={mealPlan}
            mealPlanRecipes={mealPlanRecipes.filter(mpr => mpr.MealPlanID === mealPlan.MealPlanID)}
            recipes={recipes}
            onAddMeal={handleAddMeal}
            onModifyMeal={handleModifyMeal}
            onRemoveMeal={handleRemoveMeal}
          />

          <AddMealPlanRecipeModal
            mealPlanId={mealPlan.MealPlanID}
            defaultDate={selectedMeal?.date}
            defaultMealType={selectedMeal?.mealType}
            defaultRecipeId={selectedMeal?.recipeId}
            mealPlanRecipeId={selectedMeal?.mealPlanRecipeId}
            onSave={handleSaveMeal}
          />
        </>
      ) : (
        <p>Meal plan not found.</p>
      )}
    </div>
  );
};

export default MealPlanDetails;


==================== C:\Code\recipe-app\client\src\pages\Register.jsx ====================

import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';

function Register() {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await fetch('http://localhost:8000/api/users/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ Username: username, Email: email, Password: password }),
    });

    if (response.ok) {
      await login(username, password);
    } else {
      alert('Registration failed');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="p-8 bg-white rounded shadow-md w-96">
        <h2 className="mb-4 text-2xl font-bold text-center">Register</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="block mb-1">Username</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <div className="mb-4">
            <label className="block mb-1">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              required
            />
          </div>
          <button type="submit" className="w-full py-2 text-white bg-green-500 rounded hover:bg-green-600">
            Register
          </button>
        </form>
      </div>
    </div>
  );
}

export default Register;


==================== C:\Code\recipe-app\client\src\services\apiService.js ====================

import { supabase } from '../supabaseClient';

// Categories
export const getCategories = async () => {
    const { data, error } = await supabase.from('IngredientCategories').select('*');
    if (error) throw error;
    return data;
};

export const addCategory = async (categoryName) => {
    const { data, error } = await supabase
        .from('IngredientCategories')
        .insert([{ CategoryName: categoryName }])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateCategory = async (categoryId, categoryName) => {
    const { data, error } = await supabase
        .from('IngredientCategories')
        .update({ CategoryName: categoryName })
        .eq('CategoryID', categoryId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteCategory = async (categoryId) => {
    const { data, error } = await supabase.from('IngredientCategories').delete().eq('CategoryID', categoryId).select();
    if (error) throw error;
    return data;
};

// SubCategories
export const getSubCategories = async () => {
    const { data, error } = await supabase.from('IngredientSubCategories').select('*');
    if (error) throw error;
    return data;
};

export const addSubCategory = async (subCategory) => {
    const { data, error } = await supabase
        .from('IngredientSubCategories')
        .insert([subCategory])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateSubCategory = async (subCategoryId, subCategoryName, categoryId) => {
    const { data, error } = await supabase
        .from('IngredientSubCategories')
        .update({ SubCategoryName: subCategoryName, CategoryID: categoryId })
        .eq('SubCategoryID', subCategoryId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteSubCategory = async (subCategoryId) => {
    const { data, error } = await supabase.from('IngredientSubCategories').delete().eq('SubCategoryID', subCategoryId).select();
    if (error) throw error;
    return data;
};

// Ingredients
export const getIngredients = async () => {
    const { data, error } = await supabase.from('Ingredients').select('*');
    if (error) throw error;
    return data;
};

export const addIngredient = async (ingredient) => {
    const { data, error } = await supabase
        .from('Ingredients')
        .insert([ingredient])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateIngredient = async (ingredientId, ingredient) => {
    const { data, error } = await supabase
        .from('Ingredients')
        .update(ingredient)
        .eq('IngredientID', ingredientId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteIngredient = async (ingredientId) => {
    const { data, error } = await supabase.from('Ingredients').delete().eq('IngredientID', ingredientId).select();
    if (error) throw error;
    return data;
};

// Authors
export const getAuthors = async () => {
    const { data, error } = await supabase.from('RecipeAuthors').select('*');
    if (error) throw error;
    return data;
};

export const addAuthor = async (authorName, authorImageURL) => {
    const { data, error } = await supabase
        .from('RecipeAuthors')
        .insert([{ AuthorName: authorName, AuthorImageURL: authorImageURL }])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateAuthor = async (authorId, author) => {
    const { data, error } = await supabase
        .from('RecipeAuthors')
        .update(author)
        .eq('AuthorID', authorId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteAuthor = async (authorId) => {
    const { data, error } = await supabase.from('RecipeAuthors').delete().eq('AuthorID', authorId).select();
    if (error) throw error;
    return data;
};

// Recipe Books
export const getRecipeBooks = async () => {
    const { data, error } = await supabase.from('RecipeBooks').select('*');
    if (error) throw error;
    return data;
};

export const addRecipeBook = async (recipeBook) => {
    const { data, error } = await supabase
        .from('RecipeBooks')
        .insert([recipeBook])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateRecipeBook = async (recipeBookId, recipeBook) => {
    const { data, error } = await supabase
        .from('RecipeBooks')
        .update(recipeBook)
        .eq('BookID', recipeBookId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteRecipeBook = async (recipeBookId) => {
    const { data, error } = await supabase.from('RecipeBooks').delete().eq('BookID', recipeBookId).select();
    if (error) throw error;
    return data;
};

// Recipes
export const getRecipes = async () => {
    const { data, error } = await supabase.from('Recipes').select('*');
    if (error) throw error;
    return data;
};

export const addRecipe = async (recipe) => {
    console.log('Inserting recipe:', recipe);
    const { data, error } = await supabase
        .from('Recipes')
        .insert([recipe])
        .select(); // Ensure to select the inserted rows
    console.log('Supabase insert response:', { data, error });
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateRecipe = async (recipeId, recipe) => {
    const { data, error } = await supabase
        .from('Recipes')
        .update(recipe)
        .eq('RecipeID', recipeId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteRecipe = async (recipeId) => {
    const { data, error } = await supabase.from('Recipes').delete().eq('RecipeID', recipeId).select();
    if (error) throw error;
    return data;
};

// Units
export const getUnits = async () => {
    const { data, error } = await supabase.from('Units').select('*');
    if (error) throw error;
    return data;
};

// Recipe Ingredients
export const getRecipeIngredients = async () => {
    const { data, error } = await supabase.from('RecipeIngredients').select('*');
    if (error) throw error;
    return data;
};

export const addRecipeIngredient = async (recipeIngredient) => {
    const { data, error } = await supabase
        .from('RecipeIngredients')
        .insert([recipeIngredient])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

// Meal Plans
export const getMealPlans = async () => {
    const { data, error } = await supabase.from('MealPlans').select('*');
    if (error) throw error;
    return data;
};

export const addMealPlan = async (mealPlan) => {
    console.log('Inserting meal plan:', mealPlan);
    const { data, error } = await supabase
        .from('MealPlans')
        .insert([mealPlan])
        .select(); // Ensure to select the inserted rows
    console.log('Supabase insert response:', { data, error });
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateMealPlan = async (mealPlanId, mealPlan) => {
    const { data, error } = await supabase
        .from('MealPlans')
        .update(mealPlan)
        .eq('MealPlanID', mealPlanId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteMealPlan = async (mealPlanId) => {
    const { data, error } = await supabase.from('MealPlans')
        .delete()
        .eq('MealPlanID', mealPlanId)
        .select();
    if (error) throw error;
    return data;
};

// Meal Plan Recipes
export const getMealPlanRecipes = async () => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .select('*');
    if (error) throw error;
    return data;
};

export const addMealPlanRecipe = async (mealPlanRecipe) => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .insert([mealPlanRecipe])
        .select(); // Ensure to select the inserted rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from insert operation');
    }
    return data[0];
};

export const updateMealPlanRecipe = async (mealPlanRecipeId, mealPlanRecipe) => {
    const { data, error } = await supabase
        .from('MealPlanRecipes')
        .update(mealPlanRecipe)
        .eq('MealPlanRecipeID', mealPlanRecipeId)
        .select(); // Ensure to select the updated rows
    if (error) throw error;
    if (!data || data.length === 0) {
        throw new Error('No data returned from update operation');
    }
    return data[0];
};

export const deleteMealPlanRecipe = async (mealPlanRecipeId) => {
    const { data, error } = await supabase.from('MealPlanRecipes').delete().eq('MealPlanRecipeID', mealPlanRecipeId).select();
    if (error) throw error;
    return data;
};


==================== C:\Code\recipe-app\client\src\utils\cache.js ====================

// src/utils/cache.js

class Cache {
    constructor() {
      this.cache = {};
    }
  
    set(key, data) {
      this.cache[key] = {
        data,
        timestamp: new Date().getTime(),
      };
    }
  
    get(key, expiryTime = 180000) { // default expiry time is 180 seconds
      const cachedItem = this.cache[key];
      if (cachedItem && (new Date().getTime() - cachedItem.timestamp < expiryTime)) {
        return cachedItem.data;
      }
      return null;
    }
  
    invalidate(key) {
      delete this.cache[key];
    }
  }
  
  const cache = new Cache();
  export default cache;
  

==================== C:\Code\recipe-app\frontend\.eslintrc.cjs ====================

module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}


==================== C:\Code\recipe-app\frontend\index.html ====================

<!doctype html>
<html lang="en" data-theme="cupcake">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


==================== C:\Code\recipe-app\frontend\postcss.config.js ====================

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


==================== C:\Code\recipe-app\frontend\public.zip ====================

PK    [áXÀà.  6  
   .eslintrc.cjsQ»nÃ0ÜûÜ´ÄN©0Ð©èÜE¢b34(:ù÷ÒRÒZ  ÇÃÝ±ãfXâ¡gÑ÷pºf­@eÀUH»
N°ÞGK0ÎgóY®àpEjboV 8¡%­kî:`ã&yÒaÕM|­Óÿæx(d m;ük^¬·ñËûø´+bÁg¯B£0×´QÝ\ÅI]Öè¸÷bözmyÄ ëÎ¿¢D«+pÁ+¦ÝÈÔørìÑº]Ïå "ª¶´JËIÛøÙ}2ÜÞsCfl¶4eKÁ¸ÎZÄHGl÷+âB½¬PEð´uÆÊËå5DS¦p,ò]Ë¦gBÒè®ç1üÞ]vÁúxÿ`æÕ>¦Åïç½djÿóÍPK    [áX¤ªõÉ   ý   
   .gitignoreeM;Â0Ý} nÀ[BcªT©]ÙiÛ!!XÞO~Ï9ó *XWhÚ×e¨ÎÂÓýyayûùç>¡ÿ8àeâ°$TQó­ªl{ s
1³û""ªñÌ-Ö[µ/+{»ÄGFÒÈ¤nT&p1 wì.]©cÖR^ÕVuk¨âý /PK    hlâX*· ó   ~  
   index.htmlEËRÃ0E÷ý
¡mI;qý Ø[4¢~d5mÿ§	Ó­ï=sÝ=ùìô62C¿ë¥£EN8²Ewû@70ù¥¨ed%pÕâçÇ¡yC0Û2H:Aá`Q\®«Öl¦ù¸¿Æ0þ±hfQnëð¡¾['Zè³ðeÌEªrª¨x¬çY7÷æ$
frØ¾¶/3
ÜUìáÉigÖÙÈü'ê¾³¿m/3·XrVì;Sûm3¹"£nqböçÀSq5F=M$Iíït]DëÓ²zWØý·ÿ PK    áX¤K í       package.json}RËrÂ0¼ókó
öÄ¡ßÑ« leNÿ½r^¥298Ú¥ÕÊ£,Ë:Bþå®RÆÊ¹ü)Îc­BâÐ@5xBkRúDò×&k*­´] ?9d@CrjmCÛîÁ¬:ªBþ2	çèé@g<8ë&h¡Ô¶>=k N9ª³8)oÐì(ôá4tícf¿á
¦D¸R_V(9°üm&rÚô ÊFìÛt-ç7¸Ðöø/¥5mÁÝÞÆÀëèï/å¬`Ã¯tÖ¯w¥nÂêFDc^Ýyåö¦È$é÷}6iq4¾Ñþ=Æàæ&yx ±«âø©T\«b°ìó;Á·E&²Óç×
é±»8e'íþf-+yC?Wr^ÈÙ,±·öº^ËÇ©¬Ùí;ë
¹^¥ÀövºxØa+óvÎlÑÍão×ìI»}¾PK    áXâu¤º  ü    package-lock.jsonÔY«ÈßçW´úÕãÂ¬6WêQ³xÃ;ÍØIv³ã«ûß»|ªìÚì:§\}[GG¹_Dddÿù¿ýö{¨æïÿøí÷ØWÃÐLÚjÿþÂLRºÎCóï±ÔtÏ¾¹yªEå¹ËAb¦MAäæ±,VuOµeÿlî§«+ß~¬1ÌØ
3ÔÁÙÀÇÝWÓô0ê¡ü÷ÿEðø©ßñU=;VÁ½ôº¶Ö=
Ç·$Q5Sù1ñ`Í³Zýëlûî4þÌTà 4ô4²:ìDú8`ç0'ô\îM3^ÌíÝ&Sì\4+@fº)û¹
ÂöóØKe¨yÅiÊLë<`0yÞÆPAZçà4 ÜhëBú |¾÷wÞ¨l¿zî= WZ¶(òÒ\âzófÙ:'õbÝóqf
Ós6¸ã¨c´i78hôd.þ°ãß5üFùAdä~ÃèOÕoj\I÷Ú~ûËK¬ïÌ%çüÂ4UNÅé? ¶
Ò,©Â8pÓ(±_
µ¯ÛÇ!2{ÿ<l£*ÓN@v4½ÔQqiNÑtÓÄd@Ñ¥æçÂî'RYh©mº²µÍæ,Í+ïÁ´+cÁ-ºeW=ÜµýÙpó5ÚÚãB:üqîßÅY9aë¥ôvx°ÿú~ÃÃ¬<4@h_vÉÿ\E6È\{Ð£ JãÆ±£$ÒçA§7ñ
â8\SÏM»z
¹p¸Û¡½!¡!÷tÝ>{ÚJF-í}k*åÈÅNz8ju×Ãaì
6Z-2RwQ3ñl
C+lcíôpZmÉIl£<>e0Y¾Fîý`ý§ Ã6KÓ÷!ÛÛÏº;¸!ú_¦³ÆY¢êæ«æöÚ®
q\Wn`¬©éCzSÖ¶ÇEë-¾ÝC°ï~ðËá¸Ï7íÇQ¯ã¥uy3^YQÄÝ½Ï¡X¾`Åx³ªsÏOÖiÕ2ãíÓ;ÈÆºT]¶øÝ|Ðo|±X;Õ² ]IùÔÏã}lÇoþÿßÈËøÚ¬¨zä7wl _ ¹$ù9A¬6¡©w"ù4þåÓÝÍ,wÜëE]ÖêvWñöÖ"ê'ÔY!"¬ó>²èåV¢âh;ÆÖ¨cO{[¶2¬S\Å!#Þ¹æª_­ää^~<zHr»oµ7iMû¡:'A¨`«¹ÐÞ$3ÖdÔWY7yÌÂt?I³®a9a©]ÖQsÊÏ«gAª&÷ýó¾ñÎ¢qHY9Ù±ç-?:µk©¨Y|ÜÌ1ý¸ÉR¦	|5k¸´35±Í,½©ß#êvÃÔà¦^WÅjW;3f¯]ÑAóXc»Öê¿Ó¤Iò²våÉãRsÓ¹cZþÈ­Ip/«iêÏA­­zºiâOØ/2öÔ6Ìñç¼õ©×YÑA^Qc¯M,ö³yþ8/ò¦ËÇüé¨ÔÛ£Ã¹~}x½O×7Ä0
0\)Î°ÚÅa_ÙÚ4ä3DßqV²( KÛXÈfÁtÞ²î,`Îgà³Áfl'6D´wÆúÒìõ«S)üÒJÍT?Y)þËxÕ2>M_o*ïklçýÊIÏÖ?¢ÒÙmVtyQÃNÜéNÖJz¾.DJtLöæk` tãØ¤fdkngÀ¾ÓQÍ¾-:$³_XyÞÊ®îv¡úÀ8:Qg'½¿ÑIK¢²	âÍ;ýqp 1ï°ÓÔUÝù±+/¾8îÝjmfX$
3ÌÚHÁ½Óûâ­íÊ­À¼µ°ahtB]£3Rúó
¦â
¢äHÕ
7T ¦´öF²Árz:$4	[4/¦çù
úrafõ«Öö*t}Ôf­Ó>ÞkËö gÅ7#Ô'¤.´ìÛ0é=_+[+{Jõ14k\HÆÝY½Ó}8÷%%kgÅ':i¿®|R
}õ¹-óúk@;QÃ§Q	P5ÿbð/GýBÔ3ì7ãq\éxÑ°ÆuÌt¬¯Ê9óaRÄ1éÊ²	ÉÌ:àÐp%ZÐú\*a>ºóËîÄ Ôª[¤HÈµ¿«Çö £ä¾ëý¥¤gå7SìQõeZ]L·ÍFJ(¨:L¨aÑ
	Ø!«.¯óå>p:êû\>2¨3×¤Xúb¿Þ	bÐ1¿î´?·úVÖ{È{ã~öøsÕÍÐa+çúå8[d7aüÖX´v	*>eNaÅEË]ÆÈÛ¢3Â0.ÍHÔ0fÍû!RâÈzW2îìLÍib5`X ÌÙu?Ìh®gz¯\ðz´iÜtQuÝLoìû kÕAFÛ0u_MÔÒÊ÷rQÐè!¸<6ø5ó}êfòÁ+ºytòÃ»>u|Êé5Tÿ®æ.çÙòÏKo6z~×%J7ëÖ{¢txúüdNÈ­7[å+"®¯é²HT­ÚGÍ²Ô
!÷¸Ä­Ö>µ¥}yTx Q¼m?ó)·*ÿ¥ÙÞMûÕQ|³þ÷45.4fæàBÚÒzD1®ØÂ¤¡<N[<ì8lWct=sV³´ iE`Ò"ôboð :#ZQ©ã«|MÿWÎ¿õJóA´¹ówdá§ÅÍÕø¦³-±°¼>%bìcjUÌÞJ²[Û[d=&æ¯ìw¹Ð
JC°lËÐD V3ÊeZïMh¦ ²FýzÎñ1ÎÃÐ§Cäû=tFó¼øfÝ¶É*)+-G;_¥ÔOaeíVY?)èq1¢¿
5[\äY
¾¯d±t"NÌueËß¶"\´&­½æÌwÑÿ;òÝ0¼%ïÆ[µ7CIøÖÖWðz¶bÙz@H²Ê½U=elî<5´ó?µ<êuýnM-»¦³ë­ç.I,CaÑ[ÐngâäY{#iaw¾÷ÝÛ+5<Ú}GYoÁx¬¹D]ÃÐ¤p
¤0ÓÖzÖuè¤Ur\ä=æ¨a¼ì5/tÌÀtÈ»Yßßm$a.y¨ïJd?÷åÿ î]<'·çs?à¸¬ÐË.Ró¯L0,Ö ºlßîí9ºïP¨ý´Âûüf[ï
ÒÛHIWpH¨W9(:¡°Û£å í­¶×ÂÎõãßóéìû;0ü1úâë9ö×ï°E.÷*Ùr©ºMsü¶²²Dz)²aàËhÔ¥¡Mw2¦tRÂ"0éuó%·Ö¡"Å§=ÔÌ ·EíéªrÍA®r¼qvVwTß;Ö!ØËW¤í,òÌÓ7ØË°Å×#wÌ1²Oæd.Ê|@,v«Ù­!º¤=ïé¥	Ç
ø=ÑL¥»Ì¼Xiì¨H©bºBI¢Q±EäÌ±ÑVZ^3
}~ßT=¾>%DnúT>µ£>mfqNßvºiÕNMßº®e8~ÜâfÀÖb¹µáÚuFbÜKgôÀ	6ßîZè% ªÅ2ÆT)dëºÈòrT6&l4TÝAâOFhìdÞp
ð­þâã"óS¯8iá?ÿøvÓ9J½b<¦Üj>²oÍ¶{e´YA=-ÍÙ.´¥Ä2â® ïLjç÷Ð"Ñ6ã±ïÆèØ
n-Za9(h?Ôl6Tc£WµÞå_vRù÷6³¬åë­äÇà1ü¸¼¹+ï¬e"0è,e
gSy´Åf16ñícI	¤Åµ ã$[êËñØô÷îÈ]¢Ëóæ
~9É»õ;¶¾ûæTðìë¨OP.oF]kÞ7ð5´¢t³/N¨èûäYò<J§ý¨µìÒýn½@³ÑEK]y+|¡Õfxñdf³Ô¨uÂùäOnEý¹Oö½ÆË®÷xýVùz{±ñSÆ~Öäü3Ä?Ô±ýHSOq)ÞÛKNz9þ©ýø÷fçúiíW`gÒçx³W,^S¥mé´î'¹[líxq]n}wÅX{ª@ù3ÌÝí
æYL·}jÇJVÎºgá_µö½<¶¼naØVeQÛR¨éý ÷Ý$©ßTPµãX'°wl¡óÀg&Þl¯Æo,âéºý8êu«×¬="õRðm»ë1Ñb5ì{Õ>qý
å jg£å4µðµdRfns&Ô é,I]_jn¾uà!PLãÂ*ô8oäý÷³.qºÿ¬çñLõ_§#6Ó~=ÞµJ!I¶÷Âø,á òùîf³,ök7^ú Nbøå§ËJò»[m±iÊmnc	7ÒÞ¢êMrÕ§[p¤Ï·Ü(cO""ôcM,¢·×íQÔñ¥ §ý}0ïçç2.~Â;õN.J¤W]C`w×*z8ÊñÐ0bËÔeáÌÉLgl·Ã`¶D~:'yñºË`òL÷ý°\CÔ5¤_íß
µº;Òêhõ	lW]ò¢8ñt9ªö_Ä=H\qÄ¶ðÚXQÂD!Îêx¢ÁÎ$ dË¼ªû¡÷H[_Sl·ÜÊ*£zÂÇ8«¿%LCMÊf+|O=Ñà<¿½g¹vJ{8¶[­)àYï³FîmbAº¯t=qV [~`£+Åõ8WÚÊ×¤óÌdXÊN6§ä^Ïûxñüz÷|ù÷ ½s>xù×l6;èÍý`²bÞ|×ÛÙBE5ºµS× ßéyEì9ÆtÈ ä±± +Ë,¿è^)¼«ßêßÒJLSKï»v^Èhp^ÜßLçt¾ªxVä¦RkÜ®Ôi¦Fãþ<dl'µ9Á¥2¶KÌÆ#U¶@-©ng)}6MfcEµ:èÜ_d5Ýs°«éÐ3=Mý ÞÏ=Ï$ýr$îÍiÞ{ÚLÊFBjtVµ=vÑfµXÉTk¼N;â£	y.D%Ä;3áéåÂÀYF]	aÍ¥­)
óq¬ýjý>óê§ñO×7cÔÿOÝµö¨Ê-é¿òæ|5nî
rE@¹È!çÇ·îÖ>mkÛ»wò&{§Y UPO]Ö*YUKåÒsÁ@ÐLbÎe\àÌ|ÚbÖÃ#1Dw¤<æÍ¢énç|3üGÉX¤æI¼t¸dí»3Úß
ãñ¡ÿ?f.üEúK¡E+cà+ïKC@Ö:mP,²Z¢Ô+N?wÀÑX²IbÂpW*Ì(´E=¥1=+î«.EÿôìçÏé[ü£X¼By<ä¢
:§LðªNèEy-Ë&,ª4]sa6æV¹!AD{©¨7SAàk¯£DÀånÎ§Z $}áêç¡ò(¿'aÄîÛåÇ+çñÃnk$Ïª]å-¹ðç î  =¤z!,4èª¦apsªóØhTWó ´}cLÞRaÊL%èÙç¾åï	jä§EuÂEõÉ+¬/'Æ·I4é#F¯ØÙx -¤È½÷·v-Î+DºÙm^wìµµyÃÖÕË¡$C­a;Ô±%2Z~ë«dþÀþdêýÃ+¤_L¿{C
0Ñ	³êTàyÚT¡GÑqPAYÞ£üFXÞ¨ªA×í×¥ Þ¬P;Ó&¹~C%Y¥"lúù²ó÷§ßÿ¹_ØÕÃyæñ
èyü0¤ðpeÐÒà$WårYG­â,Ù0 8Á:¯t~I#U 1ø¨®fxÌQ±ªzÇP41½6¡Ïï6Àþ|û"¿'¨B»ôÈáÐãèa8Ûm»6£F4â»º
ÆP£l¦NJÝCîD31rÜßHjêm×ØBÃ)	(;rqÚ0Mf´m*å2Æ
}çI O0.ðJÿÈ¯¤ |±RÓ¦¿±Y¨CíM¬UFÕdKNJ+ªúÈè4<Æ-¨Ú :ÐÚÒ3[&|j O¢ ò!®8Líä?>ø ÆNù³ 7{ßã¨'>,­HsÑ¶ùZEÛoÌ!x)Õ² QB`©ØcÖv	8§xE^Ï¢tÁYÅû ZèæJ¬D»M°? ýnOOýÃ@*Sý,öP^Ær(Ç5AìjÁ!KÍëDÅmPÌªéxÝ8
ÌþR	´¿ÄÝÜ:C½k[XNn1¢Ë	?®¦2¼lT§MþlÎýüØ?f±â¡|¥¿òõøa{7ØtÝÔp©iZn¶ÞÙÖHç[tV3Y1I8e¯ê¸U5ff1_)öÂÈzn»iÔ81ÉuhÔµráÏäñ¡ÄÚøGSzö@^ÒÝºêcZedMÖ@ÚÚòlu:q³jKÚzwªIoÞx&L'ÍèA·ÐC`|&3EöKJ-Âx$~7;ûÁ<>øóSzo^¡üRJo¦,
Dxª%K+:5ërmÎ*Ú-E à"ªIK4Ë[Û%oM]6Z°¬G.2kÈ`3áTýTáëÅçHþöÞòç\ë+ýW¿âZKe@Îz´måA/°5S¥í»1k«æ&ÀÙ½æö«~¬Fàq#äíHÐdÉ[ÑqÐÞjÞH*
)5ÿg#äÏ¸²Ñ6ÞK8ø¬úýõDíñOYí±½v<î£®ê¼¥ÈÆ'J/ÙYÞPr³*bqà¢ÓõNGLã"e3+2;5b0gXEv³0j¥½ÝÊ3%hì)@®]ýü/¥ö6NsøÀ¡?òå÷dÿÁ¿þýï¿þBAýÓñÙÞÇ¯Ý~¾=å¢IÂñûGºý£ÿþ'þè&¹ÿÀq¶³KÓÚA¿E]ÎlîËQ÷Dú¾p¼/å*¹côéZ\+#)âÆó;ÊEeªÅLñ²ùPdù*Â^òä+ BQ
s`d	J º	J©¯Éþ=-¹.ø-xÚ»(&·oþ]4ø¢ì_¿gnwïî&BH³^­Ê"(ö@}µñFÚJæ`TAS"qÌöÂ´Í<F@j% 
b4ÕÉ¹\É^0I¶r:'ø<³L¶*UÞ
ª³æïÕUãzÃÃ»iîà"~õ®w_m@~AÄõeßó60ì}îS=¬î[£ä}û è6Vïê]5èÈýÈ*íïB×7}Øvå ¦ãÄeñúÁ¯@ýºz¤SÆÏ¾éëj\]}å#[ðDgª{#8uÏî[éM0enxæK$|Ýç0èÚÅ²#â%Ò|V4Y@ÅwùÆëÙóÄæ¢!*ó­G7¦$¹ûÿìóVpØíÒ];çºûÔþßUb'CýwôG9ÜBø]óG~£»Çxo{'2÷Ñ]ÄUKï»$=µr#³Ñ~çIA¼²iÕ@
¨õ¨eÈ¹¡"'N·òpÉ÷d jÁn:Êõ¼ w vo[äï1ØOìm#+®½ä°ç® ì$^ûî~
[Í
©(=ensºWÃîÅ}H7ÈE1JÃX~°0Ef>Ós'W[ú&ÀíÄ
ã,÷ÃpSÔ c¥Æv³% .Ï¦³¢	fï ÙÛ*O7/¿^Ôçòÿòã¢t¬ÕúN4ÉòÐÞ¡[ØlfWnÿ}{ï¸_}Õè¡=OéÏéô¹äÍRYô]zÇj¯CïÎtlî+ÑrW9ªá¶X¢±Íª*Ë3×¤&é`¬°AMÓF5¿¥5j*ÑF.7ÆT$pÜÇ¬eÜ0L ¯#LßPQ¹ÞÏ8¿5]<¬æöý ç}éÁpr¹ªðO[kc=ä?×Ñg£àEk'a¾btH_»G÷!&v±`CthL_ © Ô`´ÊÆ-lî	²e¹äzÈ êÎC¡K\Rè0;P6¤ñ âfÙ¯yÁ¦mò1?quÃ9Odïeï}fè»â}/]ÄÃÂ¾¤|pÃ¿Ý#­ûRàXKÃ
	GÐ
Ø!§nRê:Q}LfíÖ	ý0DQ2ÚqB`	Uå`,6¦ë2ØvkGPY¯¶Y²sÏpn{Ñâ´#¶öWåÉ÷aM_>Ñµóìeñ_çÿuè<p=?Í±­¸ðdûWÞëêú{¢§³ÿ:®À¯¾RçÖEüý¤ÿõò%Á×ÿ:­ã¿îÕJ]iÄÕ¥ã
ã7tðú1ÕÁ7²ÇMb/nï1÷caka	ÏµÄû,h9I
G\)µ¶ëDC]FÉ¨áÂwâ [
gn°ÜPgLcQ¢µM÷Ú\aBZöØ­é~ß}?è»o{hûPÙêBÿsvÙÿ|¨äm¯ù#û¿Éß¼=ü"öfGj÷Aô³£i|E.2X(^ÁÛy_dBOÕÅ]´üÐ,¼]èQÔ¼j	­¨!ðÆçÀ½AnÆ)U}oc?¿rºÒôÍ÷æö=%xç×àfk§õÈ3Yûy ÝËQ÷Hû¾ð­	CóÔTgÚp`O½5Ø¦f¹+^è(½õ]É´ÛfF/H7|÷iOuBTZëÑk¢ ûg`¶ g)÷Xu,òuQt(÷.sõÑc¥ý£wûüô]ÛZ)ý`WÊæg »ÛüC¸Î9=£<éÜ×Q÷Hû¾f,§üÌð@¹Ôg².1>*<5ÝfKáHìÌùÝ\(kmDâµ©ù
¤²F
(ul¥}¤Â½"f? ìK5úxa?@?äppÃ/ÇÝ#Ýûbâ®8UM§IA¤Zè~ÀxÉ9Óz;(7}8}Jò¶ªdÞXq}PÙpJJ52&{#AÄ¼}Jq|3>%æÿ0Á½7Êï¹¼w2¿>Ó=1¹/zóÝ`º
ÁªSÎé¦çäÒBÏÆ5*Ê++$êm·;K)4g*³!HxBs;õFsÝ\åÈ*hÚ\TêÜð}	ñ½Wº4àïð
Ð½wOî¯ozS7K®´j=j ¹­c¨Ïh¸ÎªãHwBÖNofc½Hv%ò£Êvpqõéz²DHL:©¿x~þpÛÁ2ó7CÁÍà>bQè/uñ«°­ýLãVæà
í?éï{,z¬F©lïa°!£DðXäHcÐu`÷+µ`ToJÇ¦"¶8íÐÃmã×.ó¾¦ R-¶µîÁßóUZåI@àuëÃ|j-YaègT _Ä#ô_øWq<ÝÐ­ôÊ7AÜ?#¸?:&Soºñd9Û<£Ià`ìÅmiËdXõPcåñißê£JbIÅ÷©ífç}ÉèoW5¹EZ¢íTyh4s¬¬Z oF/Ëµ>Õ
¾ñoÉõ@ü$×ÃÑ1úâ÷åpTg¾_Üè¶«lÜ:Á9áj'JT¶DX~BXKkIEW|B	fS0![:ÛCßÆ³áL
²Â¸û}2ûY³xõ&ï\ÇþsBaÙÙ$zOd%.Ý¸Aq*wgåî­_À'_>xGè¾~x`	Û´M°¢AådÅå£¹Yù×H¾R&4¿¬=ÂHelÖøÅº¿H·	òM²LTÂmGSR4í,Åø¼³ïÁwë¢{KÓÂIîDþ®»÷|@l?ËæCOý÷üaip<è(Þ9L÷kÈhÕf÷pØ b?]×Ïû»@,ItÅ¦6RÆ¢SbÆfbäd¶ìg~¾+±é6
Zs×¢kf'½.^}WÎNó$·)púÓ½,VæXË[+¯}ÜÇì§ÌrþðJ÷Äð¾àÕÆêít
®ojÑî¢!Vç0¦Ùæ,¶905ù`íÈ*8Ñ¨*3Û¼Õ¬Ð)¹±k9çg½Ci$C¿0ÐºÇ
îÝì/rþßg,â^Y¦g°»ùäoîø6äG§ÌªNIDBµ =¦Y7/]ç8&¬Õ.%Î',"ü&ÃÏ×äp^®¡.Výz¤'[¤·®BEñÿôÊOö@y¬ßÙ»"Y}1^_¯êy_ gØßzyK:<Z$&ê«¢Î`£ 7ï <±Ðö!©¦ÿOÝuu-ª,íÿóñ9ñâµL` HòbE_Pß<:ý®}®º­zª»«®§§ÜL°"Öuç6µÅöüõVÖ?Ø¥G»¾ÍøÂÕ\ «y ª¡\jZT¦1¼?Þí9ê°¦3Kt©|\ÝôÉ¢ëNøÒ¹P%qûd8Ù¦õiÓ!o%´ì÷ÒÔ=TðÊÒs¢ò8¸»¿±í½Cw¡ðn'`k {¥j[ÔÕÆÜX¿.àq1ñ[` c±dÃUË´IÛXB0iFxR ()Òd£ê1
ì÷åäÅðs¾ãe|+ï
^ñ½ôn~8´ëµ³çE5¹3ìWäj*ÊÎMtaÔÁ>FæA)¢íF%65ÞðòM´Û¬Ö[.ÁÒ_Zü¦ÜáÿÝ¸ÕYÿ÷ xnëvç»aËØX2,¸YYiä¼Ìol}%¦°dî¦(ê$æÄÇ£4©ÛÊÐp¾ßWBÙß=×ýàÿmÈ»Ý±änì×þÀ@ÐmÝð@ÍñªJoÓ$E÷Ó_º(Ô6Çc­Ô¥Sch I1©e¾ÍAßøzVkFB,­ÜniÁNnÿ$ì¸¶³#IH`S×ûÒâW¿ß
¥ËÊ¿Òl4Üt<ê4S¹yCzSL­×Oô=^­!dÕÀîÞBhZ[gÓ|»4e«xÌrPÙ,=zþÝä*BùÊ]ò=0~hí+îOà&ÌÀBÝYYVµØÆM2E¸¢æ³´ÄXvêm¾Pé!bóñÄ«Õ¨Y0Íãv20YÒWiä·îtü:¯øï'RyÀ3WÉ÷À÷ÖÖWðÞ
îa~²(ÂÓ k¤v¥.R´¡bÊAÏ9àÔ]>ÛeÚ93ÍËvÍD@í\î­J×sD³ÿ5t7iÊÀ5ßÖëË=®y°·5¥H6ç#LÊKHÊKt ­j²Ãä$¯ÝA¾)rå»¶Æv+cåÎÆXPÐ$lÚ0nÛGïM5ýmÀ¾É_ymêdù*ôJOyzçèec´\	B"±^ÐZ³!´I±
Ùlºn½ÂhÌÌfFW6êì(XkÒ¦úÄÄhÆ»ïe^x³ú¹AW×6EüÔ¾6öÛ×»,ñ¿åI*¦ãÕJ|ÄÉ¢à.
gÒî@ë¼m
Ö6¸Xb1*÷ç<Íø
Þ·cIAûTµULov»Ï©Ýbwb3ø&èÞÚúÜ[ÁÝÀm½,ñÚð¥ñÕ-TVÑfV²u¸wRX
ÄâqMKÌXMvR m}kèbºõÚ³Ùo¦Jý-ÜïëqÍþÖ<ÚÛ$.ÆH«âh°òÆÑba
°)¢1­8°6²RAT²µÐ
?ª°aûËå$)§²¢OêhÓZ2ß´©H|ï8y7fî]eËÌóãa±é{mÞqüDRËåFÀÞÞYömpFSÊ\À,ÏõFpÚÌ,#
×´a)£ùW?*ÚÄRºåmµ*r
A¥&jÉÞjÚ^a<5XÞÚ
y}£@[zîþ0õ¼xß"û4â½'îEç¤ÐüBÍÐÎû¥þ9#ó¢Säñ ÜNJ}8í´Uûa²èüû_Ç´¹S*¥åÕÁÿ&ñaCú¼ýþú_¿dm/Oó¨µ]iä¸­árÉ9×âqaÁ6[+ÖScÐDtßG[9p)Rã¯LMÝÍGÂv Â(Q®kÚü4ÇTÈ¤ÒU¥s+«§ÃMh@1_úÏ^÷(v~Þ%wBì£EzoiY§:Ç}g@ßµWâ|Âàé¼½ÿüçåLØKYØOìÚúI~æ«ÞYîm ÓO²mÕb5O.kfÚ¹-¨JÕÏR¦rÄPÉ|P\£ªè`Í-F¸jïfávNßXúÂaE&eC{kóÖÍ3
?bÝ>ÆòkOêùt,èÿ]¯÷á Þ_V{?¼µ«ö¨-|ü3
f·Ùå6ÞâíVïÔÀmÃù(Ù4ydë,.÷Ck·mÓÅ
ÐÏl2cÀÔ­¦X´`µ­ÚÖËJµ©0ORÍQ+g©R<ß³/~çNk_V>ú_ÊÅ&ÞuÿáÀeôòd%]<PØìÐ	¡	M
)ïT¸ji]ÍO8ÖPµ;hàLæ:[W²±¶O÷Õa	Nôµ|á{Fõúä×-ËÇ"t
çýtä/wÎc&~6Ú]BErÂÅ¶èü<Æi³ÂÛ ñçYAXlÎ7T;Ó¨oùíBöcFfÉf£TM5^¦XÆmoíì»ÏOãáÝÚ·;Ù×?·«ø£d°÷òåÇ¤úÉSSZiçÜxu!J|@fiI¦ì
=fÌWOÓnÔµVØT+¡¢Z°¸:RÙÃ£§WÆÚI²8éýê(bûÑu'2¢¾Ê?úco½±·µµ«vÎ
AÏÀý(A)9­RZVYùÜ6LÇVÌ·=Ôµ5AFæ¬u SdhRØÉ="ÓdÇê·Þ7¤eÉð\ÚÊlýäÇ_Tñ£ÿÀÉÇ@öøÙ;Ëº­·ð@JD(Á¦6ùbÐW©àö8_[DjÉÛ«ÈVC´j
ªÜð«-÷
 ÊhKæªûÒòY0¡¿1]°©Ï¾FçÂ¾8|Ø»r´?h¨gÅ×Î­:éìñèá«ô7ºïgîfn=JÊMÈCµ$9Ïwyz1"¼$káF[KFEnÌMKPgk¤pËå|
£èî#-z¦¥oEþïär~¶Öûü¸2rôä}[EÙVÏâèú¸<£ëËm½n²îP|[Ê1K¯Ly´¼>ÅW4B0û(MYBF©7Kk6ÝÉz#R»Lp»zÇ5JX°p¹®sÖíµ	7d=>:T^a·Ôe[õ~5J|&°¹[q8§.{'É·52öØ¤#½1¥%ÇÝüªd}$U".Ná\ø&×°Ê¦Í,LydeîÑ~Û ê*Ú¬áMþ
S=Oï/1äËéì2.^´ó³vîLïâ,|yê}ÞÃûÝó?>å ½ÿüs¦ó¥@÷Åù0uÙï¼wÐÒéÑðûDkEÜâ¡ûõêÎÑTN²NÌ'²,ìNUï0ºb¸Äq¶~¼ËDv¦zúìÜ6RaSù´V¬1ý!(I§ !ø5©
¸àa,á¢^2¨|þÍùµ¼Y5³½ÙR¥'fV÷M²qHfAV`oÍk}Öä«:%/ºyÎÿ:-Þ©ù£=^Ñ>ö¾ñ!å¥¾p´ø¬Ûdé0¬»w_LÕ&ã­Z$=¯#Ì´÷u4¨Vá*AuæáÚÌ^WÈZÂ±|Û¡/
§äTu®­wö H^ÿ"îµò]æåÈÎ<Á:Gï«ÞYÀmÝîû;vªM!=:h%Gm´¥AUñZ5B,}Þ¬¨%?¡
é[Ô2yÂÆèº!à·3t+üqÌ8èóð1©­gÙvÒ³ÓR?g|)5ÿÿK¥õf^èF`w×Yÿî¼|]<W=W}\TúëØ'>I>R#NcÖ½D"¯äSL`vvf·þû.ð_Ì-. ãûø´~è$í¶¥åW(Q4BÏ¢¤Æ\çÇzä:]ÄÎ!Î`zlÎ¼ÏAubyB{-¸Ý.Qªþ å8cXËf«whÞÐfWÎÏ¤±©ó,÷Uç«^ÿ>Fym¸¿¬Kt²î¡`	°é.5³Dá õn§hQ¥i¸d½j¤ ÁaRpòåx %O0K_2ã Îzfu9¿=/9`I¿z]ÜzW×§à§Â«rO¼]õàûB«T+=P®=
ÕÄâR!~K.l'±©jK
ý}BTPbºuçü#T¢Ã6ÌÒmÂþ"UÜe¶l W0ù¥z^Y&/Û+üDèÿ*ô¬Ó×EÌÿlRÊ 1Z Sû{¡¿ÒÒ*6DÕÅÃ0Éã¡Ã3Ve3 T6JS°Í­ÁF2®[©,|oÎ«Õ&[ÒuK:Z¼Öî%zñNÅùi>H¼n ~cê<NSþÜ=­g×<°Ï°vòeÎi\¾ÃsZkûÉÑ+~xÀËÇy:&¬Ã¦yí,0KÍâ­r7":«>¾·`$A$>Ü3ÌN$T ñìóàb8¨ÙMº?|ZÔ¾¢ä¹ëEèY!§¯'";W*©mdt=Q ç¡/bÇÖ¤Ñµf>?ÚA.ò¸³ÝÚkµgûÑHÐþ´*³UÿáPýÌd»õCa÷Îækû9îÖk´v¹è^úVÝ`
Ü8q	¬6ª× ù#VðÀ~zP~? ­c¢ÜõçM§nkm×´Õj5­«é-¸Ø¸]ç¦3Ï{¦½.<:iä¯Ï«éÇ'È{øm`x¢ç_üÑsoÞ_°wõÌ¸k,9þ{/2Òú·?ñRó³è7Óx½q	îxéº&êSîvMIePG®¼ÃæÉn¼	SéaA91nB
«Ä}ÃÛQT(n¿NØYÅ^5F(«!1OâoEð³A|zumÙ»å£t>÷òJç'¹îñu#?#½ú=ÈOÇô^¨fõ"ó·Ö>M9]tú<)¹g¾µ~±Ðsóáÿþ/ÙæNE|~tµ=¿ú~¢{ôÇ_u]käÕ^/Önïx6+'ç¼í¯¹dL7>ÃÛÈÄÕÒx¶tmÐ;w+4s%Cö0FÐ8Nöøèf
iK`³¤Ç+Äþ',×Î²éòþg½Ë°»J¹ë½2ÊÍ89Fãï]süçØopü	~nùëBì¶»}Fîpí¬½6¶
RÑv­°Éï§j¨â"g5(%sggÏi2oA¤@]Z|jmàeÓ&#9á¾RkÿÍ"÷ÙìWkúj³?[õU{{<ýÙ[¨_;ÙéÏ\×Æ«;2ßÝix³úÐ@æÙ»²&Uµ,ýÞ¿¢¢^i/2< ÚÑ7I@AI$¢ïooA3S35%½§nEU÷Ë9t­o¯½¦½61	c+¥ª£	@T´§£
cõ{û5¸å³\Lmomn»ª$[cíÝMG®I08G`¿]l÷²´ÀÐÁ¯Tÿ¼+ªß/§	Ú±÷JÚÇ¹¿ækÏx8Ðh¶è ÂS!sµ°bÚY2XÈ°Z`¼Aµ¢Ð
a+ iÉx·½Úñ.Ñ~4PÝ^L@{xv9p%þ»¨¾?­÷ëøNô?¯Ñ{ô»?ßjÄÞ¢\/î1eÂM|å	 j)yìÒ¦{mYõ¾#É\Å>ÎØ.3=ÝÀ¡Á¡Ë^!]W¹êN¼ÕEÅeÖ;b ~¥Ø|zâö2À@éìI_	4
|ë»ò¶â¿ó¨ûw Fè¥)"On\Rê<µÊ±$Ñpja¤Þ.üÑLZ¯º8Árúb¸åÃ­Ë$¸ïÐÔd!c,ª3Ìv24±n¦Èëú&&tè
v<^G ü=?¸ïÛÞPx}¹}è$ºðæË³¿ Ìá$gQ_>nÝØd+Òõ ¸:í\h>Ç<e¥)TÔª_.<5×Ê`n«îpåm
3»EXNµõj<ÒEQâÒÔ"HçÖéóúPEì?¸þ_ï\ÿàÿß>r¨·Û^áã«îìpxYgþýýµÿùÏï¿ùu·ÕuöíÞj¾qù)'éÜ¼õ§¿¤ÛÑð¯>q9úïÊÅL¢CzÂ`à_v&Dë¹æf2±§'­óV¹Ó¨Ñn·aqýàºV'0ÿö-Gn§¿<LbìÜ·tû§}êDLZ|\x[5UAî\-6»lôeh­¹çò;²j©R~.[þÁ²¨;êåûºË/jwz#ðWd>éÂð¦Î¡ÎE;^Óý<Ï~¢µ^¹ûZÃÜ½ÑÌ®øsMs(´
©#	pu#Å{á`]mE#ûÌ1+ÁSÈTÅà¤VV£Ô »D×A=[	5£u=tSh´±©^wëþ§ßÒÙá¿¢'g±³N¿â»dð­/Ò·¤õ×á·ðÒHu4¹;ç=Ü 24)½g
ÌrJ¯äíò:z±è»2ëf%,&ñ4Ö19p§ÇÞRÃ&¦oøäïäØqÊÌÙÕly4nàj
¾P¯¹õùZnW_0p< JlïàÂ8ØhÙ];³¹F³¤5Õ£ Ï®·:¬ã­ÄA /[n×@´\QÇàº"¯/èn6¢ø´¾uÍöw¡5ý(26v=rR¡§E?¯¥v{¥s&ü\hþ °4ã&ìgábÈXW]¼RYªÛÅ¹»÷Âe6E¹AýpOÅH^2=¤®õñ|U¶Áº:o-³íGþëÄµpgVµ¢edsÀñïÝß®÷Øz"G£yÉ»;|c~glå³sáÊ ¬®æ4Ì¥¾$³ëõãW©ïLø!nA÷#Á«Fy`ÌÒNÿD"(-ªÖb\¯³|í¼°#§^³÷ó=ËÚT|²ßîÉ¡±è^q|vÎ$Ke¦­£5|Ê¦¾"fºÉp/KuÕ¼0ësËm`î4ïæ6ÕÀ?à:Y¢an'b`0Ü!G¢4g³Éüöú¼Î¿¿úÌ¼ÿ%Åkþ=ÇnC¾q«ÉI½fQÇòêò»<¼¼þ7í(jìwÓFz1ÐòAÛõzßÀÚæû õZøÝ"+ðk¯æg#ø÷Þ¹ü\þÝüK]Ç Ý:H«u£×_gì¿S=
õ÷ã¶&ý©ºä
Z,® N(F×Ï`SPõeºI&¤'sæÉùxM6:XËmtaS±Yd/æÔ._ÀÏùcäfÛ0×ñ]ø£¤ßQO¯qg¯£i|Õõ¾oïnwðSÂ?É±¨Æñã©zÁP~§zÁ\sÜµ0'}jC¦b¥sÖ8òØ2,pt9ëáKÍÇÆcFÒ¹½ #XJ
ìKBÌ Åüâ(
%++Ñ^©
bÌò!¦Æ37òÙöx­X:uR_³Ëßïx¥¬ïrÃÒ«ó¶e¬NáßÆ]¦eoZàoL?0§a	äÊ¨¶ j­aÆFHw#±féÌÝBß«//ØxfG=};¾ÞL74ãyB~e½¦ß0÷ã´sMø9]Òâæ0I79¥H ï´<Ê®þj§lû¨0X¡%³_¥VF à=á ÉÈ@
]f9[Åê|V#ùïoÝ  õ§¥Qô
8½Ç;æâ1
ÅõÿÆsä¬ KÖA3}Þåd6ËÈ]îô}p$í(OÀbtFÑÜ«zíÀ8ö¯C¨´¶Æ?Óß$¶nÚÔÉ/Y(ËßVr5îé×´VÇqdi§7Ï`Í|þ¦8Úê6NË¶¾m<Êã ÍÎk?èh#Óóa§¡ô\¬ø|!ëpe|<òãN
§ÃÉúý]Ð]¡È»#YÄÜ $@Z»+²$5Ùc«ÚRqiÛÕZõ}1Êßÿ@>Lï!úÞ§ª7Ì:¢ïì£ûìóË~Ú¹DÒÞrüßçgj:ÍMôsvôëJ?¾¬IÃ¶ý$¾Ü}m½ºÛ÷ÚXj±¡É¦ûJë­÷âãÄÂ:u/Ó£Vý,ÞxsõV4÷`+¬¶°¿¢{BþÕY§¡÷ü¤Ì¹ª2pb¼<Lrº 6ßÍr¥ve&(æ¨HBàJ·3-Ù"@5"6(ÉvT¡J¬¢×Á¾ßÑ(Zkì´²v#Mß²÷gìòl­ÞO:
µç²H
v)W§¤½ÃNçåLì*2Ê`Ý91U`xOÅC{  êáÖY9èjÏÅv9÷Ì~äz (Ò·`­5²ø!Þ·û7kv\wÏ9¢¬I-³±ÉQ¬A08.3h½ÔKuOú<l©t¯¢©¾Xq:¤ÈbZÆD%ÜÞTYv¼$g'ÈåôRin>ZkÕçßPËôÌzY`°]¿uÁ¯¬/ü ûÎÝú¤²·`-¯Ugç]³9ëHñ3+ÝWÒP¬E*Q$Pe@1ÞLìmÊQò¤Þ1=óªiâ
	i¸ J:©èÐ81û1þ½2ß¨6¹wZÏ#É|Ø/½mEnªº8.0dg@ÅSÅµÏ÷Äf)ÁKÄItÍÕJT½xè­MQ
Õã7pOÿK\¸ëÄ=fv_óßÉ6Ü|;étÛyÄ§ù¡@íôpT$jy£¸"¢ÞÒDF¢&½§X,åÞh^K~7/°9`Äi°1H|¸`ÅªHY;²ÂÜz|¸ÿñrÉ7½sîó
nüGÈyõébEhaòEbÌaf8dêC|Kdk¤,DÌãvVÁ¥Î¾gnaICb=vËm¦2 bÕå¯ÒY"Ætüs%QÝ]762øK)ª+º5>Î:x»d?­6%·ÙÜO¶¦¼ÄGúèZ4éØÑ¥{ìë8YXåBèÏÒíÔQPð´qb¸)´0&·-|Ô{Ýf©MáÎÖ9GIoCy«ÿfÇ4Nî×E5}é¦qðü«Ó/=mr]7½³hëìNü#ÅÛýíFî÷?QKùîNóçÛ=ÎEÀØéÁàÞÁTj2ú^_p4gh ¸QLÖxÛLU²B±Ë
,¬hq£í¨Ê-8MÝL­u/alÅ2Âø¦SsÝGåmaö[Ä»hÎï;Ä/©¤äõ§&ÜÕàÌÇÖ h'©Ö(21QÊÒ]&14Ú)p¶=¬ïH'ÉÅU¹¡þMsãZÈª¨¼Í°]
M&"+pþÕ_òG>ÝzãÎOE«XÄ{ÇÂûÉ0;Ó<³¾>jÛöAre+ýDáÁ´¢»äeû±Â~*S
Ý VÍÙq
[xò3¬¡)xKÅd<ãò\;¤µ}ø%ùÉôrä3É!ÍAiW¼³cØ96á[BíBÁ¬0 ¢s)ßhËa1p±ø#DG¦0°qÇ­­Ë'·uéVý J@êÏuÀùëæpü#Zïp Ýíæö½¶á§ÇüÑºÅÔ]ò/TO,¾u.syCS2¯LÖÙpG`ø
^¤³-FlÅ¬.ãròjè²¸¼rõb6]Ik~¾,l¤ÉT:¶¦NÚ¦&ûcþÒ³T]ëú±¿~ò
¨'5|}ýsìÍ½Kõë[íÊIÎwô|ÛÃêaR EJà
/mÂwUþ÷½ÍW¼ÏÄ¤Ý^jÛä¢x.ç.?dñtÄOì8Ùv9u±3;Pb:¬Üêû$Í$#¥Â¨ÝÇACÆáÖ\¨¥±_ `¸XfÚ Ü7%O²Ü~ÚyçÃ;¸NbúJÿ f)w¿p·IAÇøa:¦"«¤ ²ÅYû=l£ô| à¥­ø£­\¤Á5eÀÑë¹pÆzýµÀÌ
I6æáR¡&ò³á'Âÿ¯"(Z¯Sçq ñCöî¾"è|½API/nzÌöÀ °á¬äX/Õ>·[UcîO«aÄyºOe6	 Ëô¦Ýá#
@`yì'úÉ½#Æj¾Øý¿z	A?jéU/ùyWbúÿ¦sr~%qÖ5¥a¸sh®°hÚDD+à!Q¦Û=CIM¤4á+ÁÍQ&æÌb;Ö&]¼Pà<Ø$0¸1á-:9PÈØ<s|#âÜ¾ñÛ
ònÊíóÑÉ[_À÷þöe«²÷[oéûo%ìÄÿQª¥Öø?_}¡ÙH¹9ê4tË9â&Õ6
g.
ïËDµñ*Ûdg¸*g6£nÖKO ªòb>Øð¡Ü6]$ë ùãFe»fØ^UÙÝ×¯ñçëf}½Üv­xBW1Ù/zC@¯¢ Xr¹Odëâ¢ºæü8a¼p%|Øòb>VR@õj´­ÄãÞq¢ë¾
) 3àuùÊÝ(þÐºÿBJóë:äûày¥ÕêêÈù¸Ö4ja¬õPá÷CRllWv5¢­0L-Ï³l»e8]¦9¢u¯«p·?ÜÐèb¿9âÀãy·èÉÝþÂé»[dCsÚ£_W¬FÞü¯áéÇ±ÔJü8{¸®òÒÖiëßxeÍÂ?N¾}òÐ1EúkYÿ¼:ál
 ÷9-jÜ2;®÷¢ÿ/uOÖ¤¬äûüÃR6Áî¹î¢("âÂÃD ²Ê&;>ÌoµÂ²¾Û=qo}iÌÌ'y&óH¦ôcéÌÑ:×¨¥GS,hôáõ¦Aíûã÷Èí#ý2®¦!ÐVsêõWÄxÝÂºwÝÛ¯?4ÿÍüóð`/¡æ×ÍÔ6¦ZäFª¶øÛ{ë	¶óõþ
lQÏé»ß#ðUèMf¤LÑÝù$¬v6ÌúÖ¨ÃÛÈ3:«ûW=:¾!É'ûÈ^Jß²íoHÜ.ëª#ºA!
$÷EtÒ?àùãP¡¿\îbÃà°c?,Ð«­v¼ªêj§íX`-¡w:±>Ô®:¦úE¡~µi>9£1úIç-«­V QHÎ&uÎÓKg½kSyÔ1Sò7)ÖjÖà¶9°;¾»WÓ5· ±UUÎªLD;Pó&¸,LFëãê4ÚD±E[Ã=ËaºeVÝ>ä\C.0Ï¡
qyAÿNåu1åþÀ;eC$T+¹Ý¼QM=Ò·6w-r?#P|Óá¼V§#m/[Át@9ë>¼¢8`ßÆ¾k
#:PC¿g&ô¿t`8Z1óù«#\¾¡nªß7Åï¾µ$<áM(õù©Ù­·( 6äfÎfÎ`-Ó	QgP¾Ïã¬@@êÒ¹8,((¸tÅ©»ÞK&ä´Ù¥´Õ`p£L-uI¿µ~N\+æ;=!Nèóù©!¬&ÐËiè«±t´TG|À8âàMOÂtJSÚYôÍ³ûþc­u&0°{Õ:Ø>l]A°¯´íoUMø}3ýgíw¾ot+Ë}áU#@\Uw©¯ñó7|2­}ÄÆÊ?áÌÔn/*¸±rrÒá.uÇ¤ábfÙ®¤iYaù½6ë[÷ýq©	cÕ¨÷J@H?ÚÃä¾M¨ô|ÙïÌi®¬|þÐÜ(¸vOO*M{°Ú5ËIg¯üâ=b 30DÎoÉg°mpZÓÑÌOÙÈÉeÝFOx'3áAØ"² aÂ$.áuó*Øf¹TÄP÷U!ãðOúM19ÅæÌùÇOSú1PÄÜÙÄrÖÝfC,pÖýv ÍÚ \·/ ã(RÆÇd/aá°¤º"ßTº£Cò/åp¢p£O¶î1êW°lmtçS8rÈ(øÜ0¯	èV
OÚ«­AÛ-îÿò¥ËØ+¸*
ú¸ C_b. Íi!Ï8á½V@îÈ*@äÇ¦ý¿É«/]Tþ\bæ+úÌb)Ü¬QC."æ´l.ë¬-x:uÜÊµ Ñ¸6ÒÒpl8#ýe3C;W¿ÓkR³ð«3t&¸­aË±µ+O${m·¼Z«~ÅûoyõXØËYôÎÆÖ3ÙuÝ³yXóÐCuãgþ
dwÄ½Ú{úâkÁ!ß ¾5B¬»Ú#Ý8¶ãñõ4ËàAwx§ÊÃþcÔTÜÛñ² Årø®íw¸x7Ki×(k½à8à§0çùì¼ÁÎC¼ÏÒ×.ÞÑ·V«¡
A&¦7ltGmímhÑæg¡:ÖVìèÃî´$/Àx\Eíd$ÿmXëØª¦Ù@Aù¯5ë7iû\¦ËûwÇ}6ýù)XpEþèÊó;yÏwê®9V¨Î,}JådC
¸ÀºxÚ MYåôkLnÊï^BuJM
øæn*g¼´6Æ3[sqÀÙÝñýIW6þ>ö|XeÊOµp¨>cRáfZQ#¦m0o¹@$µÇ3¾`v«ôöÄÔgZ]²«Úbo-riaSÔà}²£~èu´Ó.è22vE¹z5Bíþ¼mPÝE­U¦!Ã_¦¾gö×~Ö¯æãA½¯øoì.Ü­ÛçpEýõ~pz0CTFÓlêiv¸³´ ó(m·ÚáêóùÅQ¨7E6 uo¿¾,QJjà8´ÙÙùÅx>ÕÒ	ü¹ôlwFêç;uS³ÔÔ4¹cvuåÐç¼a¸éR¡ÕÁ¶Êiöe¤çC8¨
ï=!VS¯§m	Ä¥Ñ}ß`ÊÚúÅÖß¯1¯Ñ´7U¦êsªÅÈVÕ§)÷«iõøÒ¿À_;zvz!+ñÞØuC
IzÕÌUK.Aäj±å}9=:qH8SJÃlØFwg­uûàô:ß_`z9fGPc9ïB³CÈcÛ-X
dèAk½sýKÕ$§n8n,tj]¥"DK=høS%RRÝ!à¯;u9%lZßK83N¶©$!½>dm¬a%ä³Å¨ôZS´áèÔ{Ó;l5VM1¼°p51*ÖÔLÓj"ÕËéÀV¸d¶âð~MXê¶ÃZÕ´7·zzgN
¸Xä °;3ÈìÌ óCßçzúïe¯EÜé»Ò°w¥iª³Ë´8¬I4²ÓÅ®¿Æ|j" íw¶¦][êHcjØzpÇñÅ®vümdN$jÛPIQÃ`&iM÷;Ãº+}3Ñ«Öêª-5éXÒèñùÎ÷u}·Só³ÆÊç×¦ÝGÆµó5è0Øºu¸1qàer
öR°ÞanO4³tpL¨µ ×[ÙÂÉÖÐ>!CZ4?»TÖVÐ:+È­Cïx»/(} è[þv3%jrÑÌÐTÓñÄvºÜ?Ò}v'0R¿âòanùåÉU6.^VKVÞÙ²ÛbÇw( æº¬fÃe·¢@;[¶èI\ÞwÛþº½~Ríñ«ÞÏçÖ8·o¦ô;(Y7ðNÞú¼ßÛsíØ;TVV`Jò\ötÎd7ÃcyÓé)
ÑNÚhç»¶¾ICSÑÝ¯RÙ%£)Çè|YµÌÍ%vþò³Z±Hx¼ë%©=^3Ï,cîÍ9ÕOtêÃÜòò}ø£Î7HÚ=üä{@v&FþÑç¶´jìÐ¾¼ÃÍ§*Ü^ÌtðGIâ»l!ôCVlå¤ÏºEù'Ø÷d\¡¸ìéaRXÞL÷ºÓnCù¡E%fº^{R¼,ÜxQà{rkÓË	Qh"~»$ë~QAIl;ÿ}³dAÈ\¨UÓnCGÑ=;þ/vä»ñÿrÝ¡U0i'$(sú}T§qºvC ä¨iÄ¢n&É$F£f{t¦ç6§ñçò¤	¾q{e¸ðÄ<Å?ç#¦Ç­y¢2rôÔCùì,ÿ¥áÁ¹ICÁD%\)§êÍSqÍ{¡l7ÿ»c5åá
¡Ûtwû£ÞQ0µææz%ÞèóUOEÕhvý¥¨ú®'^RJ{{Ý;ºÿzBZ¶6-Í_;V¯wy¡üVxôË «ëóÝf6@õRË;x±ÅºzNNö,ê¸:l¶¬.xt4¶½uÜô(OEÆ>¶%fç$!>±¬ßWjSd 5>¶M½+ÙS4>æaÕ®¯§Õ3ÉÎ-,Å³N¸ÎVä[èÇù®Y¤ü8w&gI~äcKÂP¹5çKÅòÜãMiä;·'±ôµnú**¤Ø±uÍ¤QiÖõüËRW¡Fn[Xµá3[W`È
F´Mý.YÊà¢¢_HtIºVÐöI"-Ý`q{ÄnN)ÝæÒãÚM#VSÆ¥îßÎGa[Ï,)y8í®þ+êªê¹©ÈãßNõ©#ÿJ9§ôo®Ãý{©)æùU8?¿ØüB;e£¼ÐQé³f:Vµ¢¢®²]àbûüV}ÄorGÂ.Í(ÑxÜ±e«OtWæÖiÇëßQóºXGä®7?ÆqÐnÝ8ÑyeÝªà_zÉ×\ý¸7WÈãªó¸BWX*Ìõ¹<µmAùøzã?üÆñßóç·§Ít¼j®G¶ÚãÆX< zA2¸Þt ¨ê¸^FÞÎÕF×ë|=zJÀ^jCÝ°KmçOGWÒÉn¯ÑYÈÓU±äº,üç?êQ¶fç **dòE]ÎUÈ¤ªi!:}ö`v?oûâÀ½ÀEªKN²yòÇ
¦m9ì¦ô½èí3G'ìº·ä^·hTúdö÷èµòì«¿³B¦ï
\Éª»3Wn¸½U½ðøsb¤)Æj®HHTÛ,äá¢±ïê}x²oYuÌlE´ß\ÂÈÜ'ÛøÁÅkSÊj`B·¥Þê¤Ø]R¶º %b5¼*¶ôWl÷î&üuÿMÁD)uþ3Íû'_åýuÿÿSXï6SüÕ2X|ØJ¤(N¸ÒFgæÊt?¢ÑÆIh!* "t¥cé*y\.¡1×¶8	Ø]¤eðwèFÃZ8i(\ÌüG25¯óòË
¤w¶U>áûô)m6QC5_ý®=õ6}TíðÊùxº<¡ä±%³Yg!4î,Ýð¸g©aÐ
@Ã>4åÓJ[ ÛË;£èQC«úv~w;ÊïO6L£Ïýï[ýuÎÓ+þ³#à·8|îì¸^úÆGy­ñ½ÅxÂSú=q°qTa¤"Oæ[AÔ=ÐÖn»âìn{¶ò°õDí	Ú¡5)DAw`Qí À¿ñÏgG|	¦0?2Ûú-¡Hÿþ^j4<óü o×<?h½
V*^+<"æüÀ;ã)mYã¥á¨-$·õü_Wiìíºnu}c.yRõÐç-Á`q!A;p#m^åU){A×ÿfnþO% ýøÕVÆ®Þé?ïòöÁ¨GïôPNdÔzÞâÀ`yd§¸·`­
/©`Z^hyGwÉýqhb¢X´µ¾ØDóFæÁD.ð8DO.)Q½Ôs¨8ÐëÙÖ| ½.å~mMG¨¦æÆµøåÚ÷®!4¹`În}q[N];moöÀCï|:ªÎ«+<é3îE=È@|w³¸:#;föÇ¹G#âü<Û¤*Õø÷k­wé-cëgÎ¥t@ ü/oX[ÍûUó©g=D(W1M³vWÙÉ+ìmxÆJ °3¥oMv¢­ªsÆ$<;<cò}
mÆ{³¨!Ïë¬Kñÿ­Y_ë©´Ë®x/k'=Zî^þÞzù,O6'5töÞÆ,¿_Ö¥£è<Û´(`®nv¼kYÞDl»ó­Ç2ª,-l =_6¾Ð:=ÑF8­	za«¹7½éf8¤9i±!|m±ªâxmý¶/;#?§puLçü4JPÚkÐó×Z×q=rêsÇ@§?[û>Ò.8ÇÏ¯F¶DòÝFûDäÃCÑw±vk¸2@ëBöÙi¨Ò~²î6H?øÝè»0Þ3¯ïÏ®ïxuËñ#K¯ËeºB%ÍK5ýMÛc¹ñY5í5ÀóÆl`"°ñïL"pi´QÝ£h>Ôá)aµöz
Cî×må@#D0¶u*iÿÆ\çM;Ë´`|{ú¨©:YA6RÌÇ:²]?uðþ?:ý÷íå¶!òÆ¾áLE&½j¦xªeæ@{ÆÒzÁLD'
ÅðÅ,
Ø/3`NÛ 9ZèÞo¡Ø´@é1¹@Â @9át«+â2Q'(Kê|QÙ:ÿ»È^!t÷÷\kñá3øçÂ,¬)/þ½+kRU[ÒeÇ}l¢®ÊLGtG "`GßQY¦_ßjYµËÚºEÏ9÷Þ~Ú,Ü@~¹råÊÃåº¯ß{¼ ÙèXÕN
ÌÔl´	Åø1(Æñ| @)o¥ÚâF·R4(6Út9ð¼0a÷»2DêCÙh<ïHýïÿ{î£¾<êÈh|=Ãñ1xCúá!ÎxyÐ'rJª;£qÚ³}P/G#r)6äHÒt5ö ãã4±
];RäilLx¯Õ0AB\T5ù­ü¾üü8¸¸ç,xÅE|¦yæäùªo&ÜN/6±çTâÊzèìü	¯·ÐpÈ+uAàbàîJUj­Zµ±"iä.÷cdMhÚ@0cVÊ^'±Ù ÄºèÅÉ_cØnqôµ®ßh9ûíNß.ÉD"·Ä¤;`	"Fµ°çIÒ>=yilN ¨ç)ðÛ!ÁnÖ:b3å  Râ|Ú
K½BcuÃO=¿ü%Øí6 \T?Øsö;ÓzÌÄ óÃko0Ï·ø0±çCaLbãrTvà%ÓÉÅXµU%Ãyv
5ÇÚz¤IVÙ8ÀhþºMú5zµ(­~ë+ûçnëu¥ oA¿tN=Çï?þvF¶7yò3ôæd?ï$Ã¯¥öÿï/zyêSBóOê/zFéf<ét^¸ÿù};¦µg A8³ëD¥ÊHÏ-¶ôÄ0Ã-·µ"c³Ã
K+V¬Ð­ 61(ÆelCcûbÓÃµÏ¢]½¥t¼©jöéú«çïNx t¯BP¿¯ÃèküBüo_nWfô1·hÊ8 d]©kÞØ&Z4KQfë}¾éßLÊÜXÉhçfÞµõàÛ9×C	¥M!Aâø¸ó·>úÝÞ½¢>©^øs¾>{Ë{¨ AhT«W<$«¹8]f§¥É¼[Î#0éàÙ0oöÐ²8\7*M³Ý¬skJpÄ	73a6nÈ1éÉ*^¼´ f÷½à[8¼p${{'òÅR§¡h¥sÆÊGÉÅ×V	aRy#
V$cÇM3]4ÛVÉ´.ðÓG%ú93ófÁ2kòp ã­ÜJ£×5bî¯qí}ê	ÜH3¸ÅÖë0óÞ\ýFüÄào·ÞÐ~§iØ4-ÆªÝÛÂ¥.ç¹¹kWµ LÂ¶Äá+g·*´Í JçôÎÃ[ù£¤²ÅNp|d,ßgõ)dùK^ô¡ð£¥=?Ý.}«½åVìß½Õì;HÁÛÚcxÌbºÐx|mp¹¢}pÖB®½ìÀÜHjº#¶w29n6Ñº&Æ«DWÒ³S¥R®,à-¡åó
«á½R®=à)Kµ½F½gÇ<o"ôquþÌÁ¹m¬½âÝ¿Ð<cq¾zCúùö1|°0ÔQ	í«]`Å6#®V
t1Õm:qaÏjïì3oZLr³)Eæ kËèÄÈÖ¢Ê|¶Wh<_"J6§*§l3
è7~\:®ºÍñû?¢^ñHÿÏø®4ÁííÝ+?Édàsðõ;t ÌÍD² ¦Üh¼°¬Ýé&*2Lf <å·k¶J¡"3H3eÂÓ+Ëfè
:k":ØI[ÔHYûB¦
W Òé>r0N_p;±sÛê=r½ËÃ}nyöÙsÀW5ìçËÞÛ­¿ ^ßi^°<^wê=«o2QBãI£§s%1y"0]¢Ø¼hiªBSøÀgkn¨¥«iÛDÁ"£­nM©yÞMò7×ÚÜT¥>öÑS.ogJ¹²ÍLOH±}BT\+{x»[6@	·.år@w[á|ú1>ª·!16Q)óU%{R¹W,ÉÑÍ°r´õþuñ¾Uíê#iÉ-yrTToà~¹ÓyAä¾góÕ­³6é!CÓZ!Ë A­8Ê«ÐÃ.MZ8L½²¥IìMÄÛJ§lÅ¢²)Ç¬Dmµk5@YOARUl¶S Z7U9|Êt#Éø:âí¹òoÊókÿèO,µéµ
,qÿûöúthò|ZÈº'Aø9:ÂôHûX´×ÌQ=Ë Y lVi]ËËÍ1GÕ!#v 8/Ã=hgðü\7R#	>SíYµU`'Z÷Ñû-BÿÑZGS#w<ü"(=Ë­ú´§ê\ñ÷Üµ¢©s{oú)øî	¹£¾çóaÊZÃ`ëpeÇ.84Õ¢Ã¶¢7¼,k8©°ÞáÑ\±ìrJSêú¹ö4^Í	çG%xS~~	)N~òþÙËKKÈè1ïo`¿%iÚ3 OÀ<k¬Æ¿_-R)ë`°Ä°Õ^³*(BAUEM6÷û5Ã£RÜ"1
íà4¤dVwQàyò#y~Të[g¾÷Olûrû^ÐéC(ÿ·ß|ùþ÷ÓáþûÿÉöaúFëÊ¬¢Sê+å_Ç}SÁJ
eÑL=W7»à°Wf rKi3÷é¼Yb	¦ã<nUSTÌ1¤Â¤T>2¿ÄÁx&zSPy´J½º ô®$w¿+Ã=ö¿à:½ý/@|ûåIGêÙ5QÔ² ±ÕÄj
qT!²vÍµ¡äkPÖÚÜ#l0÷
³eº%¨àäj lð5Eìjm*
LÝàdHýZ	ù[m{¿g¯|§FñX{GþIzÚùÕ0¼ó·Å|E{ßxÀûzû\³Vo6;R3ZËT+3°Ç¢
ø#²ÓænØÀY#1µíÉ»½´NÂ%k£Å¢ã¬CÐÊ=TºIj\HÃR'qmf-{ýåHøn\´ñæ.óO9È¶[Z/hÞéÓàûÕÛWr&YÅÎ¬DZf¡¯ IMÆnªfè{u]6I]
ºÍÔ4ÝIjdv¨+Ì&±ZÏxê+x÷h?ªev¬ëÃÖëÚ¿÷$ûù¤+ÊgÞ~e¹Gjr0bÆâúT+,)"&»xft²äÐÚ2©FÜSN¬æ*gÇbøDe:pÆó!ëÐÆ`D>ÝaoÌx,µÈ²ü\Eë:ï7eÛ­¢þK'gï<ï&ü)Ò»îÍæW¦ñ­G\$ï×úoö²¹9k²Ö;@ò7@T.Y#SÐÃ:rGälMÑn  
%
a.Ru0$:ÍvVÎjJDÁZV@lÿhv?³~_Uy ¡I¢Ý Â^Z~/ÁCçH¬ßò3Ëa'¤hRÖ²©jV	¨VQ,x\\«jU(8l$»ñ(Tg9+çYêTEGätÊ<ñM%¥¹{:38¿ýôøn?.ZüHó0ÉÉøaåî8ù%±ïæ?.ùÇ?zM°®÷îï¢u],ö¢ÐÊÏ_¯Å{äÔYî»nFöÂû&«ïåÏÎfJ÷Ë[='®}$=$µ·ëqú»ÁöSgFSsødè²¿JÑ Èæ8êÁ:6ÐNÑõH¸u¨ÉÁ
ÂlLw~ âxê
¬N¶Áh0?[¨¢o{ûêôSüÁôüÎàtÀõ³u~v6:¼È·´³wJ±XÍÉt0Lµ+fJÕjÐ¢âtB;NUÖo»dÝ­$¿õHv çò2±¥öm°áRÙÒYfvú#,÷fä¥±Ì½üñì'3OóBÝÃV¤S·%
^µQÚÌÚ|ØzÔ¦6W¡>{d8Maë0®í<'´%´spþð°¦Àþ@ª5À³~ÝVìÙSè[WÇg¥ÿ_µ¿¿õ=ì?©9<¡~üç½ÇÔc¼±¥³¦JíÁ´lÝ2>ÓÚñz´*wh1*¸%~
c
ëô¬Ñ½«fô!®UPÜmºk¹Å«ëà^#ñxß2­F·ôÙ_Î¥·z)½öê	¦ësènRòu2Gw
%«9ÒiÈªëHéÈ=¶TÄÔô¥3dù}KFëÚ±d6tBX]â®ºÊµ7¨¹n1Ñvþ½ôû9í®ìð8îºà_Ûy|¡;xû:ê»Ç(âK2'¢34CKÌSîB0H®è»%m[Y!KÁ;»=FY¯Ùán	,Úl
¦{FM%¤'T×_.r~¯k>>Ãëï9¿P¿C y#`ãÊd+â®cèÒU#Õ}z´¸Ãáv
Ø{¸ÐWîÀI·
°jv+ì ,³ùè¸ãOXnÓ§íÏá[¹ðùÖO}¥AfàV@Á¼;"·su+æ¦¹R±)Ó±õÞ[/¦	RÇ¹¿¡)ñ8r%;ì×{Øê $ÀÍí	Óãç¯ï íéù·ÿ¼¿³ø§ÌÐ=8ßØ~Rý_ë±ÅUf#k¿Ï´p­  Ð)§­Y:O&µ9ìïC×æÍÏºs-¼vgÚ> Á.æÝà 5L#i:]cGêèßÓÐ¹vÈý¹ø\è^ºúbAu`PÑ§¥Z¥ùcN'a`nK$].ì£yícei¶¿'qaÎåüÌ6MTìxaÍÜFäËp1Ç½»Ü.;PuGÖÏ¿/F;ÿ½®¯Ûþ}»ÓW	JÙ&q}»`ÔzÅjn]×E=\¯Hsü]¶ä¡#}¡3ZnÍMæèXÎIß_òiÊ3¸=sôbctôhñù}	_Í¿`÷oø»üÎà«8I¾Ã{¼8gÉô@uÌ4B¡Õ©}0é¬LZ+u² [9ìpÃqDP­çS(`ÜD¹E°{>ÐJ±]¬$1±®Ç$f{¾²Ýiâ#MùÞ?ë}>»ÜÂy)Hôä÷s:v½ Â´e7àrKÜfií9¼sA|¡êâv½MAq#%6À®Fic³¦¹ÊÑ}=LÜ¡Sq. âÆ£Ùõ½Xxniòö»ÈÐKùí_	Øùex»ía/W®i²Ð#ä»¸
4¶±qÏj¢¼Öâ¦pé±=NakA
Ð+|¼5é@Üf8ÎÐQÓ@Þ¡¡ï¦óeñSï÷ÅÏùÎ¹O¥uå2¾ðæíTóýü?^¥Gÿ<öd$ýuÏ[ÒpÝE¤¿4|Ò=ÃçèíLï±,üyW¶¦*²¬_¥¾së®Qî2È,¨pÌó<>ýA­UC¯eiY{÷îÕçÊ$ÁPâÏÌ`¢¯!MUãçQD¢]Ðgk$lÈcb«LÆJ'p<âwqÜÍ)UÐ
ËV ùNtñ,p·#Ô7ÍS
©	zWß<×,¯ý zâçKólÜ  =>ónj²0WgvAa¹³Î;ÞÕ;b&ÌÁ=4Ò³´¯sy´Ý½ÑIMÆ0íØ!ï°Üº¨E<_aÌùÞ´u½âéÂ§¡'å·è_Ozl>XQ2¼ã©áñò'Ìµà)©Ê§0¯.g0<û©Kª§FË'ýÉIóL§´æÐÝ|TF¢ì7¬'ýUñ[Y5Ü/ÝðÀêÎþõÔ¸áþYT
Ã°NõarËµâÂ«­3é4i¬Ü®Â?×MM®§é{Òp¾st]3?/DÏéÒ< wÌÌ`\¯ô<VCÚ÷ÕÛÍú Z4Ugk¶³¥Yõ[*íÓÖ/å]
dGD¼ôdíWrBØVMÕÒèMf]ËíôW>Vw¿6Ï¾µýò?ï®Ï3îÈmaçlsèå¨ 3EñÜ1ÍiSf	[Y´HDìP§Sd"t43c³!#ós<©ÒbUp¦E:K¤¨ÑÄB¿µñþ§ w÷NÕ 
WãK}ÎOìq{¯ì¼×Â+.uÚm_ÝPói ýØsÞ×»c4¯[9Õ ©5¶ë±Ç³çpu¾u»ëúuzCîÊYÙ´9Ö7:¼]×M×Ç XÍtDL%¸qL,<ykÞ4þ¾¡ñ±àØ/C0~ÏÏ	£sÜµÆ'rð«õÏÔ_FÅ¾³d¼Ã~U'ÌÍí.âÉ\Êu<íí³}]Éæd¶­µ Üb½Z'$|èôzÒ7ñF¦úÚÎÂ¦2=rUrm×h%a·lÏÜ·)gøoBñk\ü1¯ï+ÕÔö½>ß~byÅëßEó2¤ðñÙU±éÆJ¶ a`lQl%âIUÛd6[ÛP%m´Ûëb²ôF¸äúq¹þÑÁtÕ§û× ëy÷üÉQÇ´|$ý³×{±h<!©V¤xgvÕÊ3k¶.¨¶<Ò³ýÎR¤w¤±3ËM U¼HÂZ1ò¶õ÷ÝÒ¶rÖÎ xtE¥´úÌ~y«-OçÀîÿyS¾_÷?1-I«;~¾Ô»:¥9Jòõ>ôÝ{¤ÄÁU¥(öa}ßv>¢RÝaÐ½)w¥LãÈêKqeô6bøÕÖljkªÑí2
¶¦³E<Á'Öc¨ùFÊÔÇ¥è
íúO²ïÎÑþzLÑot/£áÇÕ9ûz²Äåtåq
deXq:·Fó5(9$$×²/ô®Á. =^1m»½X%ø*JBìÃÃxn;¬UòÜC`ÿ¾6'_·¢®×GÂ,>Ò~ê­ãùBö6\úÔ$ÏjJ%n ¦¶gÇæHK³}áµÉm]ÝÜ9Óz²#©äå´å°^-ºm
¥°É-¸>Õï4ßÜþK¡6õR®=«¹:	xzOøòëå½P*Ð¼Pv{¤ÉFwóãCQÃ 0òð>¼H¦£Y-y¥µ¥KIÞ¢Û,¶Âd©°Ûô-Ãj×¡Ã+Çï*{TÌä·q+]0°niä÷÷_CÛú ßuÞFU7ºÜÃ2µ1jøe 5[lïÙåó&¾ÔZ.?A6ÆnmRÃ;$åÇè0ª9CD¶PûqwÓ?AÙ&ß'§
NÖìCsûìé³m|Ç¼ìq!@;ö	­ÑÁÐeøîVMqìµ&É¤#¼ª,(fTó¸ÞvW²!ðt­Ñdq6e¤6ªCÈ/nFÝÜk¿3)îðºö`L^¯Öê?¸óÉlzÈ¾ýÕo\ý«;÷:éc7­K)æ¹9N·ªBQbe®¥QvPéS¼Ò×­Ñ[Mñz¯[2çî$c)dX¸À°*mÒ}5FSûqú+[÷¿2Iì*ÏwÆpç9M®o<Õwå7^ýÅ{cþú.¦£jT`¼ïp4tËßA8Y»k¬éõªÎ(µCçg±\­bÓÄ¨U
¸ÁUgK~{ËArØÜÚ ø÷,+~©»}c«íl.<ÄóâÂñû/6É÷ÂïÐê¼±ÅÁ
!ëV?ì¹"eÍ4$ÖÙÄÓÚ
,à&È,³ª9bô½µL(+}Õ EÃ^ÎÍ¿ewþö*êýt92óò¯Êé¬ÎtnÛZ5ÙQh1ÓönèÍÒ=»ÂQçk¿²»(`pØ]8Tºó­ µª?ûµæ£Ù­ËÉqÞH9<ÐoÍ¦O-Î7õ}©]ÿõ}ô¯h¶H¿âð±¼ùÆ½Yó'ËÆTF#5kc@1cQ5Á&	L¤ÅÚK1e$£wc·A&RöX¥VC#­`Â¶ð}ñh cÝÞ#Ü-5õ·±åè§Z+Ï½_¢}Ä/@}èº²)Ð(8ig³©HL²u{àCÕ¼ªX#4ÆÏ	ç<;BÒ¥yá÷s[9©V·bÊ1Yñ;¤ÚÉÍlm_ÈªèxÕø1ÙW°:S}éÜ~Ýg%ÀÌ³±æÛ.S³Ü¦·ã³Z^»~[TMHøÒX/  8Ú°"²¨±ª´½¦,Ããê ¶íÍ¡·åx¯\zyÛ×¶
?ÿÀÝw×;6ÐRÏñÉLUÚî¥
Ö.Â{4©NzD3ÄÊlR[d
Ã

³Ûe½TimbÊªõ»]¢²KÙ\ Á©¹ù­eÍ?Û2¸O1WP|ïH_0×q6¾ïz¤	;åqÔ«EÄ&ÕÜâí«RÙË§¡Ôf6¬ããÚÌâÙÚÇ¬âó¹ÀXÂëÆâK`L`Ëõnïo¥þ+ì
oR'_Ià½½póÜ¼·@kPKf­æ»½r fZÌuf/O¶ÊxËÛaªÂ*ÇÍg4KâvÀeN7Úùdb$M¢[²Wºs»ýF)®ÿ.Âº&F¶$èÆ½V'.|+Ï;gÅµÍXJ¨îÔ¨T¥î¾m,I*f2ä­rcÚXFjUß·ÐÞ/v óÃ(×·ÿû2<úc{ùó¤ÉÃ ýü/ ý|ãÞ:ñtëév9	ªv=Ûëk·6>ÕÄ$$Qh/>¬f5Z÷@"³ºà­¸%D	#d¢¨-ÑYîÞñ+³wö;MÌ³XùöLÕ¤/Eï4jJT½WûØâ~áãk^Pç8kÃE¶BüÕÔòJÜAà6ÜÀÞ W%T¨¸!©5íi¼½^ÇkU)÷!{ÏÇ>ø!Ý{¡úñ%Ô1FØ»kÓh3z!µÝÚë¢kJ\öª²8É½m;ÓÊmdGÄ8ÜïÛ(C¼Â+úù¬ì·À¤¬Vß¿¿:¹õ;¹S?ú¯ÙWÄ÷;Ú¤ßu<_ÈÞÆ»ÒÀéø¨,BEÚ¼f·p®meÞoöêÕuµ*`ÒMÌ3¡lD2q/¢!ªTNN@sßR\þÆ±spü¯=«ßûýKao,=ø|ûì!?ÐÙÚ/÷Þc§éA]Gh©ÉñSR·	¡eìMº¯ÐÞl9%A	Ø)¤£OyÃóXgZÃl °MTLP
ÞQ´=Ñ2â¦ÿüo
PnÙÈÝÈ¾4\ÜëË²¨8-¢7À¨eÞNvuGZàh%ui Õo«t"/
Y"áA²¤a#£¬É¥û"·.+ë7×_±þKî¸ÿ+²oP}a¥ÂÕtÙ}/£DR£gæ¯å¡:¦­ôb$ÖsÍM¨)ØÜWònÒJã"CªlÏí¥#Y)EËRþP½ÙO¿}D¯øL}{$BåMm^ôåÎmä[Êwñ2%,{Sadñ ÅåFiÇQÃËS©³PdPà°Z¬ZÇUÔn¶ÖO$1l±H´	Öýrj}¯°Úëxm(Ïì>ï=r Q-Ï¥h³ÔbÝ®ñGuaìÒAH^dCHë;»Ý~ëúpqÇ-f3¹ðçËMo&D+Ù¢ÛXô×Q^¼·oË¯JõÂ"bÓO÷ãQ<Ï¾©$n®¢8TKÞ¤L&æSÀ·WÕ
äYyD®_Z´í#e¼­4P©/¡-(,Æ2ÿ
÷æm»rçÝ#¿Î±ðîAQþ1ÐzåZb¿>û!¿æI¿:ã_²ß_b)ï9´èëFP¤H¿2 R½Rðm?C÷¥cvª»)ÊíD#b¬ªµ/Ù½	Gî<ñÐÎ©Ý^R­/õä¨xJ7¸h£/\µ[CAEàÔ7bmþ÷Úsl^åy;haõ¬óJïGüúÛ¤ããsaS=w.ão*»<J¾WzW%øHuÅÓ >/$n°Û:Ö~»ïù}@U¢ëªCW©c\zM­VÃZ3CñúÀ®à4
qÈ¨wcÝ) )p»I)+ÝL¡[äø¡"ïÐñÂÓóß?%º§mÀ+lRI¯TO¬üÑ>ÇnÜ1ß$QìÐ  CéYÏ6NU Bª4³z]JDO¦ôl#ÁÊ-z4Úuª.ËGäcïÀ^û±È,´O¹ÐéÑµ­øÉc<8Ñ¼pàÔz>Ó¹ýþMÚj*$­¦3Ì¬hmÛá®¦!@²òbD.Qñ:+b]¾	Ú@.¼°£¬¨t
6dDÊ
ëzÉgÂe¹¯¥ÇYù£°ñÅø'ñ¡ñx¹¼wHZq
p0ô¾n)>Ï4nÃ°V«Ùèý Û@ØT, 
­[H³é4m¢ê{
XMÓý:]¡	cSü?ò®¬IUmIÿç±	7>2(Ê(cGß@Py!¢û··híÎ¶´Ü§ïí~EAR|äÊÌ+3vè¼QxÁÑí=6üÈ+/0¿ GÑ?²}úÒ¯üîÖéï'¿£{ÁÿutY} ÅxìªHRÊz VËò&¼ÙEóãº¡hlKüÒ|½¶5TîZÎúFÞxü©uq2áðdT¡öí¢×vîþ.HÜQ]º,·,Õ!Rû$Nð°O§G'ÜGîäySÛLm[KÙíÁ/H·-ª9jC½ä°Bè0¼¯SÀ	]V®&«WêhÒ®dcª ·Öbï!W_öo]£ýQØÚ³
5õhøëµ	ö­PÎ³PÞyâ+¶w®{t½ñ²B%ÎÄÙ}ÇòæAÆ
ÝíáõEû®ÜS×o\hÒ ¡+Z²±-pCl.¦F¸ümwjø§±ó¶/`a#ä±ÆV"t¼ÍÃc¹1ä¬ÛÄ£¥m÷e/ZÍ5* ´¤dMAÚ¶u¿ñÈØâB¼·ÛÞüÊOnu·¿ô/4ç?ãÈå÷Ï£ªHuFnU:ºYzq¨cõýHÇÊ&¼_jc=õp¬ðôpFÞj¥î)r6P³SßN<×²Í"^íK¶9Ï÷Q)ïêMu6ÈÎ^¼Û>±sÝi³y¼Güçã]×Múq³yñXºioúÏkÞ51ºð^®?Tj;_yÍëúáVCÑË%ã)/o\
øüônç}WÆ9$/ímEbO,Ï¬~F
÷9þÀ« ³©h¥æI]x²%Ýtªû4«.Y"~­g°,®£õ(JØ*7¶S0LáÃYÜd¯5{¡ç÷ÜÛÿhZ¼Ø÷czÉç¦ØàÉáçÑ)ðÖHÃlÉ1ÄLÑàèk`¥ÄkÏs¼KHÉ\`81«\ºî(4U#ef.)4GïN³èoV5rPç¿¼¯fô¥ùÆ¹Ä²ü¡Öð÷ÿ~[N'õ8ý,
£[9ÏUmx¥:°êçñ£µÚjãûF?¥KáDã	«dbÀo½Òî0î:+bµ¢¹a6Î aÁñliõ"ê»%
©PUÇw_÷Â,a
VÏYÜ$7½ñçýúÛOçmtFtqwþ
d²ß1³ÕÃ};±c	Y(°×º¤é¼et2¥t«"¾?;o¿0ÅÙâ«äô·ÍÊ8jÆ}U4*pñî ÒÛèÒµædGÀ{ïÔmè1h:(S1óÕ]Tå1ª}S@úÞ§p%áÂ´
f[9Ñ ^÷u&È¨P§Z§iÖfþ¼òÍG×w¸(ìÇ3ù5ð/ny6NøÍ"q¶q«Ýÿlô|µ4~*&üøßOÆE]ãDöµ|$@D_zTÉ-{x0
pû|s,½¿`utíÙ J¼ÔÆyUOzCº¤CÎ°³rä¤D­O³ñ­2äwÑª<v£ôËûá­¾ýÕÞPûpúë{ tiVï]>]ñyGqe>Â£\JòV1g·%S"+d­ :û­êþ­©Ý¾¬4{»©LV¬Dß²ÜE.	Êí-·~|~ïÞ~Cê2](ÞGò}a©Æ±´»ieÁU«ÖZ.n(e¯Ä Î&µË("°aq±°'m
rôi­®A[ov=köó'd+«Q¿òÖû
ß_z>Ú²%îÌ îÊ8HéÔýT÷áÞ/jÐ³¾9Ø±`§Dâæá@¨.cÜÂüvÕi-â0¬Ïí1D2õIÕ2ýÐmãö-|>x2ÐKËîå|ÿâ¤~ÂõÏO~êùYàô7°ÏÔx¥:°âçñèBë>\¤TBçíØ¯)¨©uÃðÊ°ËfPá×S¬dÄæ ²ÇÈäOÅ>?6e$Å·sò(ÂnPÑì6<?õunßï1È¨^¾Läÿ>¤Wg<¯¡~ L² f»ZãYû¡!wä¾Ò:¯eâÌ#Ó9dó~èµµ4µk;Q¨DÖrûýt:Û±t·^Ü=×à-)IäÙÏ6·æïç>¿ |\æ²²¢BVöÓ>Þ8«â6¯y$#µ²KUíro÷Øn>VÖÒ½~B÷A#8a7^j²C³Bïy_Tq+]?xÓÖÚóÈÏÞÚP"Ç_É½½C?\½oxùë¨Õ3I¯T/z9¡¥X,GwjDí[X1mD ÝÍKÉ0KQ¨ÞA
É_B²Øym&(BXÏR}«Lt­c|¯Q]Ì-hEóÏëFÁ)wÓ \ÂGßÝðor#w«[®ñ43¢/¼GÄc¬($©×`^6;¦y24yFKÒ$ÊëUÊéÓ>è¯Ìtm ©±t#MFæ¶ß;o2ØÄx@°K¤ÖDCÜ{¬¸çàÃì
ÿÒ~ÀÄ#°ÞyÐÕ%"ñ wO±_Õ	¯,È¨1K³Ì:ÎX[EÀIÖôõØ{èñ ª+2$¯Î¬¥¶<ÀÝèkæèU°Ì¸<òíu¤¿ñÍôýèr÷}zæDHS{ÅìJn7Y]1cÀ.!3ÅV>?wVæÊ4ÄÕÔÙêþÄW|MæfÃ.ØAùõÔj~8ò¼îuÓnÈJ¢%møC àãÑ ò§îçõ.¸¬Mw4îcê¦Y´¹©nÑ'&Æ+É3C®e&Ä@Só|ïËs·Vç«)¬ãzºIõ{r¥²©áÕVÑ¥£5âÉ;zB:|ºat?jÕ)·³]T¹g_¼
þýË7Îüq`ÿä5vðñ?
/¸Ñ¯wüçËÑ¼>ý/Æ÷+7.ë×ÑÿÛËDÿ¯6?\Îø_ÆÃÏYSa¼S·nJ7
-Üíjó³>Ñ¾ÈË3z[)ÎÈ BZNvCE¢y|9àÓu»=5Þ¶Sl&ßýõÝdyMÇLEqlU»ßaãªMÁ>é¬´ok´a0*8p«à¶'ßFê=é§÷ãÑè}:j%³&;'/¬DÚªA.Ï$;[±9Â»1ËB%Ø&#®	øï¼¬tf»"ìÒsqLEØBÏ
m¤"nµpü
¦2j})}®ÖGÒÞx´ì8¶¬P³Foæg#Ó;rSr.ÓÖ£[Dôï`´¾¶ôV§ñ)><å`#rêÉllÚÙ~ª¶~»¼es¿ ÅêüõK7½:24>Ñþ ðåÌ¥!Î&·É uæs4ÕóC¸ìNõJ,§^&í)¿£%5ãÛ¨t*òª;JørËÙr@Ü`ÓeÝ÷²*ÿ,?ÏÅ¿v(	u| |F÷Ãøª÷^.¶k%=è)WlKvkÜÐt´¡4xåìæU`pjÊ8K°
°gb&ö-õQVWx#û:¶Û´¯ßEÿfl¿háôfxG÷
×K§uª¥'å=?á:®+--ì)lYLè}ªÒ¹ºv·bÒQÒºßxUq»+&´Ãæ¦]"®YbúMÏãGêwÒ*ÿ²R:ú>øHû
Ø£+ÙûàÎUGS~uiPl×rÑÙTM´Ubm'´b«ÂÛ ¤Å:bULi·¨keÇ.føØ#Æ¢T6Åè-x@SdÿE»^<ÝíõÖßP-Ý7>
£ëÎÞû<ÑtI_ñÜB^èg¸Ë
ZÛ5z:îÅ:W 6XC±èÒT	hêÎN»FÜ6bq ·?t«Vê+sõ<	w¿;)>ØçsFÎ-ýýl¨_qýñNa?
åu Û`6ézA¶w&²ÃbÔ/ó«N1a!ÙÑùötäÆ[TqðiÎêJT:Ø¬'W<	è¼¢bóü±à3~Þýëî¿7\.7>´Ãçîöþ²'û^Î¿ø+ý[nÚúÃÏÔé7z9qù\ÉûBå'Y~H£UçTh¿ÈvZ!&oD(_)7¦ #Sh9?¤æê­±²aüq=ßû
Ê´Uë~^ù×þ;xB¨Î¯ÿÓ$ª³äM°¾@ð=Í1tÄü×ö4¯ßã÷»ïpÙ¾Ó*MÀ\TjFo@K5Ø²/ùp£,suÆ¬uqÑKëìåLûNAkVÙ[¯@³Âµ!^E
þ5âþ6»Þ7×¯^ðÞTùº6ù²1óseÓ>P~­6ÍPcÉÒ©' Ê÷\§Å4¥2¨Á[Á×'%µMRHE5ë4´¥ÐÄ®RãMÀ0ÏH#<=ò
n7êöìHK|¶¾gýöÓÿ?róFük¹Av^(¿ÉÍu|ÉÊ{Àeêh{oOÙ¥jâðÔC]õ	Ýz{«ìØò@øzÝ	6Ökk¦8HAs ûùÆ Ð=ÚÄ
©¸èÊ3XmgkDM¸ú:ú?.4×N®¿g¢¸ÁADÎ?ÆkcÑ]lç ¢`ºªÐßg~­H²kmôSê8L¬¬Z±:Õ¸LÀ vÇí¦Ýy'F¸3Yõ¶9Â<b$È1Ë½[;æ"Aßjaû²¸ÎníJ~LQÕ¯d0_£µûâó\!A?©¾#.ç§B»OkÚÜEkÉ\ÀBÉÚ(8[{x¦ø«l ªJþ²³Á²dÓ5Û»ù­gå¢ëç1Ä?þá°a$AZíê º®g
*åÃdûáþñÇoð{9çÿ>õÀï¬Ü¦¿Þ=óõ>â(n^ïr/4ÏòrtIexàÃ[Û®ÐkE®rDÄ7Ö¶LíRkÉÂQþðu0	ÎØç×9îsùMÃû¨à¬|vÓtÌòñf¡>¯»Ì¯³QÑMð*)ßW¤ÿÂdàw©Ì¿â.öT¬ò'Ñ+{¯éÞØcQÊ¥+îkÕÔi zKPl}7[u±& 
px¨äj±J;|Ó¥9ÅÕÖ1¨Øºø<÷2dÉuIÉa·¶ü=Àß7Ùÿoê®¬IU-Y¿ß_q¢_i·oAÁA¡#N£2ýß¯bY¥µµ¤Ü»ÏéûT V.ù2Wkeæúîöÿ·ºè»ÓÔ
¢±uNÝ»o:_âôÝ!N|¿û )ül!%U[vÝ"gë}ÂWHÛ9sÄqæ2¦ÒµYðüBºØu@K%d~
à)dLc¶.ù¨ÀEéÛû|§
Ü¨øú¿×ªio(7h]Ý·­e0³Z&èÆ µ#Ô´p4mîL+M
ÏbÈ Ím×ôªãúÂ#ÇÃÒ1ÍÌkÔé	qf¾ÜºÀëóäæ^ñævö^ò(Ûl4û öþé£áµîWt¼ßµí°¡ä¢F¸¯ðjgÚ5:Lª
ÌmQW¹(ÌÄ~¸ëÍ<gw¢ £é`bÅX¢8G[Ã(ì#V5Þ}¦º¥,¶ÔkÍx[>4¯Jú-ñ´WµwJ1v=yÛ¤bH%ê"I ãÛÐ\'M%)×>ò&I¡ôvñ¬|RtHT+4%Ûí0ALæáÜÆåÁ¯åÔz[°yéÀ®ÛûñÊÈèÔãeãGµ 3öC{
¦P~~`XEÛ)jí&L0Úf%¶@Ú:A¾[|¡fî&!ªG&Âì¦{ Ò£RÄà2Ø3?êw	ë¥sÊ#1ý~¾×ÙÍMÛ6Ð=>ÌaæK FÙ£@ÆëµA$T¿fWq7@UÕR7
wa&åA>ÎR|;ãöY)³²}©ÐÝj6ZÐDþ½:þîÜ,³/ÎÛ^³3á<ç»ÎàsÖ:2ÝAøð8eÅpL¡àE$ÎX?ÄµÃNÎvzh²t]¸¤ó´^ªE]¦*%­w7\oôt%Åª{í½=¶U×u§L³%¦ãó«¬á·¿&÷ìT­xNGÃ_2omßç~jÖJFº7¾@§> ß·ª÷k_ÎÄÍ`±ÈqwpoTÚÓézÈ]´èò
1
J9µlÂû,øPm0K¢çî85As)(zìt(rË°ù%-õ~]÷_þoÏÍx{äÑúêùNö4!ßoÚR=CîÜÀK|2£T »¿Þì~jvkZÝ¨E¬,p]ôHX3%<I<Óû>Xrc¾®c²[&ÈeÌÂþ¾¾ºªÉ¸
|Óâ;Ð\*%Þ¯;
­çÀå^asÒÔX°ÃC©Ìú0 öapòQµÓÅs©Õ±¡£²Á YÌz-
Ânìþ*].dåzfïõÕxUQøÇ¿¦»õ¢ÀÎVòû°4~I!$çÄÓ)-´@imrJ)ª*<áº¾7ÒÝjjçõÁ´?#È¹ÆÏX
ÙÙÆ22æi ìÃk¤qw(AKÌÈû²?ÇEÿeéÅÃÍ×Jßh606Wms]È9|e«êÜ£aT Ka¹T»qú\Í0ÉÛiC J{>*%¹öb¯Ë(Cx,m»Õ^ÔÉvvENûE$[å%q{§R×ýOmP¿R«/çÃaNX?|ØzYw­Uµ
2=Rc0èj±YzÚP*'«Á.ñ@#É7y
×%$?bkv«YÐ×¥©½Ìû:ñKæ¬uÁñåóañùÑ#_ûDôíéªs&ôI°:0ÀòXÜÕ¶Põö=}I®Øé9}/£jâÌ*ULÜ,Ls¬Â$/
Ñ,HÒ*d×ì²ÚxÆåGïèÜ½#ùéñÑï<äSs_¯²¯ËuôíW]}Aåïÿöï~=^áYöÖs/Gº|©ãíUÞLD÷Èw·õ?RNòØgÿ¨+ùó¶¦çsuç»uÞÎ¼ÙOÉã23íæUÿcËå»ümIÊM¯ß§§ãI=\|E_ÛE¹¡}5ÎtÎdÏ&7É1öá¡¢ÊÔ³yH­G0»M»ëc¦W+ª¯£þzà66ßÆa!pÇÖw#ÚOÓ¤1¤Gî`N_Þ¢Ù¬?âM«?oötë:ûùyãÛÃïW6qÚÝH/±íìqÿåmyî#ÝÊQ¸eæÍ³÷¸oë`øÜ­·¯Åæíªs&ô\^b~eÏû4±°áV¨XRdpÁ<Óx»?øæhQCÀZzX,¶H,	±@Qê×åÅË;fÙõÍYÐ½[Q¸Y8º=É	÷¼Ñ°³#yüä¼ãl¿>JËø\w%vÇgïÜûé_uâ[§J\dÊÿÊÿ|!Äz'{¥sü³Ú"È²haH$Ì"!w<)¶Üp¾Ô}î8}BÀÁ2gÉÂ(½b#%hìDj0©:AqQpLáEc×í"¢=uXX*O÷W¡½5õÜî\¦ì~ÌO|SøÔ6j{ê5¼à3¼¦¨püÇ·ñIû~Õ­î$ß/Ê¸CÿJÎ®>m®Eu!*n=fÜMx.(&^Õérøòqæ3-RÌïäØÏâÉVúÀ²­ÐCFNFÍ=ôPEÙLùÝÿµÞâ_ì·]w4¼ì^Éö¥¡yÓã#xî¸ÐZæO+àòú÷-Àu²ñØþh\NnøÇÕÒØ
éÐî_ÿçúoÛùúií÷IÓÉ×ZÜo:Ù²e'À¦ªdTÈuW7âíYj&±@2ÊãQfÇn©ø´44èÃ;]yC	N¡Y<ªÈ6âL¡ñ3ñÔl©ÑÛÌ¦¨£ mÓ>éÂ¾ã/+Ðï±û%C~&}¥dÏ4í[ôIý|â¡¸ò&F¾ç9Çm¾¸`ahf/W¥Z:wëLÖ¥tÂi¢f2¿mdk8íNÞkE*Ö3ýú<~Èí¢³ë¢y£ïÚö#ëïFÿåæn¹Eñ®ûö+ê§1®$îÓÖ.t'iPVAJDPÈZG+JEUUÒ&ÌÁ3sª¥æ|¹¥k5ÚuuÜgy±Pà¡ 95£=36©òºèßäíd-Ý©Áxçø¯ýÞ;úñJJÙwú)¾ï¤½`o+v^ÜAÚ¥ÛCÓé ÇÊ2sÅ°×,"ã¡D"èhyqX	ÏE
Ñnâð ×ó+$,Äßuñ~QT¨¾ÑÇÅ®L9ûÛMorsÛ¯¨Úw²'ÞoR*¶
Lz-µZh¡K'î*-04W+×dy§k v²
=[!y d H¸¥r¾Jêi©nf=eYg*'Öè¯®Ü·Î Îâ¤Y5)z¤ô
¦º
¦ÎÜsPcÀm48þL9vãB-qÊßÀË½EÌ¦ªY:°KkB+28Ü©® I;µÞsh³HÑÜr»§4Ï@ýÂSþÔ¶òOèsÞ÷çÆ
çÎü7K­ê×ßV9±Ó:H«®jóÖíü
[±oDOÜy»l»[©.ÓL®6Ô#rW(YeQ%@Ðù ëm£p&ìjË)#Î¬ÒÁ&Ár¨»:Tñ5ËxÄ+Ú°pRbø5¿!;±Iï4­=tÞÞiÒÿØO´¨~ú¤Q&-úTÔ1gËKèXÕÅa 2>H4 0u+4sUo¾I)`ÜD[DÔp	ÑA_$Öè2
è>GáâÚ~'ír·_O;¿³}èEfÙñÕ8»ÝîÇÛ÷ÎÛ&ßãóäå¶8½öWÃÉ6<~[¼j?¹fÊ?4â¥ÛlVOÚäLä¹\íDÀ¥6cÑ]¼ËTó19å\B w
PÅ"Ô2vaRf9Ó
@Á¤UÝxµá6!²
àáC8½=ï(ÏWJ1Zïë±âð? üì;øÇëÖ@C$Zð	iK$)ìéï%Q¨[o
~d$6.%ìÞdPa}!úëïç±1¢QnGp¯XFÒJóHþ¼²úM\¦Ó['ðÎx.gýA_G8Y?'~´3moñ4ð
}É£»¢ûÎ¬æ®¶óé±BÙ¼k]á+V¬%½¯oGã*;lÚ[qÔpYkÉ²ºkÑÜÙ÷'Ð$ÂÕÌ0=eÄÒnÉY2ë[-±lÓHõÊ¯¸+îoÆ ^!xtßÎ´#6VGÌ3¾@4USú¡xoPH_ÉY¿G-Õ"ðº4wÐåxòålÚí{¦Ië¤õËéh9KÂøvÀpþÝí_ùQ*[ÓÞîûKh7¤ß!z»ï>ÉTaÐH'r}K³cÝÓÔ¶!%:£a9tÏi¤ÖYCà§`?¢2p}uïâ®âRZËIfí¹ÿ½z6Ëâ%	ø²ßkÊØ6·3ÉçÐæl3FuW98jÚÅÞê¨ñ0ì¡;¢<¨Tý@n@á°gF¥0s¹Q¬YTýy¹ËÚÅÐªc«®½i§pÿ7³CoßÉÊ¨ûÏ)ÃÁì½¶Íý®@|Ø6éû7 ?6¿£76ôã£Ö%10çK½Äº5³	*g©r§>¥NâÆgêõÖÄ²8pUìÊ1¼Å·ynÙVýgÑ-1ÉÚè­b«Äoàì=ý45.¨ý=¼ÿéw¹û-Ñ°¾Î@)¥ïìY¬K
z»½ÙÎªºÃù³MØõÀ}5¥5HÈÔtéØ;ÄlØ­&a/8eÏ¡âòLLxd»D1¬uÜXJè´É/\«sòm;T-/K`Úû½éè¢§ËNCé9îL	2¥U¦áVTëáÈ~°4ZOäB¢ÃR²R1pÃÃä¸Íò>Í0¡ô¼$Êr;9ü
·ÇÀßÞ÷?m!¶6eÎiûÇÆ.Þa/¤ýûÁ÷høtïA3Zä
;¡³CÖì^`0Ùò²X¢Ô½
MÉÉìG{	`5\µ]K¶¿WvÈ9Ùð4u­øð´#ç_Ðåçþ:¿agÙGVá§¢#ïÔà*Ê=ó}s27ÛØ8zôîe=îÇ§r;×3ÝQz§EÎeÙ 	zßÄ¿©ËQí}r{²èæñâù+Gß¢ë{:P»ÃÈ§&íÑ$ó%  ³ß£î0¡»éÒ:¡Ësa>Y<`ìy~B]umJUo'å¬H·Þ¥¥³Gë±ñlù;b}ÓN¤½X%´ùQh"a²	ìõ7Í÷ý§¿Qà.éu÷$ìô*`'²÷Åí0³r"¯É=(_ù¬Â9G¿BÅ5eéáèÐ«}jÃÜBé]¿¿ÖÔ[hËµ!£hîª5 ÉEYMGÄÿ±w%]c¹zß¿"NméHãcï¼c3yÄ½òçÏ°x¿ýaCD0Ìî¬>§6áIÆÒwu%]])`
I
Ô×§·¿3#ß¾ÇPUâ^+#pJøFU	B W']g/ZS
LÈÁtA
ºpæ0¹A´jÔ@#3¤M#9Ì¶Ø^4 =È³M:©¾Ô^®¶È£Ùö¬9Gzßwþù¢RG'«¿*¥F9)®ã1L×* ;ø t 7© ¶RÊÞ²fÛìe"OW¯®É,Á:mÑHmMú:Õê×Ò|+Ox]+	³ÛÝ#Ý~VpØs°÷.S^X^$ß3%jæqE²dqõGUP¼Æì9-9]r0Ï¡ÕFÄ¹B»tÏQqiJ  9ép½¼3Vpæ°:«ªÜHÈ7µ7)j®á(ÄRºî,Q}Á²úuoÇÏßÂÈ
¢·$xË79ÒßüàÍ
|CÞkÿØkj³´Ú*µÖ¾m]«µ¡~ÜêuòªB«½±;
\7½çæÍ_ÑeÍÕï2±ðF;p´SFødHDÔ¥Û!ø([§iqÖ]¨äã<3xëë9ê¡í1¦Km¬3Ø7áC¾ÿ:]ÿPE7
¦]õ§TUªëpêêÙG1ìjèÇðÈùþOù÷#0ÅsìkQÙªH¼w]V¬rÿö!©õ&GùÞUyú¢æí{Ã"-ª0ü´üsýäs^»¯<"å+~¦|ÝA®G¡"®þäë"+V³§dwÅÏO¿¥x{8ÀÐ÷âL}â!KÞÿóä3Å·¯YÇeÇªÔÿWFÕê¤äF©_ZÌ{Mwï¨Ü×ÊÖ.õîÉaÝ¢µ-á·ÒC'àö]¢öfuÄ4©ÁChW±ã	ßíCÍìjäâacw¸5nÁÚnÍÜE:÷|y4£þpq¯ùóéí_¬ýRUo'w<Hî¨1]gÿ:xåµ~Ü°¾ÿÕ{ê.h_Iô¿¢¾GîÕ¹ªVw
«2³ÑeÇB_ÒÄÚYÒ9Ö[=¥Ñ§EÇ] {¢?ÑîPs$ÐJ]wÃZvWM#cÔ»?Ðû}¨±Fða½Wò©ºÝ¶L.¦þ0L%â* ÷èßÖ|>Õíö ¾ÎTn`T7\ë2öt4Ïr;
fèRÉªÇîV»Ý|»íEk¤ sÌb²µÂ¡¥!´¸+Ê>lÌ¢PÇÇ°2Ñ=,öÏÔeúÈ
|Ng!¾±;+>pàx|e¿ÔoÂÊIêÏ-4ÏkÛ×ÉÙ ¿=Æ7cÌxïÚÓæ6æM¦`´4í$k'û©L*Z/§T¿çû=Akâù%36ô
Þõr×æ@rú5]í~MºÚ7Ô½ìLWrp$KV¼£õÍzË6õq~8kl ¢G±S0hD¥¯´ûÅCi¸0kKí«ØêZcì6=oÐaDv¶Ýhél£EÁÎPÑ~¼wå£}ò£
(N=ðï8y	w÷ãæn/ÇÃ4û<[¯èW<¾:[Yv5ðK1GOmgÊò>4XÒ}ÖñÆ¤ÅÉt¥·#ë4	C0Áå®Aã}"½t
p¹dé
 38¢ÛCzýº[}\ÐäDþXøòÙø@­}²ãD1Ú!oµæY#¿´êU'§ø®é±YarZ+äù-85«æÜZl¹0è¥¸ÝõKxçªàjÏÉë%yLtûJSXm3Á¤±utT)¬H^§QËQ×
Úäü¹¾lâãÆJ}ÜLNÄo°ËFgì¼nwýrpÅï¦é5£ ÿ"01uEö²i°'WCàH÷(/h9?sXázgXDÐN
WæESpÓ·£H$0ZõácDtÑËÄ8÷T4Y¡'¬¸É«¶R®ÒþªÝ^%2mj^ÿº¿¯ø2^+9]'5éò]·¤óZWÏ3Ê'²9º5;{¶
m`&jÃ-8íÉ¬ß_"Ó´èéIo·¥ÅÌôØå	
UHÔ,b»Ã3²Ù[iÆ¸­´h`kî0ÝQðd~[-­ìr!ûþ7QW²`N	L=9¬ñÒ BB¥5Ãô
íF;¡!FsÂÍÑP#1¡.:SÜ~²ZQa¦w¼Æ8£:w6!º2¹DX
zj¸xúßpæþ|¢ÊUÕJÓÂÿ=Iå8Ù-K¶ßóD¯ì\>¡[Aéó¨jYct*»­êwf 5)cæf+6æ}Ag B6û°HùY£8ó¨¦Íq¬5pûãÃi_S]fRr3;ã zä>Zøª½BuYí¥ýN)R:=®7µ¹Óm²"Ö2ówbß]cÌ6ó;ÊtMwè¦¢a¡k
UñC¶kxÔ¤vy0^nQÃp)¸àèGÖõÃÀNÍUá¸ÜÆ{niwÖk±½Â%gOß[õ"zC2Ãpf«+LÑé$Qm©øÉk&P×ú®ÎÃ¨èæwX1÷g·6*l³ãm¶øÍëªTãD-Ùÿ`Vµé\aê^`['¦EçÌÜßPò¡\=«e¶ªøó¼aP¾:
l
s&Gõ|8~$aêó)ÔWv±~¨âcDåãíb¹íQ3¦B""FÒÈØ¦GB,­`9µÌ¡¢d{ÄÏMõPn«gF"¦³Mä
¨ÅM[Ë3,KÚê7º@ËÕZ¯ï}2×=r{/÷0ØWuóUh¡/A«ùuó@çuK¡f]ñÐÝKÿäè«gíÒ½Ú©ÂtÖmêywît®Yn [{NI¸Hô`³CÇ`97üH2iX*lØÝ#RÕhaäÜç9$Ð;ê¤óÎWJî[¾½Vªçìm_uKôø-kµÖcbâ5MYAÀGÝÞpcdóEÃ
sx¡Þpeé¾ÝÒa+E7BW	«}t-·?7©d¬)á¿þÛ[õ®sÂÿ=*Äÿ©³1ô¾ÏÆà-¶_³%?Éßáà½]Ï´6¨Îóø»\m qB¥\{B¸&;Êã!²ÚQC)6×¼È)áþuIÊx*êÉ&G67YÛtÔ×C4g@UQý2|±ó$W»AöÞÖÁW%.½w_ó9Þ¸v¨§YcpO9ÍlÊ}9[AÑ¦Þ\÷Í²£Ã¡LéM@gu0q>)MdÒsú]ßßöOwÖcèo`ÚQÉd'
,¢äõùðß¸=ã²ýñw^ïýF·'7Õp¿,¿´»VT:±$·¹ÝÛ=QÞÛº°:ïæîßvWùXg|vhþ.Gþr8ìïYØËêù²ó7ßpk ç+÷±FEzÇ¦ø´°h	£Ýxf#sDôF]æ7,A>!
kÁ§6ö´i¦3ê4¨bì!YªÈ ÀI»=³"
§vP<róË¬9Èþá¦ß
Âßö|©í{/¹ºý¥*PY£wØÓIÇøêIêDy¾ `ßÑíéØ³bÀÑõ"ðUSI=D£ÎéO{1ÁoÃ4À¦tÓ16¯
méu£àá®.ª~@âD¾_Ìÿ×A¤zÍ=TëÂ!B8#­ÀdÂ$Ìèj¦äðsÚ¤6CÛ5p.ÁqÕ°Ì
ã¸£Ù4Ks3²Agt#8t*¨µs(ùkÇÿqüuÏ·~Æk¾â=?£¦¯¸1~ÎÕ3ðpà/:YÊÞ&M³V ÎÆ!©³¨LFÀ¤Úéº¼zká¾R¤4h Í  ÚãhrÌ.á4®õÈW¬íg´^ò3êDú&$v×çÿÖïVÕ_º\É>æpßD¯5W½AÿS>ggë¶\E×sµ±D,3ßÌÑ) S´
z¹3>Ã`#Û10}ÔÔëÆk|c;¢¿±V´éÑ9xÄp¶yÝtxã¢.a=RÁµýÓJïÙtªFòÝ.®ð¸õJå@´Óá¯÷¡ÇÂÁï[iÇ>ÁäÎý±ÞÔR?Ar¶7î×ÃÝvÐRØ§ÃL\±Úm2À¶Pºâ<«%§y°h¯¢?íÈÒ=×]0t¿\Ê
B)W+.üàc"Ç½&9»Ùª®àÙ5·G¹hf7õü9<ÏKõvÕyèÇE¯æv÷ÍÎûQù¿kY-ÝQ]u>+¿{¯í
xÊUjß'D¹}ÇÃ^ÝñY±ÿä¶Ã¹«<
Gwhm×òy QÊÞ;ö¥:N¿ë2£çyÅtA{ö3UFO
$ú]*[`:ÝppTæ&§+çc[
B%»`gB kJÜUcÑsCI·
oZ0²@ðmò=ìÊ¾ªkï_YÎ¹'epÄýM½ÜBüübhIqÏîò¿÷ÇL&sÚåèÜï§_¹ÂÁs5çùd¼¸!AAØPg ¢Og7q`À|9ãa	±4ºëÒmVYa»Âßgò:ØW¤å7-÷`ØÙ¸¶eÕC]v>/)²=òÊ&ÈååÏîÉíËÃ=mÙÐshµ-¾Ü\y"î³{O;ZW	¼eN\©WíÛÔc¯Ü»ùÃ»µ1÷9ðçËúy·À}*[/ò|ùOª{þý^ÑªtmJ"F°+Ú-¬íºØYÅÐtµEI/9ÖDïðÜ¤äK¾ -\X¬à*@¾Æe¥tiö¶ìøF\©àWËÜþ8ÖàPË.wdÞúñÍtJº2NO¼WTKaóv®T41²º\DnDlºä.æ¡ã!òb¥Ø^C"Bf=²ÒSÉúY·\c9½¦,6ôOH¿ÍV'y-3´VæîÃÚ(÷"D?!¨Ûï:Üí;êÖ¼¦àLgmhA©ú\GÃ©
]¬á¥sU[_Â<6ÚN¯F,/Á°=Ì;PÚvU,Fù,ÃúÔVX£Hwæ#Qþ54l¹ùÞ±9ïåtî© /59¡»ÛÉÑ{Eï±¤`+Î´M1½6ÐS'ìexb>¬¶+Ä\"àæÇPïÉZÛ]Æ{'G·Gh4'ÞvÕFl2}Õ[@¯ÛnÊ®¨À&µTçÝÒjØµ.ÓªäÈ8^¸X±RÍÀ±49:ÖÖù*fiÛ õtù ÄÏwã×Ýìx<p-ÇÉû§û_¥Åv\(Gú1½üYVüõtéÞ·­Äúø=æÓyË3èÒºªöð~ÙOÈÙT]!0òd×ÚýSjWYBÇ¸ç^ÍÝ¹áFKÜóëÁEç?øÆÕ¯®µ{
­Ëï8ë.yÃ¼Ý'ðýWÙ7îù¦©ÓÉÝÇaø!Ëì½/Ç²DÅÍÞNW&åÇ -r-P]«ÜgöÏë;l=¹éú#ã¼$ë?N¾«þîûGmuõw]´·{Òä=÷tÎseë"çl9Ý}¼7ëåfOgÅ]±O:Ø| ÎawÇ/;¾²öø¼[MºÅRÁoe-+¶|3jD­Tav÷èu:¥Ò5wÛK-ä
YÅ!	ïÀçÞºÿÿí]YÂH~ï_ÑêÇehãXí®/c°1ÆÒ®ä|ØFùí¹
((*u÷HýP*p¦#É/##3##îÇ7ßº{{ Yqeÿ©?wûv")B_Bû]°Ñsa3Óx¹Þ4Ä¶éczÙÃnwY­åÄeEtûúbªTi£"06÷9ÏÛÌF¹êÖ´¥)¼?¢Ô ¬ë|ûl´<¥À½¾ïq¾¢øîo«SGð¹@Å®÷U¿¤pºd®'éG6æ*ÄÚ´j	'Mðk¼ÒG5{pô*òèX©d2 B¡4³aÉ$ÿ}ë{1¼Û°ùõ¿~}ýþã©XÜiXßÙN°÷v0ßÎ'ò>=|öf"À«Ó(æq~1¯@Iê5º §Ò|Iz2»økxÓÑêÑ`p`èã08-iÚå¥6Ù$6·bÝì
nß<Xyfñ¸íñÞ7VÅ=}þþÎñ%é=wÏÔwTsCGM{ÉhIÅ ëõ¸Ð´~Þºð/Q£o¤
ks¸ZÆÆ`TÚ@¯ÀÒipVºD;°»«¸Cç¶÷K¶ÓvùÚÁêk¾µª.cÝ³ÛbuQîu	Ýh¡ÓÇõ}Å5Ôx­µ8ÞÀñÚâJ%Z>¡´°A©D:\w$xã8ôQ1tÍ
9<ßn ÃÓÖÄqÞX¼ì_9¨ìú]½ÜálÅ¦ÓúÚcÞÈ9
õvwå3Ëeu**Ãê´¶ÐÖ¸­×8Ñ¢¯ÛÜÕZÃ&ÈÂ,ÁRsexK[YM5¦ÙæCóýùò"ËäÑµåU,?qÇ.ë~­öN Ù£DªÏõ=±ÇáÌI!q°gAÔ)È
màNkà):á sùÄ$ºGùqºNoL0Ï.<¯å eÔ|U:.Ò}·)G¯ô0{ñ@¼b q¥euWá¿¿+«Kò¡]>Üí>!¼Uú9£¤¼ÙàqVj;ÇÆàÀñdÔ%Øî	ä«órGI_Æ@FÝ^Â85néu¸±÷¶?Ùã¸Jg8ÔÙiõ7FäS3ÿ9ßËÔ|~æ-àv×Rÿ(Ùþ	£ ¶ÙA{ÕPÃæj§3]3ý(u9<ãûºBbÃ@ØÉ:Ëz­ETúÙØlði¬°©©P¸-ÀC7r:8Ç÷cß½ÆuSÕ=áËM¼AcÒðTÿù¶Òy~¡
Ð²óÞñ:ç£[Ü<«}ø,i¬C£§¢½¶L 
7î"]ÄÂi¾@Ë)ÑtéXvÁ* "A´ hO  -ÜnÃé÷gêZµ½Ý~ÆY¿>ö]/ðø7\¿
×Êòõ!É_ôLE>=àÃø´ã¢u5¨%Öz±µ®'36ÍÓd¸0Âb!ð²,¦iôÄCk*@¥²Á:Bc«Je4ûÆå¿æÎ*EaØW#ç"HÓ;k¼?	£Y Å#¶o§ö{ïï¨Ò+Ú[t^=yVub`4ò²½DA)ÍrÐÀ'¦m,ÌËK¬&µv´ÂÆ-¹½aj½IÐ~;,õÒÄðXsí?9{C×Óì­°Óä~/¯à2,Å]ç¢9Òú`êvÆÓâ0O¶°ð¶¢®w=ÕªA÷º>»ÝF{Óï	ÅÆHXxøÜÓÝ%æ«Tdq°AeÍÚr·¥<Ïò£¶¸Tid,G­UìÄ½&9Ùô,Ámã5á¬fwÐ®êPÌþ§K[é¡WVBþÇy+	^VÝIò'¿^ýç?¾n3ÝÏ¶Ò/[;VÚÇÞwç "`+´7~3¶j5qøô¿OU3ÙVÕ8^»õ}>o~ÆQïî`øíÞÑé×i)/8¹ýùü3¶ëw#U^¯/Âö$«q·ûPßQy<Ì13-K¥ÞnEcìøÃ4ÁFn}kæÍÀ¹¶fhÛ `ölÓ\6z=kd!lÓHZ¦Î$m+&²á`øûöC¥~]îOp3µ½ºqÌàòz{c2¼ ]q÷âÁ³S!5"ÑÉ%]""½`/x#<Ô;}»ª@t1 §UÄ¦ïÊ\2[$h¨ EjÜ*ì¾÷RýåSÅµ};èïïE®nyRý«ï(<ææu<ÞÃ=yZØBãQµ3¬¤×Û1¸jkyJ©OÜÔeËhÖ[û#NÄhL@ÙºëOiÚz4´îíûþzÊLª{ QÞ[¾)»ÒÊs¾L>»Ký°+DöGúÐA»£÷êóë.ÿ·OðRùþÏCÛVëEõK=>n´8Q}(æS«¾¯µê!ÎW½=ÁÕ»¶þãâ¡½X¦Á¶ûGÑ}vJÔï%iée7g5¾Q=5O^Aèï7³!_÷5Sõ«Þ^L½GfêòÝý½K½üþ}¯¿wäðëoðò«'9=÷æ/çÿoªÑFïúúu=º£¸U¤ûÄaña=PÁ£µ×lxp¹çb×Ô<ÊåUÒÅç3×]±i É%k¥Ó³Qd±¨s¹ëP34\¨Ã±ÔöÏ±µ÷5©ÅqÚ~Î©bjýÈÌF<{òéõGñg
î­Ð~Î^¸ÙÂI²WÏµ´\1Ö3"C21q]f\3t¸éåîó½FöËöÜÌ¸9à&´ò¸ØçÅioì®nÆ³ÂûTÐ¸÷m4û¸Pþí?oíÕTÅaèjp¸2¨v¥O'ìµ®.ølk%»§bôºx·$?ßp^__fßL­|SçÆ:#ÿ¨³»´7ÏÝoé
,Ï$TÚVK^X²ÕQ :¨t'UuqÊ"íM8/b Ã0¢Ik¹æ0ÒñbZêðbÍøïoË£8Åªzt!ïj&
÷H//A¡&e i¥Ëj»áü®ñeÙAå!­VÂ9UþäÃmf¬V>ÃmïÆÈuãñU~ËÒÜTÝØ´îµtÇç¬ðÑ6Ô§ªÇÍóû¹Ö­
ÖWk©é?g¿ôFGZç?ÎGÏjzq¤Ò	pc±Ö[ØÃ]u¨P\|Îg8í>µËÕ;!iQ_HßY+:v&ò8^£ÔÈÝ>¸Ýµí,÷Çæ¾`v½ç¾?Ä»]Vá÷üÝëR_¾ÿo¥ËÑpO×¯ßüDþ¦óc=ñÇx
¥ãÓéÔ-1B¶Ü¹Öø
³ÈzÆÚ¡Mqå`hbJ¦Ú|9(«ÃÉ²6»}ÝNiÈ ÐãÈxßFü^ÞA¾qãÄ_õ<Vï%à­ü»ÞÝj·ãç]@º'Ps£¦Ê²ýöM¸k Ô$æ£Ó²Adm¨"ºÍë®ÂÂ¤àhæJá,êÉãñ\§8DÌUÅÑ©èz?Ï|×Ñ/â"µ.×§ùy¤Zñóø¹¾£õÝÏúØfÊ®PL£z­.RÃ]>
kRÌ
²¡féÍÔ¯IîTwÝ¶6¦¦e]iªñnRøBÞèt EÒZ4Axtôñ ÎNµt?b×¦ü~4BÂCñ\Õø+1×w\Oy)~ëïlú@Òéçá¨ya~G;Zq4º}rU(Eqâxa	y4JÝ0_G¢Úut3Ê0òjUHF1JÞÚç$~ÉÂ¼t¦i´Ý$Aìçpô)|Ì'!·v±üõ3ûð¼ü1Ýè}âÐ-m\8>¢3º@ýü[}Gï16ÞAGcÍ±%R+îqóa±HÝ7
ÜWr¦1.-4YA ØàÐ-j}2\# Ê¥Î°¿4ÁX ÞßØþU÷<·ù0!_×(ß±¡Dßsô§ pÝÅ[`x/¨Ïå-.¾?Ðg2¡Qâ4í(44dæzB÷(¢¹ q â%qÂhÈfK4¼|_9·ºDÅ S´Xìn)=B¥<æ}Õ²ïÃQÿk¿ ~
·<¾!µ/Òï].õ_Ù!ïÞÇÝ2àü_ÖàN6U(ç4¥×ÏX%õÓÍS Ã@¦é
Ýæe[ð­RPÜjÐÊ¨p¢+.Æ¼Í/Æ]yÑIÆ/_ÖømgxsWSæí)ãïÜ)UÉ¿iîð³©ðÕy/BèYàïÜ?ûã+~iëa¿CïJð¦­·£÷X×l·´5kk;'Í2îÎ&« æ pâRîÔq<dÀÕêæ¤]ÖbªßÃ^XÆù4ï²¶qÆ#¥b){4lÿP~ÇRû;{Ë¯¯*ÞUõ®ªü1|°óe D÷÷zß:7Ø<,ì£òÙ3"$f·ó!F­%¨&fã 
Ö9
DmÙ],EJÚ7Àb(pÖúcÉT§qD[DãÑDÀcbmnF÷¤{¥êo1ä½8È[>=ïXE¦Ý±:õÐ¶ÏËÓyÐéBfèc±Å5<;l-$²ãm.aZÝd1Ñ¹	-60|8å(ÒP.;*ë+ø÷"K@[3ýõMÙà¾WßQxxiÁÜH|É1VR&NòTñGèÌ ³C´BæXÎp *µnÞr	«0¡1¹`TxÝ@A1bRØjî?RÞ<;¨
Þ
ùëYÖÐ/øêiX_efvoµÕxKûÑ­¸ÿñmw;þ	ýKn²N0@¸ìêX±å%×2&Q$ömùEF)àóÒj`æ£}{½±=Y14!ÂZRiÒìù=Ò¿ôç÷7½¹nüKõ÷Ï_þPK    Ã[áXå	B   P      postcss.config.jsK­(È/*QHIMK,Í)Q¨æRP(È)MÏÌ+¶sJ3sÊ3óRABµ:`ÁÄÒü¢Ô´ÌÔ"(¨å PK    [áX}ûñ  Ù     public/vite.svgTMÛ6ý+ í4CrÈ`µÀ6ÞÚ*Ëk¡ZËõæß÷ÑÎ"M¶M¢)Î÷fÄ«ãã½zz÷ÇFïåðfµ:NöÄvïWÞ9·B_ oÆaÿç?©²:[µjç¡5»a³é÷^æ½Vó4ö¨Û#r
Ý´¶ÔçcÆé~:ju6Ë®ÑL6g­výp¿[ðêµ:Ìý±ûã¡ï_ÛeýôaØüG=ôý¢ÕãÐÞNOvÊ)Ñ×W~{¼¾Bu};ÿ2·¡ß/jØ4úý%ûû
ebó¶§íÃRij´±Ùç×ØûFG±^>Á}ôud^#ÕqjÚn=Êv0×ÓMã47úU [Z¯[ÕãoÐä^àßÞrX¿û_}Íá9ÉS`ËI9ËôLÊ[Iåbÿ7§õúÝMæá-3¿ô¸½åøÿUX¯o²sßQauið¡]vj;c£?ÎãO¯¾ÛÝµX|"+[8ß`n¼-:ãmÈ¬
Ád¯Ûåì­ùÎfg÷+\B2AA"dÈÙJ#1Å&ÉCñ'IÚd#º¬îüó½7Ö¹0	²utÑÎÆBªØ(ÕH9ÁIò¿Wª?¦|VrÍ ^ïJiüÑQËÖ§¬.ë¹H0Mpâ(^(¦@¬^b±/Ð´]=JPîÀÀ'r¬ºC³è*²pÂ9F,'R ¶tÆålð	XÉµÕ" x)ZvH¡Ôð!¥¢ð±Ö¤3øEl´1¬btàÂ¦êZ¤¨Ê±À5)£y¨AÞù<G1|GÖS¬óâwFCÊÉÔhµñ£ñìjµÅû:*\%NæÀÑ .±à *¥:9¸Ø!T
d$f®ðtóß:_oìë¿ PK    [áX#Üÿ   Ã  	   README.md?OÃ@Å÷|
K,TÜÞ	(AtI8ÛûF|{(*H0t²Îzïýï
ÂJá
^X)I;Pr½E%èc8pM=;´ ¤C %=zÇ÷ì[`ÿ#këÐ× Áä'ö
q°$Y¬É«}¿¦á§ìÞ-û	ðl±´´L¶7)y'æKÆüvÙ©ö²4¦CUÁ£néO±)m(Cö¦Çj-ý3E~{¿Î3W/`éäídOr~î$ã`Ð(ó4¤û¯b*cuVÍÙð]`óº:y§}å/ôPK     Ô[áX               src/App.cssPK    %\áXV¦#   ´      src/App.jsx%;
Ã0Dû=ÅÆìÂ6&mH*En H+,XKFZCÈÝãO÷a>~c|6.Å	UÚX?Õõ÷yîLÎ
À`ÄÇ«T7ø@L$%¬WD¼Ö9?õD×Jhö¼0º¤}G¶X¥Ä>PuÛbøíé(éÇa3øÐ²ß°ätaÙáPK     [áX               src/assets/PK    [áXÇ×êE       src/assets/react.svgmOoÉ
Å¿JarîRU±þ.V${ñeoÑmÐµ,CR,ï·ßß«îv =êê"ùøøÈùùõë'÷íéñóëíéáííËO77ïïïþÝüóË§B¸áÄi;òÓ·Çëçÿ¿qq3Üùåz^®÷÷Ï·§·ÿ\Nîåùñr{º>qÑúx~Å×u}þ|ýãO·Ûey|þôüzrï×û·Û?ìä.×Oo|M'÷ååòzyùzùûëËúöûùíú|{úöñzÿ/þ¹§Ëåíä¾^/ïÿxþv{
.¸TªK©~ùùËùíÁýq}|¼=ý-ö_=¹ûÛÓÇÏÝ\3ßS>Ç}n7º",Ý§¼$_F[}®e~ø>l1ßZsÑ§fKñ5Åµúd}±àS.ùX}muÑ·:|}]¢y+ei¾-dGõÆRO%»8|IuFÌífs­¸â{îçX°µºÃn'2±F"±}!øVSfÃµæKoè)¹je<IfJð£àGi.ËïðÒpTGq]:Gîvz$ÿ>ë¸â7u4çÂ£rÃg'?úØ¼áºnçÝÑùÞt	ÔÚWþ§lxµã29·ÖTÉeÚ9æBn7[Wäåk£NTf·2ÉèFø	ÂRÌ@PFt,»ÂZWbj9»ÆÕÕÙañWÆ,9uê¥lÑÈÛn·xð`dÄÓ}¨à¶ÛÿFÌÅ¼&²,]97®Ï ¡-dR½8!8¶,Â!v#±`
=/®Ô>C
±ºÃn D_¬PÓ¡ëBÉÄ¸Ìjf/ò·¾¦AôÂ5)m¶%ã(iåNþÛB]{Ä·TÁ
|r¾{k©¨HÓó*T}ÓèqX&òSi$YÁh"Én`È5[Zi ¢ !ô?ÏÊX`4^o*AÂ¸­+áÃ6hè#ò`¸ÓhÇ:0dÈ¨>¯J²ét uò <øJhËö~7.I¡ÉøÔ\B ²=LOµÞ@Iï)§AEþÑÑ£àjaë"®Ðô©°715/pKw		¨H°ÙÙê=kPWJÌ ÙéåìÉôªr¬ÔDµxm?Ð¨%å!ÿ¨~É0o 73©p½Bã8ìîcçº¦ËÉ*RN9NàÐ:~³êÀ­uÆ0P­ÚÊL³`¨¤¼@W«bjnR+[ªCr¸ÛÃ{GU¡äëÔqy°¤R!y½+©
½82©ëK£ô6¦.Ho°b¦¹ÃnÈ¢M%É#­tÇ@5»¯=M)èê75×®Tµ³Úôî£Ô=ËôWVñÆtZ¸JÒ¤'}Hýéðª%tdZDQ¬_
¥­t -fDÉuS+$tÒÈzraI`W+4¡ìG(>}"¯¶Òv!k äDäËì)2¦í¶#hÀó%6Ny(©nÚLg×âìAKã5<î&ã`¼`Xk¤óPHs¢KárÊ>V4°fi*àR¦Ä­dé¼©Ý$ÈY®Üa7ª PÖgÉÙº]þ²ºRÕ
] öÐ¥½0gKÀà4y£«9§@KÆú¤öî°[¾R¥Ùt'¶MQKÅK}nÚ¬Üõ`äE=4h+Ñ"B0i°×òJs¦Lúi=ÑX°Ùô¬u¢/$¾ÛÃi1q
Ó ïÀ¼×º¦^Ñ]âDU%/sÕ@æl½mºp»Ù.¶M»HuÍ+½Há¸§n<)Sâ"´÷ Ê
4K)|å6{ÄGë¦DìRµR´w0TÃ©PF=MÚ4²È÷ÐÄM&Þ4d¼mZ|ØÃû¸OKÝ=!P,sU+CZ§FFhÆê`ÛJ8;.©ô¬ª¢ë]Râ6ýÆÞÜa·@ëß%¬}SC9«m§®	Ëg05³ÐèóçkÔÀÂì´<×Î6æ&FðÎfªKH*ÀoÒ1g4Å·JVDJ] a~|¨Å=õê D¹ÍIâD
íÈi.1ÈðÝS®¶ÇÂä$méÚxÂdtÊUÐ¶y±ÔÈ¥1d}@Á¶K¿Cð9iãp=ëL3`	,Îê+Òu=HIâlbm¦Ë1p)öÃî
æ/Ua"° {EÛsÂÊYë´)v
¹5´
Î°#ÇÆÎ¦¥&¨Týî¡ÄmÌõ¦! Ñîv³y+FeûW°v1X{TÿÅï×I»vÓo£ßµQÝÒfY_L¹:µ&ÎÿþÆt\·%x®ç,AÔÐæ"jÛÇàn¿»1¾AIË9³v?#îV­O%o·ä»§õ¸I©ÄO-²æ $r5Õª®nÕ~¼M&
g«pÊª¦LÔ©0VÁ[Fa.iSí#­O,½Eim§ü&Q¿
¹=k
¡ÏiÐ´oívË¡Þ»®Zi!úåÜô£B#-i_då¹òr]J+ÉFZÏj*\´>©Ô	X·/óóuùñoËÿ<Ùþ´=_~xþúã~|ñË7úµágÿ/PK     
jâX               src/components/PK    eáX%ìPD  ñ     src/components/Card.jsxu1oÂ0÷Hù§,*u¢¥RÅÞ¡kÕÁÄDrld;òß{¶IñâøÞËgûËê /ä­ÑdÆg¯iRF­ÜÚO^¡
Ê¹Ò¤ÐÊMKmÖ^"ã
4nqy]Ân	l³Ë½?/lÖkOT?EÈcÑÒvÖ)+nÎ±6Fíä°Eª1ôMß÷ø8Íçð!TÚ`Ë· 4iCx
ÜòZRCjU¸R+Xs#&
ûR
j3ó91h§×áÛ0ìÊwXüÀåò¯üäawÿ¿AWþo¢üíÁªéßÃ$+è\pÌ·µ`÷\èc~°¬;%m°»}ú ¦í{O°C æ-ÎpÈ_²;³Í5ö4'ÒÀ?\OédÿPK    ÂáXÎ¤  ð     src/components/Footer.jsxÍUmkÛ0þ^è¸Râfcý:¥£¬PÂØ>AûÜj-#Émñd'±Ä-e0&Hü¢{»{¬»ci.¤ïH#
)ô¤½ï]±f¯9}¾cÙT®¢Ð(I,RÏø~)ÍõrÌb*¯¸Þ²Hd*HèðÉã7^¨û8>²OÚFu«1)ôKÐb·æýúcÄ(7	å
¡ÀtåñÕ`Tá5§J¡2fÆ§=#h\jÂ á¸¬ÿH$80ãF3¯ å1ÁÃTä¥T®|SÕDÕaÛxþ´ä i,^À¨Å¤à¼Éº¥ºª½~ÚÒôëìúÍ¾]aÌ!²næ4Åi¯Îåw¡4KVë$ Õd4'ãÞ¬EÖhÓÌ¿ËGó[<Y¸Ú,,â,
M±Íù/6Ò½AFõó`GÉ¹ÐÿVH{üÈøüü­Ðÿ7OÊu!3O¸uÃðÐbZjQù/ÛxJSÅL­¿F]²¾¥]ÛÚÞß²ë3ÜNiWpZúeWÝFN¶®ïÛuÝ«ÿ.r»&nËñÍEvRÞÄUy³ÂBÕïm? c·ÜÁIÛ4ÍSèô`VuàO^!hËê >Ü
jàÁúô8%[ÕeËzRÄÐÂ¤Èâ¦Mùz->kÆm?[v;)&ÐzÍ¸¬ÇTÃ})'9§Y0vÌ½©v EãØµÞ4g2M@Ëâ-Þá3"a»úuùJ­¾Öä¨_3ÈWä#äKr!c3ôõæfÁiôÏ½é¶Ý¶Xn¾Ë(¥y¿oaFÓtç{3èp5-kÓ
ÊÑhd±ÕÞøÉïýÕPK    áX ßÉ~  Ì     src/components/Header.jsxµTQOÛ0~¯ÔÿpÊ<P 0¶´/¼iCìmÚÃ%¾¦Çl!þûìÐ%M%´ÙñÝwöÝçO¥6n	3£LG_Æ#±Þ{oB=ÀK{]92ë"xG´j|9-°©RZÁWBNæàÇ#ðfÈUFÁÁz,¿Í5I´öE
S4æ,EKlr|v\×ðÇ/ \±óh¢f!iÅ&]wsE§gQÍ»ºÃ%ØNãhåo¯c©BVÈ±d' e¤|ÝºsìÊì;¡"³Û³ëòp_Y'O¯GÂ±Is´Þ¢¼C´%ª6dí£~ø¾` ÁSBqâlQIÍ8D|ÙR¦Góô?ÀK#@t ö-ØÄØGÅ8p±Ñ=LWZQ/Ù·¸Ñ¥O
6Fï"Eà0½öu[Í_|
¥J+ç´ÚØ©SàËÚºf	I|DfzÛG­Ãß°áN%¢È½¡t³è'
YÅáêînÖêi¯Ê³<ÚÈl-+íç8öé8
ûT#ä×­ÓÙC\.µÓl2==|º8\\LÙôôòòÏ/9Rzt_æÄCu¤ÛÀ~%w'hw{·g«[©
ÂÙâ\þI» mEß´4Õ+/ë¿&¿<BÍ¦'Äs­øCÍN¤Øï{£)¹H
¥ØØµÊ
qáïa÷øGRä9Aó}UÐh~CõÞúÓ¯ oõKp~rmÙºÜ-e¢Ü+(+Ù+x=ºÖñû_²yãÑË_PK    WyâXïUÖf	  N     src/components/Input.jsxmRÁn ½ø5Yâ÷ÞKM eÌ À®
ñßØÝZé&À¼÷y06Þwz£G &®ÉKY.©*°ç³õYunÐ
^Õ4»³É[å­Dq÷5!4@.ÀZ/aÐÍFÁyÛÅ`äÖ¾ñÒk3ÒN+g´;íg)aä½ÓÅë/3ßØ§Ó^ò)-Ï½pÂ`;q¡i b¢-·H®[ÃÕþ«CÓÃyµþÝ³!Ús£iyÍäÞ´hòí½¡Aw#¤>2mµ	T£¹ÂãÿXîSïduräç¤
ß%¿PK    mâXD£  K     src/components/MealCard.jsxU_kÛ0/ô;¦dT±º2:7}öÐ2ÆÞÊ ²-ÇneÉH§6kØgÙGÛ'$']þº;H|gé~w¾¿eUKðÑ!W²@9>øx|Tvg¨ÊG£Ð	kg
|¦_¹ÑgîÉ´ë¤L¥ÐaNÂñ[xåÔpkÌK)àQî`
Týþ\³3Ï.3Ë§KeiTjE
íã#°äl (*2Y}©èÝ*a
®àb1Ê¹jàÙîÎ`ï`EÑÐ{å C£:ÉQrªõ-­ØUs¶ ÷G¬30§5Ó×5+çáôtê²Þ I"yÐÈHtµ
¾c¤X×T¬A6³ÜMêÅx" Æ®
»Y;C§µ<ë­·ÃvS]öiîÐ9dr%²J	dêÐgmc(Æ)Ì~Ê$r0Ñ!Í=ÚÍ&ZrJ¡h#hË@çRU $RdäÂ2Fd,#?IäÃd!{,ú4Èó:Åe5ï¿áH«Ôe±ÖaX©6Õ¨.$J¾"÷»îj÷ê¤Ù)ôvÖ¾mb-¶;Á)Hn8·¡öÜ3Ûº©|´=´qô
{"¶]M+êtÞeþ¼¬¬ei¤vÄø;ã¾iºaâR¸ÝGoÁ»qäZÉÔ5S)Õ¬kÌÓô!¼ JÜ ØQ}íê`º´0¢[vËÆ?¿~¯)V=9ìµâñå[E)æPs*Ëö`«¯¨qÓõp^¿ÕKLJ,:­7¼îMjbå¹E7ÿgT8jü
¸î6Á¥ßV»Ní«¸[KV8èbçÇÞQ¸ë}nM¿õKnØüPK    2yâX.Ó&D  6     src/components/Select.jsxuSKn0ÝGÊF^D ápî«ª=ÁCb0²MB¸{ÁÆ	
tx>ï½±=¦ª[©| +JÖ@ÔìãáxÀÞV9¬S½k
SÉ>Q`aËQD Û9­#àf¹@Á§JóúÍ/1áxÉN5¸h¶ÄÊ@!Öo¬ÆRÕ´QRÀP³Þh¯Iö`Î68öé´¼Kóêº¶Øg;X·¬Ù ©ÁÞÀü¡9ÓH2×pLâ¾#ÄSÓ§|8þm¯pK^uwpÍ¥â¨-ÇÞu:ØeÜýPÒÁ{; ?¨tðÞhï nî÷ËFÉÞ«â2Ib;ÈyXÍ¹fm¸ 4ÛâºÙÒ{®øèÿÈdÞ÷cúwáf*±»ì6­Ì	§ßbâüPK     \áXÐÅÄlÞ   k     src/error-page.jsxUOKNÃ0ÝGÊ¬$b]7»®AÀ,{B-5h<FEiîãÒëÙïk7ÍÄÄ¯ÌÄ°ÂÈ4AÅ¨´¼ÜZª]Y³Éâ¨ãI`Þ#Ùû¢?°n`) C>`Üÿ¯¨ÝMA'ì²¦Îg; %²zÃ ÊºOpv_eM;§j¸R<>
Ï4Õ't7bþzí!ú´ ýÙsÔÈÈ¶Sýü×véâ%ë» ZbxÇ³ÀårÍè&!
YUï~í÷(Õ§Ío_Z¿PK    Ñ[áXÝÿÉ*   :   
   src/index.csss(IÌÌ)ÏÌKQHJ,NµæróósòóRóJEKK2s2K2S­PK    ¢hâXä×ú¼z  ã     src/main.jsxSM0½û+&`#ôèÁ¬Éz0kØ£ñ@ÚYiº1þ÷mË7h²§iß¼yÓ¾iy^
©à
bL¨O)rp¤Y;«æ_ßCÏDNhÆ±°o ªÓ
·R|W(cqU(®WG)¾83È}$&mÖhöbN@xÁð' U¥ÑhÏ[Wé §ØI)ä1¹`GCø¥zÖì%ÅT+×¸_êDO}9Ni©ÆzF3´èµc\	ùë£MëRQT
jc`ýÈV÷¤}5JCp³´[Ì0×	!²nMv]®÷©%ÐgLbÂÉî[ùA¦Ã¸5¨¸/Uwæ0oüß³Ýxþ#[GÂ:>Qlf4Ó;`×c/QÌlLíâìéµ¿$¨Gew WS\P5Æo÷Ìuìõ¼@­¿«U"[|(É©:Û8æA¬ou¼×'È¼Ø[ýPK     hâX               src/routes/PK    `_áXV6ñ  ô     src/routes/contact.jsx¥VÍn0¾GÊ;¸V-R³¤=n QÕ4Ç¨jO=%ÞÅ,V #3l²%ÛgÈóåIj]Áv¤ýaþ3ãd\ *Ñ5	ªP(x° d§@ÅiÀ|~|t|Dµn@CRÄÂ"]ã)úÂSú3ÇGHÒ§9¨oÅF~ËV2Ãá¼øÃÍ¾!	Ýg
"¤ Èòë
¾äÉ£9kwËy®/söúÎÎågßÈHs©)n#qÏ}ÊæRü'´~ØdÃº@ 
Ú*
ú'("E³w±û¯¶A,ðqÈ[[X²6KÝÓ­_6ç5NÕ¸v.V~9.VÔ÷¦Õï)yßÄêUrîÆ]Äî skÌÞfôqD¢¨Z×§<{*Lt¹e
3o¢þ;ªÝ³zÅDêy&ZrÐÂ»¸áHuç²)WUÆ»n¢¨«ÁÊ+mãjìÍÂ¦YÑÉÉÔa¼Ì´Gìå½¦àãÛeLÒ{l7
ý²«ø&Ôù'{ßp«;K.ßR*­O[u	§;SY³¢/E	|Y)¿£&:Qõ¸!z~øÌx7ö,6°Í¨ób(¯ÒÒskÑ$ê}¶x¦H(D\ÞåÏÁR2í¹à[6OèÓøånh
ò/å®VÄB[×·ôN&N^:Éêð·\w¹²Dr¢.Ê "Ë!¸â"ÐC»sÈÑi¬æÐ¿WõN2sÎíÆfª&äÿT£W®ÿ­ÒvèÂòºé¡àÑ-Ûíníu>+»}­ìqí$¹n5¬mÃ&¤û»×2Ãk8^(CÊÇíµ!qAý²ëIí8§XA¬65Óü"Ó,i<¶µþÆó#_ô&|Cë-¹5È'_Fô9TÓLiâ5d¹wÚçßú¬/ÏG5TY¯ªtüPK    gâXv"¢¨c       src/routes/home.jsxÝXmoHþ)ÿa®'G
!NÒzÅþ·V¯J«^ÓûEê³gØE»_då¿ß6ö0Tm¤ÌìÌ³Ïî¼'BjøJ§!"Kâ½õöø­ÆDúë¡³3Çæ-§\+
zK¸e|E[TSiû".h~¢$*EÍ·dÒ©ü+zgæ	® Åñg6>
H5¥ÜÓLpø bÚ9åñqxGÆ)DJ² @@¦B2M!6$ÔJÁõfÙ)èÁýjeùt¢è`Ý%dR­nàHp"uº­ªD*=£»êPHcõq/D*ÍÂHy;q
á[ð¸3"þgüK^¥¨ZÂs2oB9R)­þøÞµ¨`Èýæo(
àNÓYkrï§T.|ãâjv7ÆÁL
éÝ¥*d­©Ýfñ|c"KûHÂ©¢
}#P­
UÀ0ÂÈ¯ ÷Î·ß©YBâÝ*ÆTD$¤Éã>@¯_d¿RóP'K2x)
¥¨ô	(Xd1Þâ¹­¤:|m|ÁÃ«õãYDùX¹úã×Ú¨óãö·éúl
^DúLbÚ³ÈàâÅ6Ð0&}eídfáåàÚ©ÏÒØêc
$"\¹Nx¹ÏxgÎ±d>àçTöòi÷Y[ ²_Ãù2û#+åZô,¬6uºVufiAýTAepYµ/Xk:×öÆ¥
×èçj?p?.¼r©\j<,ÅìP$·úKÆÀHD¾Õÿ23J'®Ú?>W&¨Ì_\>¦Øprøïá»ÙCuk³¢ÛhÓªþL}µÊ&À(å{vc¾&QºÑ>å²wBû¾{ÌDÙíUý}ÿúâÕÃ:°Á|TòæÛÑ*¡ÿ¦J³`aSîC2oæ¢ìßµûî¹Y\1Û¡£\µ3må+&ñ]=ná4ÕäføX(61AÚfºÜæp«¦³<S¦Ý¯ð°ç~Emþ0Ñ./_Z¢]´3må.¦1Ë3$Z^.õ'ÍÞ1Î©lå¸_gëÏvÌ²7ç/-Ë®Û¶rJÓÌådÙ¡ºè¹Y+«BÉuð<T¢P5CýwòlÎg¥'ºi÷µñR]ÐºIÍq¤ë:Is¹Â©²w#¢h~s®Ï­þ?'bÆÇÕ3ÔïÿO\üÅÏ[ýI§L¤êV_\¥ï+úC2éS{³¤ù°ÜjuÅ$étPÿZ6²y×`ùÝÔc	u~[fVßaB½õSâ¬ö°îæ-áj/ð«q5½%^Ï²VYzÖBê-óæÕºsUc´j³­gY=ÔX`»·tw:ÝN¿ÂÌ)
ru²K{7ÜòäíñÑýPK    5^âXìÉ  +     src/routes/meal-plan.jsxÕXmoÛ6þ ÿá D~I³uHlK²fµ«»C ´t¶9K¤@Ru\Ãÿ}GÚ²d[rÜ¢ë0IlÝñî¹{îxdxHeà
²ÀÀR=ÃÂJÆà)+ñ.øBóYtÅT¸×ë@D 0º	­þáA 6²©Ü =³Åûäæ¼Óæéß|á7[ÞI.ìßñis"¢2I¸C*SlË£T#òú3A3Nx0ò6åËÞÕ'z[¸4<T¤ø«	¸è@_Ê±5O0£)ÜÚ¨=Ì\´ëz	ÐNË"9¨ÑÛÒ[¹a*â/,Q*ÅB/æfÃºÖdåÃ"Î3×t{È$Vä½f"`cÔ¥òe½©Jrmü?
ÁÀfVKGp­ìTÜl&wIpí¥³Æé,#ªôu©µu6¬pïÌ>¯Êì«#*ÜÙ·>ÿ3ë]"À°@êÊÊï±H³½J¶Hj¸1~Ì»ÃGP±_¥\sRígUôb)Íïää¥J¹¡M&ZoØ]Ìôb#¸ÅdEO9+Þ8DÃú6\ù5­ÚÖzâbJFÑ^»ÛO1¦ðaêGÍ×2ú_5Í·Uý%)M+Úáa¨ÛEÕ%*Å«ö®/JÓÛTq
ÅJ~6+æK×üãÇ²úÌAsò!7&K$0ËóI3æ»*R_*¤¸ÀTovîXbûàëMÚyP3µÝìE^­±3ïÕvwLÙrWtXxRÉî-Ól(ªù­úõø}QÅï%b:²@@¯c "Þ8mRý{ðwÊ
½/Îõï)íæÚíýÿ&Ë=ChÝöH:¯K¬7
Q@(ÓÙt#U(¼a±ÆiêÈðØÞ®è;
ñÃì´OCèM_
Þ!éÔ_³Ü÷8ÇÐéfUÝÈZNà>u/z
MªS¬y+áõJ«vÂ¿¹<²÷	ù£Æ9iÂÁü¸®iÃZó[{óÂÄÞS^GT¾p×½¦W`0´®N@£é^<Ð¢ìT³ûæCÝ"Ì@/ä6¦´ÀêÕ\vuHêø;(ú;¾ °@á×rÒÚÝü³û>jA`[ð7cÇHa|ºK^×1¤st»1jm®ùâò? áaÈÿ9ÄSÿv­ÁÔï£¡4oÃ}f.À%5à	P¤øè2[ÛVÎ\KìC#²3s6æÕJÅ¸-bûËdÔº±öº¢rq´¼j+R\Q;³E!l]Ëx:® RìÙÌ®ÁGãß·Éã¤I*`ÁQcÈÓF?bÁ¸ñ¢éugÅf* i7Èòþgï]zÖ²Qºüêëx
L*-HîT&þ÷0¢%Sâ%¤]AôúYe%ÃpÔúS£¨å¢
jÓs§Ó§Lø­fóhþ~¾#°,¸îÊé²ÇýÓ=²ò|.´<ÅÆo-+ê	ájÁ³gÐÖ	5ãZ·µ(£- øY`d¹u]èuÛ
»¢»£VÜtyÊFÊzhçÍgûYÌ§Ñý"þ7»ªo6fb)µ«íÂòyVÆg{õ¿®>¼&´tuJðÜËÎ¬°Ïç|ÏAÓì­Ú±L
nðV©8áFI$UÇ[=Aºã@W'eàVgr`ÓË
ÔªöÇuíÊ§Ø¢°ÊåGrhÅcÌ
Û²·mVG;Sp';wñÑý3ÄK£ü¤@â PK    ×fâXi(ûW  !     src/routes/recipe.jsxÍVQo0~¯Ôÿpâ)B ´i¥¬©´u¶mÚö6íÁ^fØ$Dÿ}g	ÐfR5ÄØwß}÷ù|EH|£ÄUà§"#ÕcãÍå«Ö¶ð|¤GEÓÂd®¥åmzyAóÒØ£>É8Be±«Ùe	a{yøX¼Ï¢hQ|Â×/ÕÆS0¯ôÃ"Ð¡RYVÂ\Eã$JHkjÛÖm£bk ä©h = +áO4­=ªãrÖY"\¤âÂÕõtÔ^[SjÎÔî¬¤D±8Áõø¶³¢X¤&M¨¢Iê§ñõ]úHÜña÷ÿHäÆøÕ°Æ)õvjÚBLt(ã1$zÿÉHlpæ
×hm9T-×ösö{[«Úô<+"ªëb=è!¤TÒ¶Ó­
AÛ¥ª(kSRª²4ÁÁæÎc+p9ò3BÏÄ¼6îÛQ»&)å¸¹+Úµ+mYLÝù¶ªàqY´®öSeYMÄµégChÞ\Xü¦x®\±¢)¤"=ê`ÕáERðLQP"1àÔWø·ÌuÈpvUJÌÉ)ú%l}ÐÐæÊR²1ñõ°±NW¹SsáäÙÉ96XÁ=Þ¶ZwV8yf[|Nsn FpNîÎ)ýrs@"iºxhÚ+LHÜ¨iïÉ¸nH^{X*Khk~¿D¸^ SBóÿ5áª¾Lº8ä+Ï·êñ/oõÊÖW×Ë¤±;Õ¿mðÉ¹¾&àìÚÈ1ô¾±àE;H2àh7©Gó!Ìï·C+TÚnæÛÒ¶ÕÁ±ËâELcsbÛu®úõ¶~E	Ja%XÙå9&s²oò=êgZ}ÅúÎñnñÕJÉOO
ìÆN(ãM Î¤2=&](G,Ì£½}yYBT;s8g8knÏSrpÇú¢ ³5WUôJÎÙyg¼+Ó"SJ´NVöõ3­¦º´;5³Ñ5£ý®f Ô	³½÷>[ÇÌ¾+}?±Ä$»+F
¯fñÓ	³úPK    <|âXlxyÊ¦  I     src/routes/recipe-editor.jsxíXIoÛ8¾È`48ÔKºYÚL.¨ÛS-Ñ6QD)uàú¿ÙiJ¢1A:ND¾ï-|ß{¤ã¦ø`uÁäÍ2!°ÆÀKÅ÷úô+ÉäY1×ïÊ	"ÈäE(°ª)!{zÖR:DG\<'A)á.8AïBÑ´s6§'?%,·Q¢7y¶¢i0ÝTGî¿¤³C¯5< °¢`¦
i<¯þÒïX¸AÿÄxÄrØMÍ×i
Äôæ$KuóÅX§*-ï_uáÉÐ*ÊÕý3.~«&Å³8|uAç(z¼Ï(eÏ<°íbÃ±¡Mlt 6²ÄÆ6±ÉØ¤»3"s*¸Å)HÃ£ìs#fCa+bd FbØ¼1nELÄDC,KqÙxn k±ñÂ@¼Ðâ¥xY0Ó¼$Ö}®ùØñ¤wÐ=owÀ¿Úµ/ñÍJIõ3.QÖV(øÂ]É/@çÌ*TU[¨ÖÛ,^0ðnÊçê ¢ÉþX!¤¶9]Ì ï¾Jw©x«þÝZwØpKæF9ªl4T#QXfE`ô59,º»+Í×;k7QöpwC%æhs¢óºÒG(¶w+àhCå^â`k/{2ªÄÝ¹Ò«ûJ¢#YÆm¿ý]# ¾ï¦|ÖÑåV¢,O	èîN¯ôBødì#ï-"´â§Ð,aÒä¡7Éºwé`©@ÃdËò=¡Äi¦1·ÁÃíÄpÝûÑ[3	ê«ðb ç_ÚK(&|©êÐRK 9PÐËÐ:â§7yWE?j%§jÒEðõóâÉ8/|o×Ú¼fá®Õ%ývÝ6(Q¬ö7µ»F[zÅ3ÈEµ%À³oWejWWPJ9U³
TÕ¿Ñs5¾Áy$ÖêÌe±dùú½¸jdÍmYÉ£ä×Vw%ºÔ#VC
CL[M¤å¿E\eË]²­bÊ]üØXéì¾ÊÔfn+-ð
ch(G¬Î3#?ô[pJWÛhöH¬,ýÏË_ÄËô7a¥¼yNJSÿ%FZfN2oë÷¦ý9ÆòYÐ~Ñ#?JÎÚö*ã#,;rÊOX×3ö±ðWäñ\%$«ÿ"°3ÍM#ß¾üÕ¤x×.4}ÅâÛF÷Ør BùÝF[û¼xÔ}Ñ9ìá|itþN¼j÷J5¸8+ÈjÀ»iXA¾¯µ¸»VËq7z+çHRóÄªYlh¶Gä/T³ ^]rÀp*¸x}¸W¿±·×ÜMÈn¡ôåcÕhquôÏ3XÉÓ·Ù§ôÀ°
¼V.Ø­q@µÒOCbá¢]é9Ä<NwâÚãÿPK    î`áXÐT+ë   Ê     src/routes/root.jsxuÏjÃ0Æï¼È©=¸)eì²uÇÑS{Ç»cYn¥ï>ç[È}úùý5mG,p(`Z(µÅYÕÔ/yÖLì	u<s»]i(é½r-Øw"ùFgØtVG'`£7ÒÏÄl¶pÏ3HÅ(=l¦n¨×º¹q:³nñXX=2äàKÃZÝ«¦º¨JTý{:C^Ò³·_óqÁüÙr­¯_n@Wdëè¦tN=CW©ÃÓÚs¼?ÇýÇ·LÆkmqÉ.¹mðgßPK    0gáXqaøjf       tailwind.config.jsURËNÄ0¼óQ/°Õj{çÄg nâ¶<í°­Vûïd+KªqgÆ3]ÛYg4çLòô(àÃÙ'g§×?^MÛ=àr# æò`ÍI0É³y«ÀæÔU!.§Ibh÷íÚ¶kO>
?x©åº1ÞoLñy³4êé*ºÞ~mÏkñwÆFç{×Ú#øqß: ÏÙ2[øÄ½ÐØìQªApJ©ÞDqxM2á[²­=Ò\jþ
¡.È'% |FL{irÕà«ÀBüf`Á ´xÝgO8D½ V
ÊRH)-Au´qUt(R¢¶/\/È¬Ö«]9SýÓÿ÷²yôkÔø	ÇG¥Í¤¼¹$Æ»Õ¥-0s(£O·~º§æE»«Ï#Á<­Íáhþ8¿9kÕéúPK    [áXÁ Õv   £      vite.config.jsU10 w¿Â[@jë©RQu@à+H¢Ä $ÄßÛ&]ït'sðQqÇ­8~xgeÀmô3U
Hq"·þÁýGÞÂ´â® "UCjpëy¥.G	xËï©]&=«K,5øÌ½ª~]à¨áPK     [áXÀà.  6  
                .eslintrc.cjsPK     [áX¤ªõÉ   ý   
            Y  .gitignorePK     hlâX*· ó   ~  
              index.htmlPK     áX¤K í                8  package.jsonPK     áXâu¤º  ü             ê  package-lock.jsonPK     Ã[áXå	B   P               ½¿  postcss.config.jsPK     [áX}ûñ  Ù              .À  public/vite.svgPK     [áX#Üÿ   Ã  	            LÃ  README.mdPK      Ô[áX                         rÄ  src/App.cssPK     %\áXV¦#   ´               Ä  src/App.jsxPK      [áX                        UÅ  src/assets/PK     [áXÇ×êE                ~Å  src/assets/react.svgPK      
jâX                        õÍ  src/components/PK     eáX%ìPD  ñ              "Î  src/components/Card.jsxPK     ÂáXÎ¤  ð              Ï  src/components/Footer.jsxPK     áX ßÉ~  Ì              vÒ  src/components/Header.jsxPK     WyâXïUÖf	  N              +Õ  src/components/Input.jsxPK     mâXD£  K              jÖ  src/components/MealCard.jsxPK     2yâX.Ó&D  6              FÙ  src/components/Select.jsxPK      \áXÐÅÄlÞ   k              ÁÚ  src/error-page.jsxPK     Ñ[áXÝÿÉ*   :   
            ÏÛ  src/index.cssPK     ¢hâXä×ú¼z  ã              $Ü  src/main.jsxPK      hâX                        ÈÝ  src/routes/PK     `_áXV6ñ  ô              ñÝ  src/routes/contact.jsxPK     gâXv"¢¨c                0á  src/routes/home.jsxPK     5^âXìÉ  +              Äå  src/routes/meal-plan.jsxPK     ×fâXi(ûW  !              ë  src/routes/recipe.jsxPK     <|âXlxyÊ¦  I              ï  src/routes/recipe-editor.jsxPK     î`áXÐT+ë   Ê              óó  src/routes/root.jsxPK     0gáXqaøjf                õ  tailwind.config.jsPK     [áXÁ Õv   £               ¥ö  vite.config.jsPK      ­  G÷    

==================== C:\Code\recipe-app\frontend\README.md ====================

# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh


==================== C:\Code\recipe-app\frontend\tailwind.config.js ====================

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  daisyui: {
    themes: [
      "light",
      "dark",
      "cupcake",
      "bumblebee",
      "emerald",
      "corporate",
      "synthwave",
      "retro",
      "cyberpunk",
      "valentine",
      "halloween",
      "garden",
      "forest",
      "aqua",
      "lofi",
      "pastel",
      "fantasy",
      "wireframe",
      "black",
      "luxury",
      "dracula",
      "cmyk",
      "autumn",
      "business",
      "acid",
      "lemonade",
      "night",
      "coffee",
      "winter",
      "dim",
      "nord",
      "sunset",
    ],
  },
  plugins: [require("@tailwindcss/typography"), require("daisyui")],
}

==================== C:\Code\recipe-app\frontend\vite.config.js ====================

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
})


==================== C:\Code\recipe-app\frontend\public\vite.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

==================== C:\Code\recipe-app\frontend\src\App.css ====================



==================== C:\Code\recipe-app\frontend\src\App.jsx ====================

import React from 'react'
import './App.css'

function App() {

  return (
    <h1 className="text-3xl font-bold underline">
      Hello world!
    </h1>
  )
}

export default App


==================== C:\Code\recipe-app\frontend\src\dummy-data.js ====================

export const authors = [
    { id: 1, label: "Jamie Oliver" },
    { id: 2, label: "Pinch of Nom" },
    { id: 3, label: "Bored of Lunch" },
    { id: 4, label: "Good Food" },
    { id: 5, label: "Gino D'Acampo" },
];

export const books = [
    { id: 1, label: "5 Ingredients", authorId: 1 },
    { id: 2, label: "Ministry of Food", authorId: 1 },
    { id: 3, label: "Quick & Easy", authorId: 2 },
    { id: 4, label: "Everyday Light", authorId: 2 },
    { id: 5, label: "The Healthy Air Fryer Book", authorId: 3 },
    { id: 6, label: "Healthy Slow Cooker: Even Easier", authorId: 3 },
    { id: 7, label: "Ultimate Slow Cooker Recipes", authorId: 4 },
    { id: 8, label: "Gino's Italian Escape", authorId: 5 },
    { id: 9, label: "Gino's Italy", authorId: 5 },
];

export const recipes = [
    {
        id: 1,
        recipeName: "Penne carbonara",
        selectedType: "main",
        servings: 4,
        selectedAuthor: 1,
        selectedBook: 1,
        pageNumber: 234,
        recipeUrl: "",
        cookingTime: 23,
        selectedCountry: "IT"
    },
    {
        id: 2,
        recipeName: "Chicken Curry",
        selectedType: "main",
        servings: 4,
        selectedAuthor: 2,
        selectedBook: 3,
        pageNumber: 78,
        recipeUrl: "",
        cookingTime: 30,
        selectedCountry: "IN"
    },
    {
        id: 3,
        recipeName: "Vegetable Stir Fry",
        selectedType: "main",
        servings: 3,
        selectedAuthor: 3,
        selectedBook: 5,
        pageNumber: 112,
        recipeUrl: "",
        cookingTime: 20,
        selectedCountry: "CN"
    },
    {
        id: 4,
        recipeName: "Beef Stew",
        selectedType: "main",
        servings: 5,
        selectedAuthor: 4,
        selectedBook: 7,
        pageNumber: 90,
        recipeUrl: "",
        cookingTime: 120,
        selectedCountry: "GB"
    },
    {
        id: 5,
        recipeName: "Tiramisu",
        selectedType: "dessert",
        servings: 6,
        selectedAuthor: 5,
        selectedBook: 9,
        pageNumber: 45,
        recipeUrl: "",
        cookingTime: 45,
        selectedCountry: "IT"
    },
    {
        id: 6,
        recipeName: "Fish Tacos",
        selectedType: "main",
        servings: 4,
        selectedAuthor: 1,
        selectedBook: 2,
        pageNumber: 180,
        recipeUrl: "",
        cookingTime: 25,
        selectedCountry: "MX"
    }
];

==================== C:\Code\recipe-app\frontend\src\error-page.jsx ====================

import { useRouteError } from "react-router-dom";

export default function ErrorPage() {
  const error = useRouteError();
  console.error(error);

  return (
    <div id="error-page">
      <h1>Oops!</h1>
      <p>Sorry, an unexpected error has occurred.</p>
      <p>
        <i>{error.statusText || error.message}</i>
      </p>
    </div>
  );
}

==================== C:\Code\recipe-app\frontend\src\index.css ====================

@tailwind base;
@tailwind components;
@tailwind utilities;

==================== C:\Code\recipe-app\frontend\src\main.jsx ====================

import * as React from "react";
import * as ReactDOM from "react-dom/client";
import {
  createBrowserRouter,
  RouterProvider,
} from "react-router-dom";
import "./index.css";

import Root from "./routes/root";
import ErrorPage from "./error-page";
import MealPlan from "./routes/meal-plan";
import Home from "./routes/home";
import Recipe from "./routes/recipe";
import RecipeEditor from "./routes/recipe-editor";
import ToDo from "./routes/to-do";

const router = createBrowserRouter([
  {
    path: "/",
    element: <Root />,
    errorElement: <ErrorPage />,
    children: [
      {
        path: "",
        element: <Home />,
      },
      {
        path: "meal-plan/:mealPlanId",
        element: <MealPlan />,
      },
      {
        path: "recipe/:recipeId",
        element: <Recipe />,
      },
      {
        path: "/editor",
        element: <RecipeEditor />
      },
      {
        path: "/editor/:recipeId",
        element: <RecipeEditor />
      },
      {
        path: "/to-do",
        element: <ToDo />
      },
    ],
  },  
]);

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);

==================== C:\Code\recipe-app\frontend\src\assets\react.svg ====================

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

==================== C:\Code\recipe-app\frontend\src\components\Card.jsx ====================

import React from "react";
import classNames from 'classnames';

const colorClasses = {
    base: {
        bg: 'bg-base-100',
        text: 'text-base-content'
    },
    primary: {
        bg: 'bg-primary',
        text: 'text-primary-content'
    },
    secondary: {
        bg: 'bg-secondary',
        text: 'text-secondary-content'
    }
    // Add more colors as needed
};

export default function Card({ children, color = 'base', className }) {
    const colors = colorClasses[color] || colorClasses.base;

    return (
        <div className={classNames("card w-full shadow-xl", colors.bg, colors.text, className)}>
            <div className="card-body p-3">
                {children}
            </div>
        </div>
    );
}


==================== C:\Code\recipe-app\frontend\src\components\FlagRadio.jsx ====================

import React from "react";
import { FlagIcon } from "react-flag-kit";

function FlagRadio({ country, code, selectedCountry, handleCountryChange }) {
    const id = code.toLowerCase();

    return (
        <li>
            <input
                type="radio"
                id={`country-${id}`}
                name="country"
                value={code}
                className="hidden peer"
                checked={selectedCountry === code}
                onChange={handleCountryChange}
            />
            <label htmlFor={`country-${id}`} className="btn btn-sm inline-flex peer-checked:btn-accent w-full">
                <FlagIcon code={code} size={16} />
                <span className="text-[10px]">{country}</span>
            </label>
        </li>
    );
}

export default FlagRadio;


==================== C:\Code\recipe-app\frontend\src\components\Header.jsx ====================

import React from "react";
import { Link, NavLink } from "react-router-dom";

export default function Header() {

    const navItems = [
        { to: "/", label: "Home" },
        { to: "/meal-plan/1", label: "Meal plan" },
        { to: "/editor", label: "Recipe editor" },
        { to: "/recipe/0", label: "Recipe details"},
        { to: "/to-do", label: "To-do list"},
    ];

    return (
        <>
            <div className="navbar bg-base-100 shadow z-10 px-6">
                <div className="flex-1">
                    <Link to="/">
                        <a className="text flex gap-2 items-center">                       
                            <span className="font-medium flex gap-1">The<span className="font-bold">Coffey</span>Kitchen</span>
                            <div className="flex justify-center gap-1 absolute mt-7 ml-[35px]">
                                <span className="w-1 h-1 bg-accent rounded-full"></span>
                                <span className="w-1 h-1 bg-secondary rounded-full"></span>
                                <span className="w-1 h-1 bg-primary rounded-full"></span>
                                <span className="w-1 h-1 bg-accent rounded-full"></span>
                                <span className="w-1 h-1 bg-secondary rounded-full"></span>
                                <span className="w-1 h-1 bg-primary rounded-full"></span>
                            </div>
                        </a>
                    </Link>
                </div>
                <div className="flex-none">
                    <div className="dropdown dropdown-end">
                        <div tabIndex={0} role="button" className="btn btn-ghost btn-circle avatar">
                            <div className="w-10 rounded-full">
                                <img
                                    alt="Tailwind CSS Navbar component"
                                    src="https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.jpg" />
                            </div>
                        </div>
                        <ul
                            tabIndex={0}
                            className="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow">
                            <li>
                                {navItems.map((item, index) => (
                                    <NavLink key={index} to={item.to}>
                                        {item.label}
                                    </NavLink>
                                ))}                               
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </>
    )
}

==================== C:\Code\recipe-app\frontend\src\components\Input.jsx ====================

import React from "react";

export default function Input({ label, disabled, type = "text", value, onChange, required }) {
    return (
        <label className="form-control w-full">
            {label && (
                <div className="label">
                    <span className="label-text text-sm font-medium">{label}</span>
                </div>
            )}
            <input
                type={type}
                placeholder="Type here"
                className="input input-bordered w-full "
                disabled={disabled}
                value={value}
                onChange={onChange}
                required={required}
                {...(type === "number" && {
                    min: "0",
                    inputMode: "numeric",
                    pattern: "[0-9]*",
                    title: "Non-negative integral number"
                })}
            />
        </label>
    );
}


==================== C:\Code\recipe-app\frontend\src\components\MealCard.jsx ====================

import React from "react";
import Card from "./Card";
import { FaPlus, FaPen } from "react-icons/fa";

export default function MealCard({ mealType, meal, side, color, source, icon }) {
    const randomImageNumber = Math.floor(Math.random() * 1000);

    return (
        <div className="flex flex-col gap-2">
            {mealType && (
                <p className="font-bold flex flex-col text-sm">
                    {mealType} <span className={`h-[2px] w-8 bg-${color} mt-[2px]`}></span>
                </p>
            )}
            <Card>
                <div className="flex gap-3 min-h-20 items-center">                   
                    <div className="mask mask-squircle w-16">
                        {meal ?
                            <img src={`https://picsum.photos/500/500?random=${randomImageNumber}`} />
                            :
                            <div className={`bg-${color} w-20 h-20`}></div>
                        }
                    </div>
                    <div className="flex flex-col justify-center items-start flex-1">
                        {source && <span className="text-[8px] uppercase text-black/60 mb-1"><span className="font-bold">{source.author}</span> • {source.book}</span>}
                        {!meal && <span className="text-[8px] uppercase text-black/60 mb-1"><span className="font-bold">Nothing planned yet</span></span>}
                        <span className="font-bold">{meal || "Add a meal"}</span>
                        {side && <span className="text-black/60 text-xs">with {side}</span>}
                        {!meal && <span className="text-black/60 text-xs">Choose something delicious</span>}
                    </div>
                    <button className="btn flex items-center">
                        {icon ? icon : meal ? <FaPen /> : <FaPlus />}
                    </button>
                </div>
            </Card>
        </div>
    );
}


==================== C:\Code\recipe-app\frontend\src\components\Modal.jsx ====================

import React from "react";
import { FaWindowClose } from "react-icons/fa";
import { RxCross2 } from "react-icons/rx";

export default function Modal({ title = "Title", children, onClose }) {
    return (
        <div className="bg-black/30 absolute bottom-0 left-0 z-10 w-screen h-dvh flex items-end justify-center p-3 backdrop-blur-sm">
            <div className="bg-base-100 p-6 w-full rounded-xl shadow-lg">
                <div className="border-b flex items-center justify-between pb-2 mb-2">
                    <p className="text-lg font-bold">{title}</p>
                    {onClose && <RxCross2 className="text-4xl cursor-pointer bg-base-200 rounded-full p-2" onClick={onClose} />}
                </div>
                {children}
            </div>
        </div>
    )
}


==================== C:\Code\recipe-app\frontend\src\components\Select.jsx ====================

import React from "react";

export default function Select({ label, options, disabled, value, onChange }) {
    return (
        <label className="form-control w-full">
            {label && (
                <div className="label">
                    <span className="label-text text-sm font-medium">{label}</span>
                </div>
            )}
            <select
                className="select select-bordered w-full truncate"
                value={value}
                disabled={disabled}
                onChange={onChange}
            >
                <option value="">Pick one</option>
                {options.map((option) => (
                    <option key={option.id} value={option.id} className="truncate">{option.label}</option>
                ))}
            </select>
        </label>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\contact.jsx ====================

import { Form } from "react-router-dom";

export default function Contact() {
    const contact = {
        first: "Your",
        last: "Name",
        avatar: "https://robohash.org/you.png?size=200x200",
        twitter: "your_handle",
        notes: "Some notes",
        favorite: true,
    };

    return (
        <>
            <div id="contact">
                <div>
                    <img
                        key={contact.avatar}
                        src={
                            contact.avatar ||
                            `https://robohash.org/${contact.id}.png?size=200x200`
                        }
                    />
                </div>

                <div>
                    <h1>
                        {contact.first || contact.last ? (
                            <>
                                {contact.first} {contact.last}
                            </>
                        ) : (
                            <i>No Name</i>
                        )}{" "}
                        <Favorite contact={contact} />
                    </h1>

                    {contact.twitter && (
                        <p>
                            <a
                                target="_blank"
                                href={`https://twitter.com/${contact.twitter}`}
                            >
                                {contact.twitter}
                            </a>
                        </p>
                    )}

                    {contact.notes && <p>{contact.notes}</p>}

                    <div>
                        <Form action="edit">
                            <button type="submit">Edit</button>
                        </Form>
                        <Form
                            method="post"
                            action="destroy"
                            onSubmit={(event) => {
                                if (
                                    !confirm(
                                        "Please confirm you want to delete this record."
                                    )
                                ) {
                                    event.preventDefault();
                                }
                            }}
                        >
                            <button type="submit">Delete</button>
                        </Form>
                    </div>
                </div>
            </div>
        </>
    );
}

function Favorite({ contact }) {
    const favorite = contact.favorite;
    return (
        <Form method="post">
            <button
                name="favorite"
                value={favorite ? "false" : "true"}
                aria-label={
                    favorite
                        ? "Remove from favorites"
                        : "Add to favorites"
                }
            >
                {favorite ? "★" : "☆"}
            </button>
        </Form>
    );
}

==================== C:\Code\recipe-app\frontend\src\routes\home.jsx ====================

import React from "react";
import Card from "../components/Card";
import { Link } from "react-router-dom";
import MealCard from "../components/MealCard";
import { FaChevronRight } from "react-icons/fa";
import { recipes, authors, books } from "../dummy-data";

export default function Home() {
    const favoriteMeals = recipes.map(recipe => {
        const author = authors.find(author => author.id === recipe.selectedAuthor)?.label || "Unknown Author";
        const book = books.find(book => book.id === recipe.selectedBook)?.label || "Unknown Book";
        return {
            title: recipe.recipeName,
            source: { author, book },
            badge: recipe.selectedCountry,
        };
    });

    const getColor = (index) => {
        const colors = ["accent", "secondary", "primary"];
        return colors[index % colors.length];
    };

    return (
        <>
            <div className="flex flex-col gap-4">
                <h3 className="font-medium">Meal plans</h3>
                <div className="grid grid-cols-9 gap-4">
                    <div className="col-span-5 flex flex-col">
                        <Link to="meal-plan/1" className="w-full h-full">
                            <Card className="text h-full">
                                <div className="flex gap-2 flex-col h-full">
                                    <div className="flex flex-col grow">
                                        <span className="text-lg font-bold">This week</span>
                                        <span className="text-xs">Mon 1 Jul - Sun 7 Jul</span>
                                    </div>
                                    <div className="flex flex-col gap-1">
                                        <div className="grid grid-cols-2 items-center">
                                            <span className="text-xs">Breakfast</span>
                                            <div className="flex h-[16px]">
                                                <div className="bg-accent w-[52%] h-full rounded-l flex items-center justify-end px-1">
                                                    <span className="text-[10px] font-bold">
                                                        4
                                                    </span>
                                                </div>
                                                <div className="bg-neutral h-full flex-grow rounded-r"></div>
                                            </div>
                                        </div>
                                        <div className="grid grid-cols-2 items-center">
                                            <span className="text-xs">Lunch</span>
                                            <div className="flex h-[16px]">
                                                <div className="bg-secondary w-[33%] h-full rounded-l flex items-center justify-end px-1">
                                                    <span className="text-[10px] font-bold">
                                                        2
                                                    </span>
                                                </div>
                                                <div className="bg-neutral h-full flex-grow rounded-r"></div>
                                            </div>
                                        </div>
                                        <div className="grid grid-cols-2 items-center">
                                            <span className="text-xs">Dinner</span>
                                            <div className="flex h-[16px]">
                                                <div className="bg-primary w-[90%] h-full rounded-l flex items-center justify-end px-1">
                                                    <span className="text-[10px] font-bold">
                                                        6
                                                    </span>
                                                </div>
                                                <div className="bg-neutral h-full flex-grow rounded-r"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </Card>
                        </Link>
                    </div>
                    <div className="flex flex-col gap-4 col-span-4">
                        <Card className="flex-grow">
                            <p className="text-lg font-bold">1</p>
                            <p className="text-xs font-medium text-base-content/60">Upcoming</p>
                        </Card>
                        <Card className="flex-grow">
                            <p className="text-lg font-bold">12</p>
                            <p className="text-xs font-medium text-base-content/60">Previous</p>
                        </Card>
                    </div>
                </div>
                <h3 className="font-medium">Favourite meals</h3>
                {favoriteMeals.map((meal, index) => (
                    <Link to={`/recipe/${index + 1}`} key={index} className="w-full">
                        <MealCard
                            key={index}
                            meal={meal.title}
                            color={getColor(index)}
                            source={meal.source}
                            icon={<FaChevronRight />}
                        />
                    </Link>
                ))}
            </div>
        </>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\meal-plan.jsx ====================

import React, { useState } from "react";
import MealCard from "../components/MealCard";

const days = [
    {
        date: "2024-07-01",
        breakfast: null,
        breakfastSide: null,
        breakfastSource: null,
        lunch: "Ham sandwich",
        lunchSide: "Chips",
        lunchSource: { author: "John Doe", book: "Healthy Lunches" },
        dinner: "Spaghetti bolognese",
        dinnerSide: "Garlic bread",
        dinnerSource: { author: "Jane Smith", book: "Classic Italian Dishes" }
    },
    {
        date: "2024-07-02",
        breakfast: "Pancakes",
        breakfastSide: "Syrup",
        breakfastSource: { author: "Anna Johnson", book: "Breakfast Favorites" },
        lunch: null,
        lunchSide: null,
        lunchSource: null,
        dinner: null,
        dinnerSide: null,
        dinnerSource: null
    },
    {
        date: "2024-07-03",
        breakfast: "Omelette",
        breakfastSide: "Toast",
        breakfastSource: { author: "Anna Johnson", book: "Breakfast Favorites" },
        lunch: null,
        lunchSide: null,
        lunchSource: null,
        dinner: "Beef tacos",
        dinnerSide: "Salsa",
        dinnerSource: { author: "Carlos Gomez", book: "Mexican Cuisine" }
    },
    {
        date: "2024-07-04",
        breakfast: "Smoothie",
        breakfastSide: "Fruit salad",
        breakfastSource: { author: "Sarah Lee", book: "Healthy Breakfasts" },
        lunch: "Vegetable stir-fry",
        lunchSide: "Spring rolls",
        lunchSource: { author: "Emily Wang", book: "Asian Cuisine" },
        dinner: null,
        dinnerSide: null,
        dinnerSource: null
    },
    {
        date: "2024-07-05",
        breakfast: "Yogurt and granola",
        breakfastSide: "Berries",
        breakfastSource: { author: "Sarah Lee", book: "Healthy Breakfasts" },
        lunch: "Turkey wrap",
        lunchSide: "Salad",
        lunchSource: { author: "John Doe", book: "Healthy Lunches" },
        dinner: "Pizza",
        dinnerSide: "Garlic bread",
        dinnerSource: { author: "Luigi Rossi", book: "Italian Classics" }
    },
    {
        date: "2024-07-06",
        breakfast: "French toast",
        breakfastSide: "Maple syrup",
        breakfastSource: { author: "Anna Johnson", book: "Breakfast Favorites" },
        lunch: "Caesar salad",
        lunchSide: "Breadsticks",
        lunchSource: { author: "Mary Brown", book: "Salad Recipes" },
        dinner: "Lasagna",
        dinnerSide: "Caesar salad",
        dinnerSource: { author: "Luigi Rossi", book: "Italian Classics" }
    },
    {
        date: "2024-07-07",
        breakfast: "Bagel with cream cheese",
        breakfastSide: "Orange juice",
        breakfastSource: { author: "Anna Johnson", book: "Breakfast Favorites" },
        lunch: "Quinoa salad",
        lunchSide: "Fruit",
        lunchSource: { author: "Mary Brown", book: "Salad Recipes" },
        dinner: "Steak and potatoes",
        dinnerSide: "Green beans",
        dinnerSource: { author: "Gordon Ramsey", book: "Ultimate Cooking" }
    }
];
const getDayOfWeek = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-GB', { weekday: 'short' }).slice(0, 3);
};

const MealPlan = () => {
    const [selectedDate, setSelectedDate] = useState(days[0].date);
    const selectedDay = days.find(day => day.date === selectedDate);  

    return (
        <>
            <h1 className="font-bold">Meal plan details</h1>
            <div className="w-full flex gap-3 my-4 justify-between">
                {days.map((day, index) => (
                    <div
                        key={index}
                        className="flex flex-col items-center "
                        onClick={() => setSelectedDate(day.date)}
                    >
                        <div className="text-[10px] uppercase font-medium text-black/70">{getDayOfWeek(day.date)}</div>
                        <div className={`flex items-center justify-center text-sm font-medium cursor-pointer w-8 h-8 rounded border ${day.date === selectedDate ? 'bg-neutral text-neutral-content' : 'bg-base-100'}`}>
                            <div>{day.date.slice(-2)}</div>
                        </div>
                        <div className="flex justify-center gap-1 mt-1">
                            {day.breakfast && <span className="w-1 h-1 bg-accent rounded-full"></span>}
                            {day.lunch && <span className="w-1 h-1 bg-secondary rounded-full"></span>}
                            {day.dinner && <span className="w-1 h-1 bg-primary rounded-full"></span>}
                        </div>
                    </div>
                ))}
            </div>
            <div className="flex flex-col gap-4">
                <MealCard mealType="Breakfast" meal={selectedDay.breakfast} side={selectedDay.breakfastSide} source={selectedDay.breakfastSource} color="accent" />
                <MealCard mealType="Lunch" meal={selectedDay.lunch} side={selectedDay.lunchSide} source={selectedDay.lunchSource} color="secondary" />
                <MealCard mealType="Dinner" meal={selectedDay.dinner} side={selectedDay.dinnerSide} source={selectedDay.dinnerSource} color="primary" />
            </div>
        </>
    );
}

export default MealPlan;


==================== C:\Code\recipe-app\frontend\src\routes\recipe-editor.jsx ====================

import React, { useState, useEffect } from "react";
import Input from "../components/Input";
import Select from "../components/Select";
import Card from "../components/Card";
import { FaChevronRight, FaPlus } from "react-icons/fa";
import Modal from "../components/Modal";
import FlagRadio from "../components/FlagRadio";
import { NavLink, useParams } from "react-router-dom";
import {authors, books, recipes } from "../dummy-data"

export default function RecipeEditor() {
    const { recipeId } = useParams();
    const [step, setStep] = useState(1);
    const [recipeName, setRecipeName] = useState("");
    const [selectedAuthor, setSelectedAuthor] = useState("");
    const [selectedBook, setSelectedBook] = useState("");
    const [pageNumber, setPageNumber] = useState("");
    const [recipeUrl, setRecipeUrl] = useState("");
    const [selectedType, setSelectedType] = useState("main");
    const [selectedCountry, setSelectedCountry] = useState("");
    const [sourceType, setSourceType] = useState("none");
    const [servings, setServings] = useState(4);
    const [cookingTime, setCookingTime] = useState("");
    const [isAddAuthorModalOpen, setIsAddAuthorModalOpen] = useState(false);
    const [isAddRecipeBookModalOpen, setIsAddRecipeBookModalOpen] = useState(false);
    const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);

    useEffect(() => {
        if (recipeId) {
            const recipe = recipes.find(r => r.id === parseInt(recipeId));
            if (recipe) {
                setRecipeName(recipe.recipeName);
                setSelectedAuthor(recipe.selectedAuthor);
                setSelectedBook(recipe.selectedBook);
                setPageNumber(recipe.pageNumber);
                setRecipeUrl(recipe.recipeUrl);
                setSelectedType(recipe.selectedType);
                setSelectedCountry(recipe.selectedCountry);
                setServings(recipe.servings);
                setCookingTime(recipe.cookingTime);
                setSourceType(recipe.recipeUrl ? "online" : "book");
            }
        }
    }, [recipeId]);

    // const authorOptions = [
    //     { id: 1, label: "Jamie Oliver" },
    //     { id: 2, label: "Pinch of Nom" },
    //     { id: 3, label: "Bored of Lunch" },
    //     { id: 4, label: "Good Food" },
    //     { id: 5, label: "Gino D'Acampo" },
    // ];

    // const bookOptions = [
    //     { id: 1, label: "5 Ingredients", authorId: 1 },
    //     { id: 2, label: "Ministry of Food", authorId: 1 },
    //     { id: 3, label: "Quick & Easy", authorId: 2 },
    //     { id: 4, label: "Everyday Light", authorId: 2 },
    //     { id: 5, label: "The Healthy Air Fryer Book", authorId: 3 },
    //     { id: 6, label: "Healthy Slow Cooker: Even Easier", authorId: 3 },
    //     { id: 7, label: "Ultimate Slow Cooker Recipes", authorId: 4 },
    //     { id: 8, label: "Gino's Italian Escape", authorId: 5 },
    //     { id: 9, label: "Gino's Italy", authorId: 5 },
    // ];

    const sourceTypeOptions = [
        { id: "none", label: "None" },
        { id: "book", label: "Recipe book" },
        { id: "online", label: "Online" }
    ];

    const logState = () => {
        console.log({
            recipeName,
            selectedType,
            servings,
            selectedAuthor,
            selectedBook,
            pageNumber,
            recipeUrl,
            cookingTime,
            selectedCountry,
        });
    };

    const handleRecipeNameChange = (event) => {
        setRecipeName(event.target.value);
    };

    const handleAuthorChange = (event) => {
        setSelectedAuthor(event.target.value);
        setSelectedBook("");
        setSourceType("");
        setSelectedBook("");
        setRecipeUrl("");
    };

    const handleBookChange = (event) => {
        setSelectedBook(event.target.value);
    };

    const handlePageNumberChange = (event) => {
        setPageNumber(event.target.value);
    };

    const handleRecipeUrlChange = (event) => {
        setRecipeUrl(event.target.value);
    };

    const handleTypeChange = (event) => {
        setSelectedType(event.target.value);
    };

    const handleCountryChange = (event) => {
        setSelectedCountry(event.target.value);
    };

    const handleSourceTypeChange = (event) => {
        setSourceType(event.target.value);

        setSelectedBook("");
        setRecipeUrl("");
    };

    const handleServingsChange = (event) => {
        setServings(parseInt(event.target.value));
    };

    const handleCookingTimeChange = (event) => {
        setCookingTime(parseInt(event.target.value));
    };

    const handleNextStep = () => {
        setStep((prevStep) => Math.min(prevStep + 1, 3));
    };

    const handleBackStep = () => {
        setStep((prevStep) => Math.max(prevStep - 1, 1));
    };

    const handleRecipeSubmit = () => {
        logState();
        openSuccessModal();
    }

    const isNextButtonDisabled = () => {
        if (step === 1) {
            return !recipeName || !selectedType;
        }
        if (step === 2) {
            return !selectedAuthor;
        }

        if (step === 3) {
            return !selectedCountry;
        }

        return false;
    };

    const filteredBookOptions = books.filter(book => book.authorId === parseInt(selectedAuthor));

    const openAddAuthorModal = () => {
        setIsAddAuthorModalOpen(true);
    };

    const closeAddAuthorModal = () => {
        setIsAddAuthorModalOpen(false);
    };

    const openAddRecipeBookModal = () => {
        setIsAddRecipeBookModalOpen(true);
    };

    const closeAddRecipeBookModal = () => {
        setIsAddRecipeBookModalOpen(false);
    };

    const openSuccessModal = () => {
        setIsSuccessModalOpen(true);
    };

    const closeSuccessModal = () => {
        setIsSuccessModalOpen(false);
    };

    return (
        <div className="flex flex-col gap-4 h-full">
            <div className="flex gap-3 items-center">
                <div className="flex gap-1 items-center">
                    <span className={`block ${step === 1 ? 'bg-accent' : 'bg-gray-200'} text-accent-content w-5 h-5 text-xs rounded flex items-center justify-center font-bold`}>1</span>
                    {step === 1 && <span className="text-xs font-medium">Details</span>}
                </div>
                <span className="text-[8px] text-black/90"><FaChevronRight /></span>
                <div className="flex gap-1 items-center">
                    <span className={`block ${step === 2 ? 'bg-secondary' : 'bg-gray-200'} text-secondary-content w-5 h-5 text-xs rounded flex items-center justify-center font-bold`}>2</span>
                    {step === 2 && <span className="text-xs font-medium">Author</span>}
                </div>
                <span className="text-[8px] text-black/90"><FaChevronRight /></span>
                <div className="flex gap-1 items-center">
                    <span className={`block ${step === 3 ? 'bg-primary' : 'bg-gray-200'} text-primary-content w-5 h-5 text-xs rounded flex items-center justify-center font-bold`}>3</span>
                    {step === 3 && <span className="text-xs font-medium">Other details</span>}
                </div>
            </div>
            <Card className="grow h-full p-2">
                <div className="flex flex-col justify-between h-full">
                    {step === 1 && (
                        <div className="flex flex-col gap-6">
                            <Input
                                label="Recipe name"
                                onChange={handleRecipeNameChange}
                                required
                                value={recipeName}
                            />

                            <div>
                                <div className="label">
                                    <span className="label-text text-sm font-medium">Type</span>
                                </div>
                                <div className="flex gap-2">
                                    <input
                                        type="radio"
                                        name="meal-type"
                                        className="btn btn-sm"
                                        aria-label="Main"
                                        value="main"
                                        onChange={handleTypeChange}
                                        checked={selectedType === "main"}
                                    />
                                    <input
                                        type="radio"
                                        name="meal-type"
                                        className="btn btn-sm"
                                        aria-label="Side"
                                        value="side"
                                        onChange={handleTypeChange}
                                        checked={selectedType === "side"}
                                    />
                                </div>
                            </div>

                            <div>
                                <div className="label">
                                    <span className="label-text text-sm font-medium">Servings</span>
                                </div>
                                <input
                                    type="range"
                                    min={1}
                                    max={5}
                                    value={servings}
                                    className="range"
                                    step={1}
                                    onChange={handleServingsChange}
                                />
                                <div className="flex w-full justify-between px-2 text-xs">
                                    <span>1</span>
                                    <span>2</span>
                                    <span>3</span>
                                    <span>4</span>
                                    <span>5</span>
                                </div>
                            </div>

                        </div>
                    )}

                    {step === 2 && (
                        <div className="flex flex-col gap-6">
                            <div className="flex gap-2 items-end">
                                <Select
                                    label="Author"
                                    options={authors}
                                    value={selectedAuthor}
                                    onChange={handleAuthorChange}
                                />
                                <button className="btn" onClick={openAddAuthorModal}><FaPlus /></button>
                            </div>
                            <Select
                                label="Recipe type"
                                options={sourceTypeOptions}
                                disabled={!selectedAuthor}
                                value={sourceType}
                                onChange={handleSourceTypeChange}
                            />
                            <div className="flex gap-2 items-end">
                                <div className="w-full max-w-xs flex-shrink-1">
                                    <Select
                                        label="Recipe book"
                                        options={filteredBookOptions}
                                        disabled={sourceType !== "book"}
                                        value={selectedBook}
                                        onChange={handleBookChange}
                                    />
                                </div>
                                <button
                                    className="btn"
                                    onClick={openAddRecipeBookModal}
                                    disabled={sourceType !== "book"}
                                >
                                    <FaPlus />
                                </button>
                            </div>

                            {sourceType === "book" ? (<Input
                                label="Page number"
                                type="number"
                                disabled={!selectedBook}
                                onChange={handlePageNumberChange}
                                value={pageNumber}
                            />) : <Input
                                label="Recipe URL"
                                onChange={handleRecipeUrlChange}
                                disabled={sourceType !== "online"}
                                value={recipeUrl}
                            />
                            }
                        </div>
                    )}

                    {step === 3 && (
                        <div className="flex flex-col gap-6">
                            <Input
                                label="Cooking time (minutes)"
                                type="number"
                                onChange={handleCookingTimeChange}
                                required
                                value={cookingTime}
                            />

                            <div>
                                <div className="label">
                                    <span className="label-text text-sm font-medium">Cuisine</span>
                                </div>
                                <ul className="grid grid-cols-2 gap-2 w-full flex-wrap">
                                    <FlagRadio code="MX" country="Mexican" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="US" country="American" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="CN" country="Chinese" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="GB" country="British" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="IT" country="Italian" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="ES" country="Spanish" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="FR" country="French" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="IN" country="Indian" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="GR" country="Greek" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="JP" country="Japanese" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="KR" country="Korean" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                    <FlagRadio code="TH" country="Thai" selectedCountry={selectedCountry} handleCountryChange={handleCountryChange} />
                                </ul>
                            </div>
                        </div>
                    )}

                    <div className="flex justify-between gap-4">
                        <div>
                            {step > 1 && <button className="btn btn-ghost" onClick={handleBackStep}>Back</button>}
                        </div>
                        <div className="flex gap-4">
                            <button className="btn px-6">Cancel</button>
                            {step < 3 && (
                                <button className={`btn btn-accent px-6`} onClick={handleNextStep} disabled={isNextButtonDisabled()}>
                                    Next
                                </button>
                            )}
                            {step === 3 && (
                                <button className={`btn btn-secondary px-6`} onClick={handleRecipeSubmit} disabled={isNextButtonDisabled()}>
                                    Finish
                                </button>
                            )}
                        </div>
                    </div>
                </div>
            </Card>

            {isAddAuthorModalOpen && (
                <Modal title="Add Author" onClose={closeAddAuthorModal}>
                    <div className="flex flex-col gap-6">

                        <Input label="Author name" className="w-full" />
                        <button className="btn btn-primary">Add author</button>
                    </div>
                </Modal>
            )}

            {isAddRecipeBookModalOpen && (
                <Modal title="Add recipe book" onClose={closeAddRecipeBookModal}>
                    <div className="flex flex-col gap-6">
                        <Input label="Title" className="w-full" />

                        <Select
                            label="Author"
                            options={authorOptions}
                            value={selectedAuthor}
                            onChange={handleAuthorChange}
                            disabled={true}
                        />
                        <button className="btn btn-primary">Add recipe book</button>
                    </div>
                </Modal>
            )}

            {isSuccessModalOpen && (
                <Modal title="Recipe Added!">
                    <div className="flex flex-col gap-6">
                        <p>Fantastic! 🎉 <span className="font-bold">{recipeName}</span>, is now part of the app!</p>
                        <p>But wait, it looks like your recipe still needs some ingredients! Shall we add them now?</p>
                        <button className="btn btn-primary">Let's add ingredients!</button>
                        <NavLink to="/" className="btn">Back to home screen</NavLink>
                    </div>
                </Modal>
            )}


        </div>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\recipe.jsx ====================

import React, { useState, useEffect } from "react";
import { FaHeart } from "react-icons/fa";
import { useParams, Link } from "react-router-dom"; // Import useParams and Link
import { recipes, authors, books } from "../dummy-data"; // Import recipes, authors, and books
import Card from "../components/Card";

export default function Recipe() {
    const { recipeId } = useParams(); // Get recipeId from the URL
    const [recipe, setRecipe] = useState(null);

    useEffect(() => {
        const foundRecipe = recipes.find(r => r.id === parseInt(recipeId));
        if (foundRecipe) {
            const author = authors.find(author => author.id === foundRecipe.selectedAuthor)?.label || "Unknown Author";
            const book = books.find(book => book.id === foundRecipe.selectedBook)?.label || "Unknown Book";

            setRecipe({
                ...foundRecipe,
                author,
                book,
                image: "https://picsum.photos/500/300",
                details: {
                    calories: 345,
                    weight: 250,
                    rating: 4.7,
                    time: foundRecipe.cookingTime,
                },
                tags: ["Breakfast", "Fast", "Easy"],
                ingredients: [
                    { name: "Eggs", quantity: "3 pc" },
                    { name: "Toast bread", quantity: "2 pc" },
                    { name: "Avocado", quantity: "1 pc" },
                    { name: "Tomato", quantity: "1/2 pc" },
                    { name: "Cheese", quantity: "70 g" },
                ],
            });
        }
    }, [recipeId]);

    if (!recipe) {
        return <div>Loading...</div>;
    }

    return (
        <Card>
            <div className="p-2">
                <div className="relative">
                    <img src={recipe.image} alt={recipe.recipeName} className="w-full h-64 object-cover rounded" />
                    <div className="absolute top-2 left-2 bg-white rounded-full p-1">
                        <FaHeart className="text-gray-500" />
                    </div>
                </div>
                <h1 className="text-2xl font-bold mt-4">{recipe.recipeName}</h1>
                <p className="text-sm text-gray-500 mt-2">by {recipe.author}</p>
                <p className="text-sm text-gray-500">from the book {recipe.book}</p>
                <Link to={`/editor/${recipeId}`} className="btn btn-sm btn-accent mt-4">
                    Edit Recipe
                </Link>
                <div className="flex gap-2 mt-4">
                    {recipe.tags.map((tag, index) => (
                        <span key={index} className="bg-green-100 text-green-700 text-xs font-semibold px-2 py-1 rounded">
                            {tag}
                        </span>
                    ))}
                </div>
                <h2 className="text-xl font-semibold mt-4">Ingredients</h2>
                <ul className="list-disc list-inside mt-2">
                    {recipe.ingredients.map((ingredient, index) => (
                        <li key={index}>
                            {ingredient.name} - {ingredient.quantity}
                        </li>
                    ))}
                </ul>
                <div className="mt-4">

                </div>
            </div>
        </Card>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\root.jsx ====================

import { Outlet } from "react-router-dom";
import Header from "../components/Header";

export default function Root() {
    return (
        <div className="flex flex-col h-dvh max-h-dvh bg-base-200 text-base-content items-center">
            <Header />
            <div className="grow overflow-auto p-6 w-full max-w-sm">
                <Outlet />
            </div>
        </div>
    );
}


==================== C:\Code\recipe-app\frontend\src\routes\to-do.jsx ====================

import React from "react";
import Card from "../components/Card";

export default function ToDo() {
    return (
        <Card>
            <div className="prose">
                <h3>To do list</h3>
                <ul>
                    <li><s>Recipe editor</s></li>
                    <li>Add step and image upload to recipe editor</li>
                    <li>Ingredient editor inc. add ingredient modal</li>
                    <li>Meal plan list</li>
                    <li>Shopping list</li>
                    <li>Add meal plan modal for home screen inc. calendar</li>
                    <li>Add/edit meal modal on meal plan</li>
                    <li><s>Edit recipe using recipe editor, pre-filled details</s></li>
                    <li>Icons on upcoming and previous cards</li>
                </ul>
            </div>
        </Card>
    );
}

==================== C:\Code\recipe-app\server\database.py ====================

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite:///../mydatabase2.db"
engine = create_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

==================== C:\Code\recipe-app\server\main.py ====================

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from models import Base
from database import engine
from api.routes import (
    ingredients_router,
    recipes_router,
    users_router,
    ingredient_categories_router,
    ingredient_sub_categories_router,
    recipe_authors_router,
    recipe_books_router,
    recipe_ingredients_router,
    units_router,
    meal_plans_router,
    meal_plan_recipes_router,
    shopping_lists_router,
    shopping_list_ingredients_router,  # Add these lines
)

# Create the tables
Base.metadata.create_all(bind=engine)

# FastAPI instance
app = FastAPI()

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],  # Allows all origins
    allow_credentials=True,
    allow_methods=["*"],  # Allows all methods
    allow_headers=["*"],  # Allows all headers
)

# Include API routes
app.include_router(ingredients_router)
app.include_router(recipes_router)
app.include_router(users_router)
app.include_router(ingredient_categories_router)
app.include_router(ingredient_sub_categories_router)
app.include_router(recipe_authors_router)
app.include_router(recipe_books_router)
app.include_router(recipe_ingredients_router)
app.include_router(units_router)
app.include_router(meal_plans_router)
app.include_router(meal_plan_recipes_router)
app.include_router(shopping_lists_router)  # Add this line
app.include_router(shopping_list_ingredients_router)  # Add this line

@app.get("/")
def read_root():
    return {"Hello": "World"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000, reload=True)


==================== C:\Code\recipe-app\server\api\__init__.py ====================



==================== C:\Code\recipe-app\server\api\routes\ingredients.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import Ingredient as IngredientModel
from schemas.ingredient import Ingredient as IngredientSchema, IngredientCreate, IngredientUpdate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/ingredients")

@router.get("/", response_model=List[IngredientSchema])
def read_ingredients(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    ingredients = db.query(IngredientModel).offset(skip).limit(limit).all()
    return ingredients

@router.post("/", response_model=IngredientSchema, status_code=status.HTTP_201_CREATED)
def create_ingredient(ingredient: IngredientCreate, db: Session = Depends(get_db)):
    db_ingredient = IngredientModel(
        IngredientName=ingredient.IngredientName,
        PurchaseWeightVolume=ingredient.PurchaseWeightVolume,
        PurchaseUnitID=ingredient.PurchaseUnitID,
        SubCategoryID=ingredient.SubCategoryID,
        PurchaseWeightUnitID=ingredient.PurchaseWeightUnitID,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_ingredient)
    db.commit()
    db.refresh(db_ingredient)
    return db_ingredient

@router.put("/{ingredient_id}", response_model=IngredientSchema)
def update_ingredient(ingredient_id: int, ingredient: IngredientUpdate, db: Session = Depends(get_db)):
    db_ingredient = db.query(IngredientModel).filter(IngredientModel.IngredientID == ingredient_id).first()
    if db_ingredient is None:
        raise HTTPException(status_code=404, detail="Ingredient not found")
    for key, value in ingredient.dict().items():
        setattr(db_ingredient, key, value)
    db_ingredient.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_ingredient)
    return db_ingredient

@router.delete("/{ingredient_id}", response_model=IngredientSchema)
def delete_ingredient(ingredient_id: int, db: Session = Depends(get_db)):
    db_ingredient = db.query(IngredientModel).filter(IngredientModel.IngredientID == ingredient_id).first()
    if db_ingredient is None:
        raise HTTPException(status_code=404, detail="Ingredient not found")
    db.delete(db_ingredient)
    db.commit()
    return db_ingredient


==================== C:\Code\recipe-app\server\api\routes\ingredient_categories.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import IngredientCategory as IngredientCategoryModel
from schemas.ingredient_category import IngredientCategory, IngredientCategoryCreate, IngredientCategoryUpdate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/ingredient-categories")

@router.get("/", response_model=List[IngredientCategory])
def read_ingredient_categories(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    ingredient_categories = db.query(IngredientCategoryModel).offset(skip).limit(limit).all()
    return ingredient_categories

@router.post("/", response_model=IngredientCategory, status_code=status.HTTP_201_CREATED)
def create_ingredient_category(ingredient_category: IngredientCategoryCreate, db: Session = Depends(get_db)):
    db_ingredient_category = IngredientCategoryModel(
        CategoryName=ingredient_category.CategoryName,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    try:
        db.add(db_ingredient_category)
        db.commit()
        db.refresh(db_ingredient_category)
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Category name already exists.")
    return db_ingredient_category

@router.put("/{category_id}", response_model=IngredientCategory)
def update_ingredient_category(category_id: int, ingredient_category: IngredientCategoryUpdate, db: Session = Depends(get_db)):
    db_ingredient_category = db.query(IngredientCategoryModel).filter(IngredientCategoryModel.CategoryID == category_id).first()
    if db_ingredient_category is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient category not found")
    for key, value in ingredient_category.dict().items():
        setattr(db_ingredient_category, key, value)
    db_ingredient_category.UpdatedAt = datetime.utcnow()
    try:
        db.commit()
        db.refresh(db_ingredient_category)
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Category name already exists.")
    return db_ingredient_category

@router.delete("/{category_id}", response_model=IngredientCategory)
def delete_ingredient_category(category_id: int, db: Session = Depends(get_db)):
    db_ingredient_category = db.query(IngredientCategoryModel).filter(IngredientCategoryModel.CategoryID == category_id).first()
    if db_ingredient_category is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient category not found")
    db.delete(db_ingredient_category)
    db.commit()
    return db_ingredient_category


==================== C:\Code\recipe-app\server\api\routes\ingredient_sub_categories.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from database import get_db
from models import IngredientSubCategory as IngredientSubCategoryModel
from schemas.ingredient_sub_category import (
    IngredientSubCategory,
    IngredientSubCategoryCreate,
    IngredientSubCategoryUpdate
)
from datetime import datetime

router = APIRouter(prefix="/api/ingredient-sub-categories")

@router.get("/", response_model=List[IngredientSubCategory])
def read_ingredient_sub_categories(skip: int = 0, limit: int = 1000, db: Session = Depends(get_db)):
    ingredient_sub_categories = db.query(IngredientSubCategoryModel).offset(skip).limit(limit).all()
    return ingredient_sub_categories

@router.get("/{sub_category_id}", response_model=IngredientSubCategory)
def read_ingredient_sub_category(sub_category_id: int, db: Session = Depends(get_db)):
    db_ingredient_sub_category = db.query(IngredientSubCategoryModel).filter(IngredientSubCategoryModel.SubCategoryID == sub_category_id).first()
    if not db_ingredient_sub_category:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient sub-category not found")
    return db_ingredient_sub_category

@router.get("/category/{category_id}", response_model=List[IngredientSubCategory])
def read_ingredient_sub_categories_by_category(category_id: int, skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    ingredient_sub_categories = db.query(IngredientSubCategoryModel).filter(IngredientSubCategoryModel.CategoryID == category_id).offset(skip).limit(limit).all()
    return ingredient_sub_categories

@router.post("/", response_model=IngredientSubCategory, status_code=status.HTTP_201_CREATED)
def create_ingredient_sub_category(ingredient_sub_category: IngredientSubCategoryCreate, db: Session = Depends(get_db)):
    db_ingredient_sub_category = IngredientSubCategoryModel(
        SubCategoryName=ingredient_sub_category.SubCategoryName,
        CategoryID=ingredient_sub_category.CategoryID,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_ingredient_sub_category)
    db.commit()
    db.refresh(db_ingredient_sub_category)
    return db_ingredient_sub_category

@router.put("/{sub_category_id}", response_model=IngredientSubCategory)
def update_ingredient_sub_category(sub_category_id: int, ingredient_sub_category: IngredientSubCategoryUpdate, db: Session = Depends(get_db)):
    db_ingredient_sub_category = db.query(IngredientSubCategoryModel).filter(IngredientSubCategoryModel.SubCategoryID == sub_category_id).first()
    if not db_ingredient_sub_category:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient sub-category not found")
    
    for key, value in ingredient_sub_category.dict().items():
        setattr(db_ingredient_sub_category, key, value)
    db_ingredient_sub_category.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_ingredient_sub_category)
    return db_ingredient_sub_category

@router.delete("/{sub_category_id}", response_model=IngredientSubCategory)
def delete_ingredient_sub_category(sub_category_id: int, db: Session = Depends(get_db)):
    db_ingredient_sub_category = db.query(IngredientSubCategoryModel).filter(IngredientSubCategoryModel.SubCategoryID == sub_category_id).first()
    if not db_ingredient_sub_category:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Ingredient sub-category not found")
    
    db.delete(db_ingredient_sub_category)
    db.commit()
    return db_ingredient_sub_category


==================== C:\Code\recipe-app\server\api\routes\meal_plans.py ====================

# api/routes/meal_plans.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import MealPlan as MealPlanModel
from schemas.meal_plan import MealPlan as MealPlanSchema, MealPlanCreate, MealPlanUpdate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/meal-plans")

@router.get("/", response_model=List[MealPlanSchema])
def read_meal_plans(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    meal_plans = db.query(MealPlanModel).offset(skip).limit(limit).all()
    return meal_plans

@router.post("/", response_model=MealPlanSchema, status_code=status.HTTP_201_CREATED)
def create_meal_plan(meal_plan: MealPlanCreate, db: Session = Depends(get_db)):
    db_meal_plan = MealPlanModel(
        UserID=meal_plan.UserID,
        PlanName=meal_plan.PlanName,
        StartDate=meal_plan.StartDate,
        EndDate=meal_plan.EndDate,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_meal_plan)
    db.commit()
    db.refresh(db_meal_plan)
    return db_meal_plan

@router.get("/{meal_plan_id}", response_model=MealPlanSchema)
def read_meal_plan(meal_plan_id: int, db: Session = Depends(get_db)):
    meal_plan = db.query(MealPlanModel).filter(MealPlanModel.MealPlanID == meal_plan_id).first()
    if meal_plan is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan not found")
    return meal_plan

@router.put("/{meal_plan_id}", response_model=MealPlanSchema)
def update_meal_plan(meal_plan_id: int, meal_plan: MealPlanUpdate, db: Session = Depends(get_db)):
    db_meal_plan = db.query(MealPlanModel).filter(MealPlanModel.MealPlanID == meal_plan_id).first()
    if db_meal_plan is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan not found")
    for key, value in meal_plan.dict().items():
        setattr(db_meal_plan, key, value)
    db_meal_plan.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_meal_plan)
    return db_meal_plan

@router.delete("/{meal_plan_id}", response_model=MealPlanSchema)
def delete_meal_plan(meal_plan_id: int, db: Session = Depends(get_db)):
    db_meal_plan = db.query(MealPlanModel).filter(MealPlanModel.MealPlanID == meal_plan_id).first()
    if db_meal_plan is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan not found")
    db.delete(db_meal_plan)
    db.commit()
    return db_meal_plan


==================== C:\Code\recipe-app\server\api\routes\meal_plan_recipes.py ====================

# api/routes/meal_plan_recipes.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import MealPlanRecipe as MealPlanRecipeModel
from schemas.meal_plan_recipe import MealPlanRecipe as MealPlanRecipeSchema, MealPlanRecipeCreate, MealPlanRecipeUpdate
from typing import List

router = APIRouter(prefix="/api/meal-plan-recipes")

@router.get("/", response_model=List[MealPlanRecipeSchema])
def read_meal_plan_recipes(skip: int = 0, limit: int = 10000, db: Session = Depends(get_db)):
    meal_plan_recipes = db.query(MealPlanRecipeModel).offset(skip).limit(limit).all()
    return meal_plan_recipes

@router.post("/", response_model=MealPlanRecipeSchema, status_code=status.HTTP_201_CREATED)
def create_meal_plan_recipe(meal_plan_recipe: MealPlanRecipeCreate, db: Session = Depends(get_db)):
    db_meal_plan_recipe = MealPlanRecipeModel(
        MealPlanID=meal_plan_recipe.MealPlanID,
        RecipeID=meal_plan_recipe.RecipeID,
        MealType=meal_plan_recipe.MealType,
        Date=meal_plan_recipe.Date,
    )
    db.add(db_meal_plan_recipe)
    db.commit()
    db.refresh(db_meal_plan_recipe)
    return db_meal_plan_recipe

@router.get("/{meal_plan_recipe_id}", response_model=MealPlanRecipeSchema)
def read_meal_plan_recipe(meal_plan_recipe_id: int, db: Session = Depends(get_db)):
    meal_plan_recipe = db.query(MealPlanRecipeModel).filter(MealPlanRecipeModel.MealPlanRecipeID == meal_plan_recipe_id).first()
    if meal_plan_recipe is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan recipe not found")
    return meal_plan_recipe

@router.put("/{meal_plan_recipe_id}", response_model=MealPlanRecipeSchema)
def update_meal_plan_recipe(meal_plan_recipe_id: int, meal_plan_recipe: MealPlanRecipeUpdate, db: Session = Depends(get_db)):
    db_meal_plan_recipe = db.query(MealPlanRecipeModel).filter(MealPlanRecipeModel.MealPlanRecipeID == meal_plan_recipe_id).first()
    if db_meal_plan_recipe is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan recipe not found")
    for key, value in meal_plan_recipe.dict().items():
        setattr(db_meal_plan_recipe, key, value)
    db.commit()
    db.refresh(db_meal_plan_recipe)
    return db_meal_plan_recipe

@router.delete("/{meal_plan_recipe_id}", response_model=MealPlanRecipeSchema)
def delete_meal_plan_recipe(meal_plan_recipe_id: int, db: Session = Depends(get_db)):
    db_meal_plan_recipe = db.query(MealPlanRecipeModel).filter(MealPlanRecipeModel.MealPlanRecipeID == meal_plan_recipe_id).first()
    if db_meal_plan_recipe is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Meal plan recipe not found")
    db.delete(db_meal_plan_recipe)
    db.commit()
    return db_meal_plan_recipe


==================== C:\Code\recipe-app\server\api\routes\recipes.py ====================

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from database import get_db
from models import Recipe as RecipeModel
from schemas.recipe import Recipe as RecipeSchema, RecipeCreate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/recipes")

@router.get("/", response_model=List[RecipeSchema])
def read_recipes(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    recipes = db.query(RecipeModel).offset(skip).limit(limit).all()
    return recipes

@router.post("/", response_model=RecipeSchema, status_code=201)
def create_recipe(recipe: RecipeCreate, db: Session = Depends(get_db)):
    db_recipe = RecipeModel(
        RecipeName=recipe.RecipeName,
        AuthorID=recipe.AuthorID,
        BookID=recipe.BookID,
        PageNumber=recipe.PageNumber,
        OnlineURL=recipe.OnlineURL,
        CookTime=recipe.CookTime,
        Difficulty=recipe.Difficulty,
        Type=recipe.Type,
        ImageURL=recipe.ImageURL,
        Servings=recipe.Servings,
        Cuisine=recipe.Cuisine,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_recipe)
    db.commit()
    db.refresh(db_recipe)
    return db_recipe

@router.get("/{recipe_id}", response_model=RecipeSchema)
def read_recipe(recipe_id: int, db: Session = Depends(get_db)):
    recipe = db.query(RecipeModel).filter(RecipeModel.RecipeID == recipe_id).first()
    if recipe is None:
        raise HTTPException(status_code=404, detail="Recipe not found")
    return recipe

@router.put("/{recipe_id}", response_model=RecipeSchema)
def update_recipe(recipe_id: int, recipe: RecipeCreate, db: Session = Depends(get_db)):
    db_recipe = db.query(RecipeModel).filter(RecipeModel.RecipeID == recipe_id).first()
    if db_recipe is None:
        raise HTTPException(status_code=404, detail="Recipe not found")
    for key, value in recipe.dict().items():
        setattr(db_recipe, key, value)
    db_recipe.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_recipe)
    return db_recipe

@router.delete("/{recipe_id}", response_model=RecipeSchema)
def delete_recipe(recipe_id: int, db: Session = Depends(get_db)):
    db_recipe = db.query(RecipeModel).filter(RecipeModel.RecipeID == recipe_id).first()
    if db_recipe is None:
        raise HTTPException(status_code=404, detail="Recipe not found")
    db.delete(db_recipe)
    db.commit()
    return db_recipe


==================== C:\Code\recipe-app\server\api\routes\recipe_authors.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import RecipeAuthor as RecipeAuthorModel
from schemas.recipe_author import RecipeAuthor as RecipeAuthorSchema, RecipeAuthorCreate, RecipeAuthorUpdate
from typing import List

router = APIRouter(prefix="/api/recipe-authors")

@router.get("/", response_model=List[RecipeAuthorSchema])
def read_recipe_authors(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    recipe_authors = db.query(RecipeAuthorModel).offset(skip).limit(limit).all()
    return recipe_authors

@router.post("/", response_model=RecipeAuthorSchema, status_code=status.HTTP_201_CREATED)
def create_recipe_author(recipe_author: RecipeAuthorCreate, db: Session = Depends(get_db)):
    db_recipe_author = RecipeAuthorModel(
        AuthorName=recipe_author.AuthorName,
        AuthorImageURL=recipe_author.AuthorImageURL,
    )
    db.add(db_recipe_author)
    db.commit()
    db.refresh(db_recipe_author)
    return db_recipe_author

@router.get("/{author_id}", response_model=RecipeAuthorSchema)
def read_recipe_author(author_id: int, db: Session = Depends(get_db)):
    recipe_author = db.query(RecipeAuthorModel).filter(RecipeAuthorModel.AuthorID == author_id).first()
    if recipe_author is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe author not found")
    return recipe_author

@router.put("/{author_id}", response_model=RecipeAuthorSchema)
def update_recipe_author(author_id: int, recipe_author: RecipeAuthorUpdate, db: Session = Depends(get_db)):
    db_recipe_author = db.query(RecipeAuthorModel).filter(RecipeAuthorModel.AuthorID == author_id).first()
    if db_recipe_author is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe author not found")
    for key, value in recipe_author.dict().items():
        setattr(db_recipe_author, key, value)
    db.commit()
    db.refresh(db_recipe_author)
    return db_recipe_author

@router.delete("/{author_id}", response_model=RecipeAuthorSchema)
def delete_recipe_author(author_id: int, db: Session = Depends(get_db)):
    db_recipe_author = db.query(RecipeAuthorModel).filter(RecipeAuthorModel.AuthorID == author_id).first()
    if db_recipe_author is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe author not found")
    db.delete(db_recipe_author)
    db.commit()
    return db_recipe_author


==================== C:\Code\recipe-app\server\api\routes\recipe_books.py ====================

# api/routes/recipe_books.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import RecipeBook as RecipeBookModel
from schemas.recipe_book import RecipeBook as RecipeBookSchema, RecipeBookCreate, RecipeBookUpdate
from typing import List

router = APIRouter(prefix="/api/recipe-books")

@router.get("/", response_model=List[RecipeBookSchema])
def read_recipe_books(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    recipe_books = db.query(RecipeBookModel).offset(skip).limit(limit).all()
    return recipe_books

@router.post("/", response_model=RecipeBookSchema, status_code=status.HTTP_201_CREATED)
def create_recipe_book(recipe_book: RecipeBookCreate, db: Session = Depends(get_db)):
    db_recipe_book = RecipeBookModel(
        AuthorID=recipe_book.AuthorID,
        BookName=recipe_book.BookName,
        CoverArtURL=recipe_book.CoverArtURL,
    )
    db.add(db_recipe_book)
    db.commit()
    db.refresh(db_recipe_book)
    return db_recipe_book

@router.get("/{book_id}", response_model=RecipeBookSchema)
def read_recipe_book(book_id: int, db: Session = Depends(get_db)):
    recipe_book = db.query(RecipeBookModel).filter(RecipeBookModel.BookID == book_id).first()
    if recipe_book is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe book not found")
    return recipe_book

@router.put("/{book_id}", response_model=RecipeBookSchema)
def update_recipe_book(book_id: int, recipe_book: RecipeBookUpdate, db: Session = Depends(get_db)):
    db_recipe_book = db.query(RecipeBookModel).filter(RecipeBookModel.BookID == book_id).first()
    if db_recipe_book is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe book not found")
    for key, value in recipe_book.dict().items():
        setattr(db_recipe_book, key, value)
    db.commit()
    db.refresh(db_recipe_book)
    return db_recipe_book

@router.delete("/{book_id}", response_model=RecipeBookSchema)
def delete_recipe_book(book_id: int, db: Session = Depends(get_db)):
    db_recipe_book = db.query(RecipeBookModel).filter(RecipeBookModel.BookID == book_id).first()
    if db_recipe_book is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Recipe book not found")
    db.delete(db_recipe_book)
    db.commit()
    return db_recipe_book


==================== C:\Code\recipe-app\server\api\routes\recipe_ingredients.py ====================

# api/routes/recipe_ingredients.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from database import get_db
from models import RecipeIngredient as RecipeIngredientModel
from schemas.recipe_ingredient import (
    RecipeIngredient as RecipeIngredientSchema,
    RecipeIngredientCreate,
    RecipeIngredientUpdate
)
from datetime import datetime

router = APIRouter(prefix="/api/recipe-ingredients")

@router.get("/", response_model=List[RecipeIngredientSchema])
def read_recipe_ingredients(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    recipe_ingredients = db.query(RecipeIngredientModel).offset(skip).limit(limit).all()
    return recipe_ingredients

@router.post("/", response_model=RecipeIngredientSchema, status_code=status.HTTP_201_CREATED)
def create_recipe_ingredient(recipe_ingredient: RecipeIngredientCreate, db: Session = Depends(get_db)):
    db_recipe_ingredient = RecipeIngredientModel(
        RecipeID=recipe_ingredient.RecipeID,
        IngredientID=recipe_ingredient.IngredientID,
        SectionID=recipe_ingredient.SectionID,
        Quantity=recipe_ingredient.Quantity,
        UnitID=recipe_ingredient.UnitID
    )
    db.add(db_recipe_ingredient)
    db.commit()
    db.refresh(db_recipe_ingredient)
    return db_recipe_ingredient

@router.put("/{recipe_ingredient_id}", response_model=RecipeIngredientSchema)
def update_recipe_ingredient(recipe_ingredient_id: int, recipe_ingredient: RecipeIngredientUpdate, db: Session = Depends(get_db)):
    db_recipe_ingredient = db.query(RecipeIngredientModel).filter(RecipeIngredientModel.RecipeIngredientID == recipe_ingredient_id).first()
    if db_recipe_ingredient is None:
        raise HTTPException(status_code=404, detail="Recipe ingredient not found")
    for key, value in recipe_ingredient.dict().items():
        setattr(db_recipe_ingredient, key, value)
    db_recipe_ingredient.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_recipe_ingredient)
    return db_recipe_ingredient

@router.delete("/{recipe_ingredient_id}", response_model=RecipeIngredientSchema)
def delete_recipe_ingredient(recipe_ingredient_id: int, db: Session = Depends(get_db)):
    db_recipe_ingredient = db.query(RecipeIngredientModel).filter(RecipeIngredientModel.RecipeIngredientID == recipe_ingredient_id).first()
    if db_recipe_ingredient is None:
        raise HTTPException(status_code=404, detail="Recipe ingredient not found")
    db.delete(db_recipe_ingredient)
    db.commit()
    return db_recipe_ingredient


==================== C:\Code\recipe-app\server\api\routes\shopping_lists.py ====================

# api/routes/shopping_lists.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import ShoppingList as ShoppingListModel
from schemas.shopping_list import ShoppingList as ShoppingListSchema, ShoppingListCreate, ShoppingListUpdate
from typing import List
from datetime import datetime

router = APIRouter(prefix="/api/shopping-lists")

@router.get("/", response_model=List[ShoppingListSchema])
def read_shopping_lists(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    shopping_lists = db.query(ShoppingListModel).offset(skip).limit(limit).all()
    return shopping_lists

@router.post("/", response_model=ShoppingListSchema, status_code=status.HTTP_201_CREATED)
def create_shopping_list(shopping_list: ShoppingListCreate, db: Session = Depends(get_db)):
    db_shopping_list = ShoppingListModel(
        UserID=shopping_list.UserID,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    db.add(db_shopping_list)
    db.commit()
    db.refresh(db_shopping_list)
    return db_shopping_list

@router.get("/{shopping_list_id}", response_model=ShoppingListSchema)
def read_shopping_list(shopping_list_id: int, db: Session = Depends(get_db)):
    shopping_list = db.query(ShoppingListModel).filter(ShoppingListModel.ShoppingListID == shopping_list_id).first()
    if shopping_list is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list not found")
    return shopping_list

@router.put("/{shopping_list_id}", response_model=ShoppingListSchema)
def update_shopping_list(shopping_list_id: int, shopping_list: ShoppingListUpdate, db: Session = Depends(get_db)):
    db_shopping_list = db.query(ShoppingListModel).filter(ShoppingListModel.ShoppingListID == shopping_list_id).first()
    if db_shopping_list is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list not found")
    for key, value in shopping_list.dict().items():
        setattr(db_shopping_list, key, value)
    db_shopping_list.UpdatedAt = datetime.utcnow()
    db.commit()
    db.refresh(db_shopping_list)
    return db_shopping_list

@router.delete("/{shopping_list_id}", response_model=ShoppingListSchema)
def delete_shopping_list(shopping_list_id: int, db: Session = Depends(get_db)):
    db_shopping_list = db.query(ShoppingListModel).filter(ShoppingListModel.ShoppingListID == shopping_list_id).first()
    if db_shopping_list is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list not found")
    db.delete(db_shopping_list)
    db.commit()
    return db_shopping_list


==================== C:\Code\recipe-app\server\api\routes\shopping_list_ingredients.py ====================

# api/routes/shopping_list_ingredients.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from database import get_db
from models import ShoppingListIngredient as ShoppingListIngredientModel
from schemas.shopping_list_ingredient import ShoppingListIngredient as ShoppingListIngredientSchema, ShoppingListIngredientCreate, ShoppingListIngredientUpdate
from typing import List

router = APIRouter(prefix="/api/shopping-list-ingredients")

@router.get("/", response_model=List[ShoppingListIngredientSchema])
def read_shopping_list_ingredients(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    shopping_list_ingredients = db.query(ShoppingListIngredientModel).offset(skip).limit(limit).all()
    return shopping_list_ingredients

@router.post("/", response_model=ShoppingListIngredientSchema, status_code=status.HTTP_201_CREATED)
def create_shopping_list_ingredient(shopping_list_ingredient: ShoppingListIngredientCreate, db: Session = Depends(get_db)):
    db_shopping_list_ingredient = ShoppingListIngredientModel(
        ShoppingListID=shopping_list_ingredient.ShoppingListID,
        MealPlanRecipeID=shopping_list_ingredient.MealPlanRecipeID,
        IngredientID=shopping_list_ingredient.IngredientID,
        Quantity=shopping_list_ingredient.Quantity,
        UnitID=shopping_list_ingredient.UnitID,
        IsManual=shopping_list_ingredient.IsManual,
        AlreadyHave=shopping_list_ingredient.AlreadyHave,
        Purchased=shopping_list_ingredient.Purchased,
    )
    db.add(db_shopping_list_ingredient)
    db.commit()
    db.refresh(db_shopping_list_ingredient)
    return db_shopping_list_ingredient

@router.get("/{shopping_list_ingredient_id}", response_model=ShoppingListIngredientSchema)
def read_shopping_list_ingredient(shopping_list_ingredient_id: int, db: Session = Depends(get_db)):
    shopping_list_ingredient = db.query(ShoppingListIngredientModel).filter(ShoppingListIngredientModel.ShoppingListIngredientID == shopping_list_ingredient_id).first()
    if shopping_list_ingredient is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list ingredient not found")
    return shopping_list_ingredient

@router.put("/{shopping_list_ingredient_id}", response_model=ShoppingListIngredientSchema)
def update_shopping_list_ingredient(shopping_list_ingredient_id: int, shopping_list_ingredient: ShoppingListIngredientUpdate, db: Session = Depends(get_db)):
    db_shopping_list_ingredient = db.query(ShoppingListIngredientModel).filter(ShoppingListIngredientModel.ShoppingListIngredientID == shopping_list_ingredient_id).first()
    if db_shopping_list_ingredient is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list ingredient not found")
    for key, value in shopping_list_ingredient.dict().items():
        setattr(db_shopping_list_ingredient, key, value)
    db.commit()
    db.refresh(db_shopping_list_ingredient)
    return db_shopping_list_ingredient

@router.delete("/{shopping_list_ingredient_id}", response_model=ShoppingListIngredientSchema)
def delete_shopping_list_ingredient(shopping_list_ingredient_id: int, db: Session = Depends(get_db)):
    db_shopping_list_ingredient = db.query(ShoppingListIngredientModel).filter(ShoppingListIngredientModel.ShoppingListIngredientID == shopping_list_ingredient_id).first()
    if db_shopping_list_ingredient is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Shopping list ingredient not found")
    db.delete(db_shopping_list_ingredient)
    db.commit()
    return db_shopping_list_ingredient


==================== C:\Code\recipe-app\server\api\routes\units.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List
from database import get_db
from models import Unit as UnitModel
from schemas.unit import Unit as UnitSchema, UnitCreate, UnitUpdate

router = APIRouter(prefix="/api/units")

@router.get("/", response_model=List[UnitSchema])
def read_units(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    units = db.query(UnitModel).offset(skip).limit(limit).all()
    return units

@router.post("/", response_model=UnitSchema, status_code=status.HTTP_201_CREATED)
def create_unit(unit: UnitCreate, db: Session = Depends(get_db)):
    db_unit = UnitModel(
        UnitName=unit.UnitName,
        Abbreviation=unit.Abbreviation,
    )
    db.add(db_unit)
    db.commit()
    db.refresh(db_unit)
    return db_unit

@router.put("/{unit_id}", response_model=UnitSchema)
def update_unit(unit_id: int, unit: UnitUpdate, db: Session = Depends(get_db)):
    db_unit = db.query(UnitModel).filter(UnitModel.UnitID == unit_id).first()
    if db_unit is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Unit not found")
    for key, value in unit.dict().items():
        setattr(db_unit, key, value)
    db.commit()
    db.refresh(db_unit)
    return db_unit

@router.delete("/{unit_id}", response_model=UnitSchema)
def delete_unit(unit_id: int, db: Session = Depends(get_db)):
    db_unit = db.query(UnitModel).filter(UnitModel.UnitID == unit_id).first()
    if db_unit is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Unit not found")
    db.delete(db_unit)
    db.commit()
    return db_unit


==================== C:\Code\recipe-app\server\api\routes\users.py ====================

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from database import get_db
from models import User as UserModel
from schemas.user import UserRead, UserCreate, UserLogin
from typing import List
from datetime import datetime
import bcrypt

router = APIRouter(prefix="/api/users")

@router.get("/", response_model=List[UserRead])
def read_users(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    users = db.query(UserModel).offset(skip).limit(limit).all()
    return users

@router.post("/", response_model=UserRead, status_code=status.HTTP_201_CREATED)
def create_user(user: UserCreate, db: Session = Depends(get_db)):
    hashed_password = bcrypt.hashpw(user.Password.encode('utf-8'), bcrypt.gensalt())
    db_user = UserModel(
        Username=user.Username,
        PasswordHash=hashed_password.decode('utf-8'),
        Email=user.Email,
        CreatedAt=datetime.utcnow(),
        UpdatedAt=datetime.utcnow(),
    )
    try:
        db.add(db_user)
        db.commit()
        db.refresh(db_user)
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Username or Email already exists.")
    return db_user

@router.post("/login")
def login_user(user: UserLogin, db: Session = Depends(get_db)):
    db_user = db.query(UserModel).filter(UserModel.Username == user.Username).first()
    if not db_user or not bcrypt.checkpw(user.Password.encode('utf-8'), db_user.PasswordHash.encode('utf-8')):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid username or password")
    return {"message": "Login successful"}

@router.get("/{user_id}", response_model=UserRead)
def read_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(UserModel).filter(UserModel.UserID == user_id).first()
    if user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    return user

@router.put("/{user_id}", response_model=UserRead)
def update_user(user_id: int, user: UserCreate, db: Session = Depends(get_db)):
    db_user = db.query(UserModel).filter(UserModel.UserID == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    for key, value in user.dict().items():
        if key == "Password":
            value = bcrypt.hashpw(value.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        setattr(db_user, key, value)
    db_user.UpdatedAt = datetime.utcnow()
    try:
        db.commit()
        db.refresh(db_user)
    except IntegrityError:
        db.rollback()
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Username or Email already exists.")
    return db_user

@router.delete("/{user_id}", response_model=UserRead)
def delete_user(user_id: int, db: Session = Depends(get_db)):
    db_user = db.query(UserModel).filter(UserModel.UserID == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    db.delete(db_user)
    db.commit()
    return db_user


==================== C:\Code\recipe-app\server\api\routes\__init__.py ====================

from .ingredients import router as ingredients_router
from .recipes import router as recipes_router
from .users import router as users_router
from .ingredient_categories import router as ingredient_categories_router
from .ingredient_sub_categories import router as ingredient_sub_categories_router
from .recipe_authors import router as recipe_authors_router
from .recipe_books import router as recipe_books_router
from .recipe_ingredients import router as recipe_ingredients_router
from .units import router as units_router
from .meal_plans import router as meal_plans_router
from .meal_plan_recipes import router as meal_plan_recipes_router
from .shopping_lists import router as shopping_lists_router
from .shopping_list_ingredients import router as shopping_list_ingredients_router

__all__ = [
    "ingredients_router",
    "recipes_router",
    "users_router",
    "ingredient_categories_router",
    "ingredient_sub_categories_router",
    "recipe_authors_router",
    "recipe_books_router",
    "recipe_ingredients_router",
    "units_router",
    "meal_plans_router",
    "meal_plan_recipes_router",
    "shopping_lists_router",
    "shopping_list_ingredients_router",
]


==================== C:\Code\recipe-app\server\models\base.py ====================

from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


==================== C:\Code\recipe-app\server\models\ingredient.py ====================

from sqlalchemy import Column, Integer, String, Float, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class Ingredient(Base):
    __tablename__ = "Ingredients"

    IngredientID = Column(Integer, primary_key=True)
    SubCategoryID = Column(Integer, ForeignKey("IngredientSubCategories.SubCategoryID"), nullable=False)
    IngredientName = Column(String, nullable=False)
    PurchaseUnitID = Column(Integer, ForeignKey("Units.UnitID"))
    PurchaseWeightVolume = Column(Float)
    PurchaseWeightUnitID = Column(Integer, ForeignKey("Units.UnitID"))
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    subcategory = relationship("IngredientSubCategory", back_populates="ingredients")
    recipes = relationship("RecipeIngredient", back_populates="ingredient")
    shopping_list_ingredients = relationship("ShoppingListIngredient", back_populates="ingredient")


==================== C:\Code\recipe-app\server\models\ingredient_category.py ====================

from sqlalchemy import Column, Integer, String, TIMESTAMP
from sqlalchemy.orm import relationship
from .base import Base
from datetime import datetime

class IngredientCategory(Base):
    __tablename__ = "IngredientCategories"

    CategoryID = Column(Integer, primary_key=True, index=True, autoincrement=True)
    CategoryName = Column(String, nullable=False, unique=True)
    CreatedAt = Column(TIMESTAMP, default=datetime.utcnow)
    UpdatedAt = Column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    subcategories = relationship("IngredientSubCategory", order_by="IngredientSubCategory.SubCategoryID", back_populates="category")


==================== C:\Code\recipe-app\server\models\ingredient_sub_category.py ====================

from sqlalchemy import Column, Integer, String, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class IngredientSubCategory(Base):
    __tablename__ = "IngredientSubCategories"

    SubCategoryID = Column(Integer, primary_key=True)
    CategoryID = Column(Integer, ForeignKey("IngredientCategories.CategoryID"), nullable=False)
    SubCategoryName = Column(String, nullable=False)
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    category = relationship("IngredientCategory", back_populates="subcategories")
    ingredients = relationship("Ingredient", order_by="Ingredient.IngredientID", back_populates="subcategory")


==================== C:\Code\recipe-app\server\models\meal_plan.py ====================

from sqlalchemy import Column, Integer, String, Date, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class MealPlan(Base):
    __tablename__ = "MealPlans"

    MealPlanID = Column(Integer, primary_key=True)
    UserID = Column(Integer, ForeignKey("Users.UserID"), nullable=False)
    PlanName = Column(String)
    StartDate = Column(Date)
    EndDate = Column(Date)
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    user = relationship("User", back_populates="meal_plans")
    recipes = relationship("MealPlanRecipe", back_populates="meal_plan")


==================== C:\Code\recipe-app\server\models\meal_plan_recipe.py ====================

from sqlalchemy import Column, Integer, String, Date, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class MealPlanRecipe(Base):
    __tablename__ = "MealPlanRecipes"

    MealPlanRecipeID = Column(Integer, primary_key=True)
    MealPlanID = Column(Integer, ForeignKey("MealPlans.MealPlanID"), nullable=False)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    MealType = Column(String)
    Date = Column(Date, nullable=False)

    meal_plan = relationship("MealPlan", back_populates="recipes")
    recipe = relationship("Recipe", back_populates="meal_plan_recipes")
    shopping_list_ingredients = relationship("ShoppingListIngredient", back_populates="meal_plan_recipe")


==================== C:\Code\recipe-app\server\models\recipe.py ====================

from sqlalchemy import Column, Integer, String, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class Recipe(Base):
    __tablename__ = "Recipes"

    RecipeID = Column(Integer, primary_key=True)
    UserID = Column(Integer, ForeignKey("Users.UserID"))
    RecipeName = Column(String, nullable=False)
    AuthorID = Column(Integer, ForeignKey("RecipeAuthors.AuthorID"))
    BookID = Column(Integer, ForeignKey("RecipeBooks.BookID"))
    PageNumber = Column(Integer)
    OnlineURL = Column(String)
    CookTime = Column(Integer)
    Difficulty = Column(String)
    Type = Column(String)
    ImageURL = Column(String)
    Servings = Column(Integer)
    Cuisine = Column(String)
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    user = relationship("User", back_populates="recipes")
    author = relationship("RecipeAuthor", back_populates="recipes")
    book = relationship("RecipeBook", back_populates="recipes")
    ingredients = relationship("RecipeIngredient", back_populates="recipe")
    sections = relationship("RecipeIngredientSection", back_populates="recipe")
    reviews = relationship("RecipeReview", back_populates="recipe")
    steps = relationship("RecipeStep", back_populates="recipe")
    tags = relationship("RecipeTag", back_populates="recipe")
    meal_plan_recipes = relationship("MealPlanRecipe", back_populates="recipe")


==================== C:\Code\recipe-app\server\models\recipe_author.py ====================

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from .base import Base

class RecipeAuthor(Base):
    __tablename__ = "RecipeAuthors"

    AuthorID = Column(Integer, primary_key=True)
    AuthorName = Column(String, nullable=False)
    AuthorImageURL = Column(String)

    books = relationship("RecipeBook", back_populates="author")
    recipes = relationship("Recipe", back_populates="author")


==================== C:\Code\recipe-app\server\models\recipe_book.py ====================

# models/recipe_book.py
from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeBook(Base):
    __tablename__ = "RecipeBooks"

    BookID = Column(Integer, primary_key=True)
    AuthorID = Column(Integer, ForeignKey("RecipeAuthors.AuthorID"), nullable=False)
    BookName = Column(String, nullable=False)
    CoverArtURL = Column(String)

    author = relationship("RecipeAuthor", back_populates="books")
    recipes = relationship("Recipe", back_populates="book")


==================== C:\Code\recipe-app\server\models\recipe_ingredient.py ====================

from sqlalchemy import Column, Integer, Float, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeIngredient(Base):
    __tablename__ = "RecipeIngredients"

    RecipeIngredientID = Column(Integer, primary_key=True)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    IngredientID = Column(Integer, ForeignKey("Ingredients.IngredientID"), nullable=False)
    SectionID = Column(Integer, ForeignKey("RecipeIngredientSections.SectionID"))
    Quantity = Column(Float)
    UnitID = Column(Integer, ForeignKey("Units.UnitID"))

    recipe = relationship("Recipe", back_populates="ingredients")
    ingredient = relationship("Ingredient", back_populates="recipes")
    section = relationship("RecipeIngredientSection", back_populates="ingredients")
    unit = relationship("Unit", back_populates="recipe_ingredients")


==================== C:\Code\recipe-app\server\models\recipe_ingredient_section.py ====================

from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeIngredientSection(Base):
    __tablename__ = "RecipeIngredientSections"

    SectionID = Column(Integer, primary_key=True)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    SectionName = Column(String, nullable=False)

    recipe = relationship("Recipe", back_populates="sections")
    ingredients = relationship("RecipeIngredient", back_populates="section")


==================== C:\Code\recipe-app\server\models\recipe_review.py ====================

from sqlalchemy import Column, Integer, Float, String, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeReview(Base):
    __tablename__ = "RecipeReviews"

    ReviewID = Column(Integer, primary_key=True)
    UserID = Column(Integer, ForeignKey("Users.UserID"), nullable=False)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    Rating = Column(Float, nullable=False)
    ReviewText = Column(String)
    CreatedAt = Column(TIMESTAMP)

    user = relationship("User", back_populates="reviews")
    recipe = relationship("Recipe", back_populates="reviews")


==================== C:\Code\recipe-app\server\models\recipe_step.py ====================

from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeStep(Base):
    __tablename__ = "RecipeSteps"

    StepID = Column(Integer, primary_key=True)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    StepNumber = Column(Integer, nullable=False)
    Description = Column(String, nullable=False)

    recipe = relationship("Recipe", back_populates="steps")


==================== C:\Code\recipe-app\server\models\recipe_tag.py ====================

from sqlalchemy import Column, Integer, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class RecipeTag(Base):
    __tablename__ = "RecipeTags"

    RecipeTagID = Column(Integer, primary_key=True)
    RecipeID = Column(Integer, ForeignKey("Recipes.RecipeID"), nullable=False)
    TagID = Column(Integer, ForeignKey("Tags.TagID"), nullable=False)

    recipe = relationship("Recipe", back_populates="tags")
    tag = relationship("Tag", back_populates="recipes")


==================== C:\Code\recipe-app\server\models\shopping_list.py ====================

from sqlalchemy import Column, Integer, TIMESTAMP, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class ShoppingList(Base):
    __tablename__ = "ShoppingLists"

    ShoppingListID = Column(Integer, primary_key=True)
    UserID = Column(Integer, ForeignKey("Users.UserID"), nullable=False)
    CreatedAt = Column(TIMESTAMP)
    UpdatedAt = Column(TIMESTAMP)

    user = relationship("User", back_populates="shopping_lists")
    ingredients = relationship("ShoppingListIngredient", back_populates="shopping_list")


==================== C:\Code\recipe-app\server\models\shopping_list_ingredient.py ====================

from sqlalchemy import Column, Integer, Float, Boolean, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class ShoppingListIngredient(Base):
    __tablename__ = "ShoppingListIngredients"

    ShoppingListIngredientID = Column(Integer, primary_key=True)
    ShoppingListID = Column(Integer, ForeignKey("ShoppingLists.ShoppingListID"), nullable=False)
    MealPlanRecipeID = Column(Integer, ForeignKey("MealPlanRecipes.MealPlanRecipeID"))
    IngredientID = Column(Integer, ForeignKey("Ingredients.IngredientID"), nullable=False)
    Quantity = Column(Float)
    UnitID = Column(Integer, ForeignKey("Units.UnitID"))
    IsManual = Column(Boolean)
    AlreadyHave = Column(Boolean)
    Purchased = Column(Boolean)

    shopping_list = relationship("ShoppingList", back_populates="ingredients")
    meal_plan_recipe = relationship("MealPlanRecipe", back_populates="shopping_list_ingredients")
    ingredient = relationship("Ingredient", back_populates="shopping_list_ingredients")
    unit = relationship("Unit", back_populates="shopping_list_ingredients")


==================== C:\Code\recipe-app\server\models\tag.py ====================

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from .base import Base

class Tag(Base):
    __tablename__ = "Tags"

    TagID = Column(Integer, primary_key=True)
    TagName = Column(String, nullable=False, unique=True)

    recipes = relationship("RecipeTag", back_populates="tag")


==================== C:\Code\recipe-app\server\models\unit.py ====================

from sqlalchemy import Column, Integer, String
from sqlalchemy.orm import relationship
from .base import Base

class Unit(Base):
    __tablename__ = "Units"

    UnitID = Column(Integer, primary_key=True)
    UnitName = Column(String, nullable=False, unique=True)
    Abbreviation = Column(String, nullable=False, unique=True)
    
    recipe_ingredients = relationship("RecipeIngredient", back_populates="unit")
    shopping_list_ingredients = relationship("ShoppingListIngredient", back_populates="unit")
    unit_conversions_from = relationship("UnitConversion", foreign_keys="[UnitConversion.FromUnitID]", back_populates="from_unit")
    unit_conversions_to = relationship("UnitConversion", foreign_keys="[UnitConversion.ToUnitID]", back_populates="to_unit")


==================== C:\Code\recipe-app\server\models\unit_conversion.py ====================

from sqlalchemy import Column, Integer, Float, ForeignKey
from sqlalchemy.orm import relationship
from .base import Base

class UnitConversion(Base):
    __tablename__ = "UnitConversions"

    FromUnitID = Column(Integer, ForeignKey("Units.UnitID"), primary_key=True)
    ToUnitID = Column(Integer, ForeignKey("Units.UnitID"), primary_key=True)
    ConversionFactor = Column(Float, nullable=False)

    from_unit = relationship("Unit", foreign_keys=[FromUnitID], back_populates="unit_conversions_from")
    to_unit = relationship("Unit", foreign_keys=[ToUnitID], back_populates="unit_conversions_to")


==================== C:\Code\recipe-app\server\models\user.py ====================

from sqlalchemy import Column, Integer, String, DateTime
from datetime import datetime
from sqlalchemy.orm import relationship
from .base import Base

class User(Base):
    __tablename__ = 'Users'
    UserID = Column(Integer, primary_key=True, index=True, autoincrement=True)
    Username = Column(String, unique=True, index=True, nullable=False)
    PasswordHash = Column(String, nullable=False)
    Email = Column(String, unique=True, index=True, nullable=False)
    CreatedAt = Column(DateTime, default=datetime.utcnow)
    UpdatedAt = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    recipes = relationship("Recipe", back_populates="user")
    meal_plans = relationship("MealPlan", back_populates="user")
    reviews = relationship("RecipeReview", back_populates="user")
    shopping_lists = relationship("ShoppingList", back_populates="user")


==================== C:\Code\recipe-app\server\models\__init__.py ====================

from .base import Base
from .user import User
from .recipe_author import RecipeAuthor
from .recipe_book import RecipeBook
from .recipe import Recipe
from .ingredient_category import IngredientCategory
from .ingredient_sub_category import IngredientSubCategory
from .ingredient import Ingredient
from .unit import Unit
from .meal_plan import MealPlan
from .meal_plan_recipe import MealPlanRecipe
from .recipe_ingredient import RecipeIngredient
from .recipe_ingredient_section import RecipeIngredientSection
from .recipe_review import RecipeReview
from .recipe_step import RecipeStep
from .recipe_tag import RecipeTag
from .shopping_list import ShoppingList
from .shopping_list_ingredient import ShoppingListIngredient
from .tag import Tag
from .unit_conversion import UnitConversion


==================== C:\Code\recipe-app\server\schemas\ingredient.py ====================

from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class IngredientBase(BaseModel):
    IngredientName: str
    PurchaseWeightVolume: float
    PurchaseUnitID: Optional[int]
    SubCategoryID: int
    PurchaseWeightUnitID: Optional[int]

class IngredientCreate(IngredientBase):
    pass

class IngredientUpdate(IngredientBase):
    pass

class Ingredient(IngredientBase):
    IngredientID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\ingredient_category.py ====================

from pydantic import BaseModel
from datetime import datetime
from typing import List, Optional

class IngredientCategoryBase(BaseModel):
    CategoryName: str

class IngredientCategoryCreate(IngredientCategoryBase):
    pass

class IngredientCategoryUpdate(IngredientCategoryBase):
    pass

class IngredientCategory(IngredientCategoryBase):
    CategoryID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\ingredient_sub_category.py ====================

# schemas/ingredient_sub_category.py

from pydantic import BaseModel
from datetime import datetime

class IngredientSubCategoryBase(BaseModel):
    SubCategoryName: str
    CategoryID: int

class IngredientSubCategoryCreate(IngredientSubCategoryBase):
    pass

class IngredientSubCategoryUpdate(IngredientSubCategoryBase):
    pass

class IngredientSubCategory(IngredientSubCategoryBase):
    SubCategoryID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode: True


==================== C:\Code\recipe-app\server\schemas\meal_plan.py ====================

# schemas/meal_plan.py
from pydantic import BaseModel
from datetime import datetime, date
from typing import List, Optional

class MealPlanBase(BaseModel):
    UserID: int
    PlanName: Optional[str] = None
    StartDate: Optional[date] = None
    EndDate: Optional[date] = None

class MealPlanCreate(MealPlanBase):
    pass

class MealPlanUpdate(MealPlanBase):
    pass

class MealPlan(MealPlanBase):
    MealPlanID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\meal_plan_recipe.py ====================

# schemas/meal_plan_recipe.py
from pydantic import BaseModel
from datetime import date

class MealPlanRecipeBase(BaseModel):
    MealPlanID: int
    RecipeID: int
    MealType: str
    Date: date

class MealPlanRecipeCreate(MealPlanRecipeBase):
    pass

class MealPlanRecipeUpdate(MealPlanRecipeBase):
    pass

class MealPlanRecipe(MealPlanRecipeBase):
    MealPlanRecipeID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\recipe.py ====================

from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class RecipeBase(BaseModel):
    RecipeName: str
    AuthorID: Optional[int] = None
    BookID: Optional[int] = None
    PageNumber: Optional[int] = None
    OnlineURL: Optional[str] = None
    CookTime: Optional[int] = None
    Difficulty: Optional[str] = None
    Type: Optional[str] = None
    ImageURL: Optional[str] = None
    Servings: Optional[int] = None
    Cuisine: Optional[str] = None

class RecipeCreate(RecipeBase):
    pass

class Recipe(RecipeBase):
    RecipeID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\recipe_author.py ====================

from pydantic import BaseModel
from typing import Optional

class RecipeAuthorBase(BaseModel):
    AuthorName: str
    AuthorImageURL: Optional[str] = None

class RecipeAuthorCreate(RecipeAuthorBase):
    pass

class RecipeAuthorUpdate(RecipeAuthorBase):
    pass

class RecipeAuthor(RecipeAuthorBase):
    AuthorID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\recipe_book.py ====================

# schemas/recipe_book.py
from pydantic import BaseModel
from typing import Optional

class RecipeBookBase(BaseModel):
    AuthorID: int
    BookName: str
    CoverArtURL: Optional[str] = None

class RecipeBookCreate(RecipeBookBase):
    pass

class RecipeBookUpdate(RecipeBookBase):
    pass

class RecipeBook(RecipeBookBase):
    BookID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\recipe_ingredient.py ====================

# schemas/recipe_ingredient.py
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class RecipeIngredientBase(BaseModel):
    RecipeID: int
    IngredientID: int
    SectionID: Optional[int] = None
    Quantity: Optional[float] = None
    UnitID: Optional[int] = None

class RecipeIngredientCreate(RecipeIngredientBase):
    pass

class RecipeIngredientUpdate(RecipeIngredientBase):
    pass

class RecipeIngredient(RecipeIngredientBase):
    RecipeIngredientID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\shopping_list.py ====================

# schemas/shopping_list.py
from pydantic import BaseModel
from datetime import datetime
from typing import List, Optional

class ShoppingListBase(BaseModel):
    UserID: int

class ShoppingListCreate(ShoppingListBase):
    pass

class ShoppingListUpdate(ShoppingListBase):
    pass

class ShoppingList(ShoppingListBase):
    ShoppingListID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\shopping_list_ingredient.py ====================

# schemas/shopping_list_ingredient.py
from pydantic import BaseModel
from typing import Optional

class ShoppingListIngredientBase(BaseModel):
    ShoppingListID: int
    MealPlanRecipeID: Optional[int]
    IngredientID: int
    Quantity: Optional[float]
    UnitID: Optional[int]
    IsManual: Optional[bool]
    AlreadyHave: Optional[bool]
    Purchased: Optional[bool]

class ShoppingListIngredientCreate(ShoppingListIngredientBase):
    pass

class ShoppingListIngredientUpdate(ShoppingListIngredientBase):
    pass

class ShoppingListIngredient(ShoppingListIngredientBase):
    ShoppingListIngredientID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\unit.py ====================

from pydantic import BaseModel
from datetime import datetime

class UnitBase(BaseModel):
    UnitName: str
    Abbreviation: str

class UnitCreate(UnitBase):
    pass

class UnitUpdate(UnitBase):
    pass

class Unit(UnitBase):
    UnitID: int

    class Config:
        orm_mode = True


==================== C:\Code\recipe-app\server\schemas\user.py ====================

from pydantic import BaseModel, EmailStr
from datetime import datetime
from typing import Optional

class UserBase(BaseModel):
    Username: str
    Email: EmailStr

class UserCreate(UserBase):
    Password: str

class UserRead(UserBase):
    UserID: int
    CreatedAt: datetime
    UpdatedAt: datetime

    class Config:
        orm_mode = True

class UserLogin(BaseModel):
    Username: str
    Password: str
